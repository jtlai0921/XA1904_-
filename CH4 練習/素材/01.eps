%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: cutekids.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Elaine Leong
%%CreationDate: 7/04/2014
%%BoundingBox: 0 0 822 833
%%HiResBoundingBox: 0 0 821.5083 832.6714
%%CropBox: 0 0 821.5083 832.6714
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-repair">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:description>
            <rdf:Alt/>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li/>
            </rdf:Bag>
         </dc:subject>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2014-04-07T18:30:58+10:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-04-07T18:30:58+10:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-04-07T18:30:58+10:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8i/OHWNTfWrfR4JH&#xA;W19BXaGMn948jMPiA+1sooM2OjgOEyLw3tRqspzRwxJ4eG6HUklIfI99rOgeadPinSa1gvZVhmgl&#xA;Vo1dZDwDcWp9kkGuXZ4xnA10dZ2PmzaXUwEhKMZmiDYu9uvc97zUPpjsVUL2+s7G2e5vJ0t7dPtS&#xA;yMFUfScMYkmg15csMceKZEYjqVHTNc0fVFZtOvIroJ9sRsCV+a9RhlCUeYa8GrxZh+7kJe4o3IuQ&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:37DA686A292168118083D5D4723D4DCA</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:37DA686A292168118083D5D4723D4DCA</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:35DA686A292168118083D5D4723D4DCA</stRef:instanceID>
            <stRef:documentID>xmp.did:35DA686A292168118083D5D4723D4DCA</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F4F82F69B62068118C14B7E170DD38F8</stEvt:instanceID>
                  <stEvt:when>2013-12-20T16:51:19+11:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:35DA686A292168118083D5D4723D4DCA</stEvt:instanceID>
                  <stEvt:when>2014-04-07T18:29:12+10:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:37DA686A292168118083D5D4723D4DCA</stEvt:instanceID>
                  <stEvt:when>2014-04-07T18:30:58+10:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>296.999959</stDim:w>
            <stDim:h>296.999959</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=24 Y=43 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>24.000000</xmpG:magenta>
                           <xmpG:yellow>42.999996</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=19 M=88 Y=80 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>19.000000</xmpG:cyan>
                           <xmpG:magenta>88.000000</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=62 Y=20 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>62.000000</xmpG:magenta>
                           <xmpG:yellow>19.999998</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=12 Y=32 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>12.142897</xmpG:magenta>
                           <xmpG:yellow>32.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=86 Y=42 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>85.999992</xmpG:magenta>
                           <xmpG:yellow>41.999996</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=70 Y=9 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>8.999997</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=48 Y=15 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>48.000000</xmpG:magenta>
                           <xmpG:yellow>15.483898</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=33 Y=46 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>33.000000</xmpG:magenta>
                           <xmpG:yellow>45.999996</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=70 Y=20 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>19.999998</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=70 Y=80 K=58</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>58.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=17 Y=71 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>17.000002</xmpG:magenta>
                           <xmpG:yellow>71.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=48 Y=50 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>48.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=78 Y=90 K=35</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>78.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>35.000004</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=36 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>36.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=50 Y=0 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=28 Y=50 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>27.871000</xmpG:magenta>
                           <xmpG:yellow>49.935497</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=52 M=21 Y=0 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>52.000000</xmpG:cyan>
                           <xmpG:magenta>20.999998</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=70 Y=80 K=70</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>70.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>69.999702</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=45 M=86 Y=75 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>45.000000</xmpG:cyan>
                           <xmpG:magenta>85.999992</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=46 M=94 Y=94 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>45.835197</xmpG:cyan>
                           <xmpG:magenta>93.802200</xmpG:magenta>
                           <xmpG:yellow>94.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=34 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>34.000004</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=20 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>19.999998</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=0 Y=66 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>66.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=2 M=0 Y=58 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>1.999998</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>57.894699</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=5 Y=52 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>5.000001</xmpG:magenta>
                           <xmpG:yellow>52.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=30 M=50 Y=75 K=22</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>30.000002</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>22.000004</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=38 Y=85 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>38.000000</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=46 M=81 Y=0 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>45.999996</xmpG:cyan>
                           <xmpG:magenta>81.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=27 M=40 Y=0 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>26.666700</xmpG:cyan>
                           <xmpG:magenta>39.999996</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>79.998795</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=66 M=0 Y=33 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>66.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>33.464790</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=66 M=0 Y=33 K=11</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>66.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>33.464790</xmpG:yellow>
                           <xmpG:black>11.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=44 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>44.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=59 Y=85 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>58.999996</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=26 Y=85 K=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>26.000000</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -832.671 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 832.671 li
821.508 832.671 li
821.508 0 li
cp
clp
[1 0 0 1 0 0 ]ct
551.907 443.637 mo
576.906 441.159 576.615 482.081 556.905 488.319 cv
556.905 488.319 li
553.253 478.725 550.664 469.141 549.671 459.034 cv
549.687 456.909 549.792 442.028 548.701 446.272 cv
551.907 443.637 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .24 .43 0 cmyk
f
465.569 327.961 mo
473.586 321.641 480.017 314.246 489.605 311.125 cv
500.799 306.422 520.212 304.559 531.9 305.173 cv
539.871 305.23 541.182 308.303 548.61 309.951 cv
559.755 312.156 571.254 315.985 579.207 323.448 cv
605.736 348.352 606.602 375.996 607.059 386.628 cv
607.465 404.17 603.103 419.827 592.899 434.635 cv
580.007 453.678 555.978 469.452 534.667 476.741 cv
520.283 481.422 503.25 485.02 488.394 481.196 cv
488.394 481.196 492.154 475.907 493.238 472.725 cv
493.238 472.725 li
476.307 461.975 457.751 455.465 446.723 436.784 cv
430.969 410.096 434.43 371.854 451.083 346.992 cv
454.844 341.173 457.537 336.408 462.354 331.659 cv
465.569 327.961 li
cp
.19 .88 .8 0 cmyk
f
501.286 462.012 mo
499.565 474.717 503.261 485.62 513.417 493.549 cv
515.855 488.745 520.211 475.475 517.824 470.141 cv
515.842 465.715 506.374 464.102 501.68 462.413 cv
501.286 462.012 li
cp
0 .24 .43 0 cmyk
f
574.272 447.842 mo
570.408 446.875 566.745 445.36 562.984 444.143 cv
556.349 441.993 549.917 439.04 543.032 441.836 cv
536.233 444.6 530.62 449.145 522.932 445.026 cv
520.541 445.008 li
520.357 445.454 520.194 445.905 520.044 446.356 cv
521.312 448.602 li
514.908 452.143 506.132 453.143 499.733 456.02 cv
496.144 467.295 511.601 478.317 521.262 474.772 cv
522.537 476.729 524.729 477.79 528.681 477.602 cv
535.06 477.299 542.81 475.315 549.149 474.153 cv
559.144 472.317 577.371 459.622 574.272 447.842 cv
cp
0 0 0 0 cmyk
f
542.265 535.067 mo
542.075 542.524 534.555 564.149 539.069 569.795 cv
549.21 582.1 557.16 546.622 555.831 540.829 cv
554.934 532.889 550.107 532.047 542.722 533.448 cv
542.265 535.067 li
cp
0 .24 .43 0 cmyk
f
515.97 533.284 mo
515.779 540.743 508.255 562.366 512.773 568.014 cv
522.913 580.319 530.863 544.838 529.535 539.045 cv
528.637 531.108 523.811 530.266 516.427 531.668 cv
515.97 533.284 li
cp
f
517.343 446.049 mo
520.008 445.004 523.734 444.499 525.858 444.514 cv
526.344 450.895 530.916 480.692 543.245 465.899 cv
547 461.141 544.972 447.309 545.013 441.461 cv
547.135 442.01 552.892 438.047 553.263 439.926 cv
555.572 451.635 556.88 455 557.89 462.016 cv
563.966 504.315 585.298 531.571 586.338 534.768 cv
586.338 534.768 li
560.351 564.083 492.765 538.885 490.106 538.868 cv
490.106 538.868 li
493.25 526.53 507.383 501.12 517.226 462.524 cv
518.887 456.004 520.011 444.473 517.339 446.581 cv
517.343 446.049 li
cp
0 .62 .2 0 cmyk
f
556.28 520.206 mo
554.591 520.194 553.234 518.815 553.247 517.125 cv
553.258 515.438 554.635 514.079 556.324 514.092 cv
558.012 514.104 559.369 515.481 559.356 517.17 cv
559.344 518.858 557.968 520.217 556.28 520.206 cv
cp
555.583 543.317 mo
553.895 543.305 552.538 541.928 552.549 540.241 cv
552.561 538.553 553.938 537.196 555.626 537.208 cv
557.314 537.219 558.673 538.596 558.662 540.286 cv
558.65 541.973 557.271 543.331 555.583 543.317 cv
cp
545.681 478.672 mo
543.993 478.661 542.633 477.282 542.645 475.594 cv
542.658 473.905 544.036 472.547 545.724 472.559 cv
547.412 472.571 548.77 473.948 548.758 475.637 cv
548.747 477.325 547.369 478.684 545.681 478.672 cv
cp
531.476 532.782 mo
529.788 532.77 528.428 531.391 528.44 529.706 cv
528.453 528.016 529.831 526.659 531.519 526.67 cv
533.208 526.684 534.565 528.061 534.553 529.749 cv
534.542 531.436 533.165 532.793 531.476 532.782 cv
cp
523.363 477.983 mo
521.674 477.969 520.315 476.592 520.328 474.903 cv
520.339 473.215 521.718 471.856 523.407 471.868 cv
525.095 471.881 526.453 473.26 526.44 474.948 cv
526.428 476.635 525.051 477.995 523.363 477.983 cv
cp
520.023 517.688 mo
518.335 517.676 516.978 516.297 516.99 514.61 cv
517.001 512.922 518.378 511.563 520.066 511.575 cv
521.753 511.586 523.114 512.965 523.102 514.655 cv
523.09 516.34 521.71 517.7 520.023 517.688 cv
cp
513.792 497.18 mo
512.104 497.168 510.747 495.792 510.758 494.102 cv
510.771 492.415 512.148 491.055 513.836 491.067 cv
515.523 491.079 516.88 492.458 516.868 494.145 cv
516.856 495.834 515.479 497.194 513.792 497.18 cv
cp
507.389 538.059 mo
505.701 538.047 504.342 536.668 504.354 534.983 cv
504.366 533.293 505.744 531.936 507.432 531.948 cv
509.119 531.959 510.479 533.338 510.467 535.026 cv
510.456 536.711 509.076 538.071 507.389 538.059 cv
cp
0 .121429 .32 0 cmyk
f
523.407 471.868 mo
521.718 471.856 520.339 473.215 520.328 474.903 cv
520.315 476.592 521.674 477.969 523.363 477.983 cv
525.051 477.995 526.428 476.635 526.44 474.948 cv
526.453 473.26 525.095 471.881 523.407 471.868 cv
cp
f
552.397 449.62 mo
552.385 451.307 553.744 452.686 555.432 452.698 cv
555.64 452.7 555.845 452.68 556.042 452.641 cv
555.639 450.917 555.189 449.014 554.677 446.7 cv
553.375 447.042 552.407 448.209 552.397 449.62 cv
cp
f
545.724 472.559 mo
544.036 472.547 542.658 473.905 542.645 475.594 cv
542.633 477.282 543.993 478.661 545.681 478.672 cv
547.369 478.684 548.747 477.325 548.758 475.637 cv
548.77 473.948 547.412 472.571 545.724 472.559 cv
cp
f
561.661 492.206 mo
561.648 493.893 563.008 495.272 564.695 495.284 cv
565.242 495.288 565.749 495.135 566.196 494.887 cv
565.527 493.053 564.876 491.161 564.244 489.219 cv
562.792 489.444 561.671 490.688 561.661 492.206 cv
cp
f
574.22 519.932 mo
574.208 521.62 575.567 522.999 577.254 523.01 cv
577.915 523.016 578.525 522.805 579.026 522.452 cv
578.096 520.825 577.116 519.053 576.1 517.135 cv
575.004 517.592 574.229 518.67 574.22 519.932 cv
cp
f
556.324 514.092 mo
554.635 514.079 553.258 515.438 553.247 517.125 cv
553.234 518.815 554.591 520.194 556.28 520.206 cv
557.968 520.217 559.344 518.858 559.356 517.17 cv
559.369 515.481 558.012 514.104 556.324 514.092 cv
cp
f
555.626 537.208 mo
553.938 537.196 552.561 538.553 552.549 540.241 cv
552.538 541.928 553.895 543.305 555.583 543.317 cv
557.271 543.331 558.65 541.973 558.662 540.286 cv
558.673 538.596 557.314 537.219 555.626 537.208 cv
cp
f
531.519 526.67 mo
529.831 526.659 528.453 528.016 528.44 529.706 cv
528.428 531.391 529.788 532.77 531.476 532.782 cv
533.165 532.793 534.542 531.436 534.553 529.749 cv
534.565 528.061 533.208 526.684 531.519 526.67 cv
cp
f
507.432 531.948 mo
505.744 531.936 504.366 533.293 504.354 534.983 cv
504.342 536.668 505.701 538.047 507.389 538.059 cv
509.076 538.071 510.456 536.711 510.467 535.026 cv
510.479 533.338 509.119 531.959 507.432 531.948 cv
cp
f
502.63 515.834 mo
502.64 514.364 501.607 513.129 500.224 512.829 cv
499.431 514.764 498.666 516.608 497.926 518.379 cv
498.398 518.684 498.951 518.866 499.551 518.87 cv
501.239 518.881 502.618 517.522 502.63 515.834 cv
cp
f
520.066 511.575 mo
518.378 511.563 517.001 512.922 516.99 514.61 cv
516.978 516.297 518.335 517.676 520.023 517.688 cv
521.71 517.7 523.09 516.34 523.102 514.655 cv
523.114 512.965 521.753 511.586 520.066 511.575 cv
cp
f
521.658 455.913 mo
521.669 454.29 520.41 452.961 518.809 452.856 cv
518.652 454.774 518.367 456.889 518.004 458.885 cv
518.192 458.922 518.384 458.946 518.582 458.948 cv
520.269 458.959 521.646 457.602 521.658 455.913 cv
cp
f
513.836 491.067 mo
512.148 491.055 510.771 492.415 510.758 494.102 cv
510.747 495.792 512.104 497.168 513.792 497.18 cv
515.479 497.194 516.856 495.834 516.868 494.145 cv
516.88 492.458 515.523 491.079 513.836 491.067 cv
cp
f
492.569 531.5 mo
491.487 534.325 490.637 536.786 490.106 538.868 cv
492.765 538.885 560.351 564.083 586.338 534.768 cv
586.123 534.106 585.031 532.403 583.395 529.764 cv
558.303 551.891 504.716 535.036 492.569 531.5 cv
cp
0 .86 .42 0 cmyk
f
532.804 327.798 mo
536.028 310.484 534.115 277.759 537.805 259.64 cv
540.697 245.442 551.303 241.452 565.292 245.966 cv
581.665 250.702 575.389 274.937 572.687 286.695 cv
568.818 302.346 565.744 318.073 561.875 333.724 cv
552.647 329.657 539.004 329.979 530.919 330.823 cv
532.804 327.798 li
cp
0 .7 .09 0 cmyk
f
543.555 277.216 mo
545.287 268.713 551.638 266.324 560.015 269.028 cv
569.82 271.865 566.061 286.377 564.443 293.417 cv
562.127 302.791 559.111 317.616 556.793 326.988 cv
551.857 324.302 544.386 320.713 539.543 321.218 cv
539.543 321.218 541.344 288.067 543.555 277.216 cv
cp
0 .48 .154839 0 cmyk
f
469.82 351.058 mo
462.282 335.143 443.176 312.937 435.498 296.115 cv
427.649 278.92 434.189 270.261 448.168 265.717 cv
464.208 259.958 473.333 283.269 478.036 294.378 cv
484.078 309.327 490.805 323.87 496.845 338.818 cv
486.987 340.932 476.123 349.191 470.066 354.615 cv
469.82 351.058 li
cp
0 .7 .09 0 cmyk
f
471.571 339.73 mo
466.659 329.46 454.424 315.034 449.417 304.184 cv
444.296 293.091 448.297 287.626 457.014 284.879 cv
467.005 281.378 472.997 296.398 476.071 303.561 cv
480.034 313.193 484.418 322.576 488.378 332.208 cv
482.22 333.448 475.5 338.608 471.765 342.009 cv
471.571 339.73 li
cp
0 .48 .154839 0 cmyk
f
470.641 399.351 mo
464.797 398.778 458.397 401.921 455.704 407.215 cv
449.766 419.93 466.729 426.428 473.177 416.375 cv
470.641 399.351 li
cp
0 .33 .46 0 cmyk
f
465.484 395.585 mo
474.266 394.053 485.901 383.382 495.49 380.261 cv
516.268 373.5 538.062 373.124 558.306 366.358 cv
563.633 364.801 569.494 362.718 573.757 361.153 cv
579.537 370.761 581.577 382.469 584.692 393.12 cv
589.876 411.228 586.069 423.426 568.991 433.401 cv
563.122 436.551 557.256 439.165 550.863 441.247 cv
548.207 441.227 543.409 443.319 541.797 445.434 cv
540.187 448.081 542.258 455.536 539.055 457.639 cv
535.316 460.268 534.294 454.417 530.589 452.262 cv
521.065 446.35 506.668 452.624 496.037 453.081 cv
480.092 452.967 475.369 444.43 469.086 431.096 cv
463.854 419.366 463.401 408.202 459.762 397.014 cv
465.484 395.585 li
cp
0 .24 .43 0 cmyk
f
494.529 324.629 mo
518.711 315.557 548.708 314.506 568.562 333.302 cv
579.602 343.752 582.175 357.567 583.151 371.896 cv
582.449 372.189 579.765 372.596 578.809 372.514 cv
569.322 346.779 552.973 330.821 523.119 332.313 cv
498.413 333.546 476.625 346.456 467.608 369.202 cv
462.735 381.496 463.151 394.637 462.607 407.657 cv
450.291 397.627 451.172 369.571 456.414 357.181 cv
463.31 340.884 478 330.833 494.529 324.629 cv
cp
0 .7 .2 0 cmyk
f
580.823 385.271 mo
591.547 377.481 583.895 365.558 574.741 366.619 cv
577.437 372.516 579.162 378.932 580.823 385.271 cv
cp
0 .33 .46 0 cmyk
f
529.445 432.782 mo
528.186 432.782 526.939 432.518 525.724 431.983 cv
521.238 430.012 517.824 424.584 517.502 419.095 cv
517.066 419.299 516.613 419.505 516.146 419.717 cv
514.534 420.451 512.706 421.282 510.912 422.339 cv
510.624 422.508 510.26 422.411 510.093 422.128 cv
509.925 421.843 510.02 421.477 510.304 421.309 cv
512.153 420.219 514.011 419.375 515.651 418.628 cv
516.414 418.282 517.139 417.953 517.812 417.622 cv
517.997 417.53 518.216 417.542 518.394 417.652 cv
518.569 417.763 518.675 417.956 518.673 418.163 cv
518.636 423.426 521.945 429.016 526.206 430.889 cv
528.578 431.932 532.304 432.336 536.592 428.344 cv
539.503 424.991 539.832 418.509 538.278 414.818 cv
538.15 414.514 538.292 414.164 538.596 414.035 cv
538.903 413.908 539.252 414.05 539.379 414.354 cv
541.106 418.455 540.743 425.389 537.451 429.174 cv
534.887 431.565 532.142 432.782 529.445 432.782 cv
cp
.5 .7 .8 .58 cmyk
f
536.419 491.745 mo
537.141 486.866 542.067 479.973 547.577 483.032 cv
555.623 487.446 548.704 502.547 544.732 506.944 cv
529.203 524.1 513.295 492.829 524.413 483.717 cv
529.614 479.6 536.309 486.547 535.946 490.991 cv
536.419 491.745 li
cp
0 .17 .71 0 cmyk
f
499.47 399.349 mo
500.448 403.491 499.157 407.341 496.584 407.948 cv
494.015 408.556 491.137 405.69 490.16 401.548 cv
489.18 397.405 490.472 393.555 493.042 392.948 cv
495.615 392.341 498.493 395.208 499.47 399.349 cv
cp
.5 .7 .8 .58 cmyk
f
553.227 388.571 mo
554.205 392.712 552.915 396.561 550.343 397.17 cv
547.774 397.778 544.897 394.911 543.917 390.769 cv
542.937 386.627 544.229 382.775 546.799 382.17 cv
549.371 381.563 552.249 384.427 553.227 388.571 cv
cp
f
566.809 404.727 mo
566.454 405.311 565.936 405.859 565.3 406.358 cv
561.19 409.578 547.882 412.247 553.598 403.948 cv
556.545 399.666 571.918 396.323 566.809 404.727 cv
cp
0 .48 .5 0 cmyk
f
490.645 422.127 mo
491.269 422.543 492.037 422.85 492.904 423.053 cv
498.491 424.362 512.985 420.871 503.453 415.241 cv
498.532 412.336 481.667 416.114 490.645 422.127 cv
cp
f
153.641 87.0898 mo
145.783 79.3501 139.498 70.3208 130.068 66.4517 cv
119.07 60.6475 89.707 60.5015 78.1836 61.147 cv
70.3271 61.147 69.0137 64.8643 61.6807 66.8008 cv
50.6816 69.3794 39.3203 73.9272 31.4307 82.915 cv
5.1084 112.908 4.06055 146.446 3.53711 159.345 cv
3.01367 180.63 7.20117 199.667 17.1543 217.726 cv
29.7266 240.946 53.2988 260.296 74.2529 269.323 cv
88.3965 275.132 105.158 279.644 119.826 275.132 cv
119.826 275.132 116.16 268.681 115.112 264.812 cv
115.112 264.812 li
131.875 251.911 150.209 244.173 161.209 221.597 cv
176.924 189.349 184.023 140.625 167.784 110.309 cv
164.118 103.216 161.499 97.4102 156.785 91.6064 cv
153.641 87.0898 li
cp
.4 .78 .9 .35 cmyk
f
78.209 83.7559 mo
75.1094 66.4189 77.2559 33.709 73.6934 15.564 cv
70.9023 1.34619 60.3252 -2.71924 46.3037 1.69482 cv
29.8984 6.31396 36.001 30.5928 38.6201 42.3701 cv
42.377 58.0493 45.3398 73.7964 49.0957 89.4751 cv
58.3535 85.4736 71.9932 85.8931 80.0723 86.7944 cv
78.209 83.7559 li
cp
.75 0 .36 0 cmyk
f
67.8174 33.0986 mo
66.1465 24.5845 59.8125 22.1494 51.416 24.7935 cv
41.5918 27.5596 45.248 42.0991 46.8145 49.1504 cv
49.0645 58.5405 51.9756 73.3862 54.2256 82.7759 cv
59.1816 80.1245 66.6777 76.5879 71.5156 77.1279 cv
71.5156 77.1279 69.9512 43.9658 67.8174 33.0986 cv
cp
0 0 0 0 cmyk
f
141.025 107.464 mo
148.677 91.603 167.939 69.5337 175.738 52.7666 cv
183.709 35.627 177.231 26.9233 163.285 22.2803 cv
147.287 16.4053 137.996 39.6519 133.215 50.7271 cv
127.066 65.6323 120.234 80.1274 114.088 95.0317 cv
123.932 97.2158 134.736 105.552 140.754 111.02 cv
141.025 107.464 li
cp
.75 0 .36 0 cmyk
f
139.355 96.1235 mo
144.34 85.8892 156.678 71.5503 161.764 60.7368 cv
166.961 49.6807 162.998 44.1885 154.303 41.3789 cv
144.336 37.8062 138.238 52.7827 135.113 59.9233 cv
131.082 69.5278 126.631 78.8779 122.601 88.4829 cv
128.751 89.7661 135.434 94.9736 139.145 98.4014 cv
139.355 96.1235 li
cp
0 0 0 0 cmyk
f
139.859 155.749 mo
145.707 155.218 152.086 158.407 154.742 163.72 cv
160.589 176.478 143.58 182.854 137.203 172.757 cv
139.859 155.749 li
cp
0 .33 .46 0 cmyk
f
65.5254 284.196 mo
62.8281 291.153 61.4414 314.005 55.1016 317.478 cv
41.0039 324.929 47.3281 289.126 50.7871 284.29 cv
54.6719 277.31 59.4512 278.392 65.7266 282.528 cv
65.5254 284.196 li
cp
0 .24 .43 0 cmyk
f
94.1191 284.843 mo
93.0684 292.231 96.8896 314.804 91.498 319.622 cv
79.4531 330.069 77.5117 293.761 79.7852 288.271 cv
81.9893 280.591 86.8887 280.563 93.9375 283.175 cv
94.1191 284.843 li
cp
f
111.722 278.181 mo
109.307 267.378 105.096 255.888 94.0313 251.593 cv
87.373 249.009 79.6914 249.173 72.6963 248.257 cv
65.0381 247.251 57.2383 246.571 49.8711 249.233 cv
49.2588 248.646 48.3086 248.505 47.7422 249.425 cv
43.1045 256.974 39.3525 264.968 36.4678 273.339 cv
32.3105 285.401 37.4346 286.153 48.8438 288.165 cv
64.1836 290.87 79.5039 293.601 95.0557 294.827 cv
100.406 295.249 108.313 297.14 112.288 292.843 cv
115.449 289.421 112.619 282.196 111.722 278.181 cv
cp
.75 0 .36 0 cmyk
f
114.524 216.825 mo
121.441 219.89 137.797 224.866 139.373 234.028 cv
142.035 249.464 123.339 234.821 118.371 231.755 cv
113.321 228.64 109.846 232.651 104.412 230.731 cv
114.524 216.825 li
cp
0 .24 .43 0 cmyk
f
28.0176 215.304 mo
21.3086 218.798 5.30078 224.8 4.30762 234.044 cv
2.62891 249.618 20.3604 233.821 25.124 230.446 cv
29.9668 227.019 33.6895 230.802 38.9902 228.542 cv
28.0176 215.304 li
cp
f
126.601 214.651 mo
115.327 204.392 100.492 200.11 86.3281 195.458 cv
85.5215 195.192 84.8291 195.55 84.4365 196.101 cv
83.8311 195.741 83.0547 195.763 82.541 196.53 cv
79.8203 200.585 77.6934 205.007 75.9199 209.577 cv
74.1172 205.065 71.9922 200.823 67.6367 198.952 cv
62.4785 196.737 56.1445 199.368 51.2305 200.946 cv
43.7402 203.351 36.3213 205.931 28.5703 207.37 cv
27.9297 207.489 27.3105 208.294 27.4033 208.952 cv
28.4072 216.063 29.4502 224.794 32.7236 231.261 cv
36.6416 238.999 45.5879 235.19 52.1152 233.804 cv
60.959 231.923 69.7578 229.356 77.5527 224.718 cv
83.3789 226.976 88.9795 229.753 94.6348 232.431 cv
99.2988 234.642 105.231 238.085 110.637 236.565 cv
119.156 234.175 121.067 222.583 126.84 216.923 cv
127.494 216.28 127.193 215.19 126.601 214.651 cv
cp
.75 0 .36 0 cmyk
f
44.833 268.423 mo
44.6348 268.306 47.9434 269.665 47.7422 269.593 cv
49.2246 270.132 50.709 270.671 52.2139 271.144 cv
54.7207 271.929 57.2412 272.677 59.7988 273.286 cv
65.3555 274.612 70.7129 275.526 74.4785 275.86 cv
79.5508 276.312 84.6426 276.499 89.7246 276.843 cv
98.1426 277.411 106.672 277.96 115.117 277.386 cv
109.363 263.216 100.55 242.64 93.8691 215.64 cv
92.2539 209.108 91.2129 197.569 93.8691 199.696 cv
93.8691 199.165 li
91.2129 198.101 87.4902 197.569 85.3652 197.569 cv
84.834 203.946 80.0508 233.71 67.8271 218.829 cv
64.1074 214.046 66.2324 200.228 66.2324 194.38 cv
64.1074 194.913 58.3789 190.909 57.9941 192.788 cv
55.6016 204.479 54.2695 207.833 53.2109 214.843 cv
50.1211 235.313 43.4785 252.214 37.3262 264.575 cv
39.7617 265.983 42.2627 267.274 44.833 268.423 cv
cp
0 0 0 0 cmyk
f
76.0957 240.769 mo
77.3984 236.015 83.1211 229.765 88.2207 233.466 cv
95.6768 238.815 86.9863 252.976 82.5156 256.858 cv
65.0313 272.021 53.0088 239.058 65.1426 231.354 cv
70.8027 227.894 76.6123 235.597 75.7148 239.964 cv
76.0957 240.769 li
cp
f
75.9258 242.38 mo
76.8047 239.167 80.6738 234.938 84.123 237.44 cv
89.1641 241.06 83.2891 250.632 80.2646 253.263 cv
68.4453 263.511 60.3164 241.224 68.5195 236.017 cv
72.3457 233.675 76.2734 238.886 75.667 241.835 cv
75.9258 242.38 li
cp
.75 0 .36 0 cmyk
f
145.045 152.021 mo
136.273 150.427 124.715 139.672 115.148 136.484 cv
94.4189 129.575 72.6279 129.043 52.4336 122.133 cv
47.1172 120.54 41.2715 118.414 37.0195 116.819 cv
31.1719 126.385 29.0469 138.079 25.8574 148.707 cv
20.5439 166.778 24.2637 179.001 41.2715 189.099 cv
47.1172 192.29 52.9629 194.946 59.3418 197.071 cv
61.999 197.071 66.7822 199.198 68.377 201.325 cv
69.9707 203.981 67.8447 211.423 71.0332 213.548 cv
74.7539 216.204 75.8164 210.362 79.5371 208.233 cv
89.1035 202.39 103.455 208.765 114.083 209.296 cv
130.027 209.296 134.811 200.794 141.188 187.505 cv
146.504 175.812 147.037 164.651 150.756 153.491 cv
145.045 152.021 li
cp
0 .24 .43 0 cmyk
f
116.506 80.8604 mo
92.3887 71.6147 62.3984 70.3516 42.4131 89.0049 cv
31.2988 99.3774 28.627 113.173 27.5488 127.495 cv
28.248 127.793 30.9297 128.219 31.8867 128.143 cv
41.5566 102.477 58.0186 86.6353 87.8613 88.3389 cv
112.559 89.75 134.253 102.813 143.107 125.625 cv
147.893 137.952 147.384 151.09 147.834 164.112 cv
160.221 154.171 159.541 126.109 154.388 113.682 cv
147.607 97.3369 132.99 87.1807 116.506 80.8604 cv
cp
.75 0 .36 0 cmyk
f
29.7813 140.885 mo
19.1133 133.02 26.8496 121.15 35.9971 122.277 cv
33.2598 128.154 31.4883 134.558 29.7813 140.885 cv
cp
0 .33 .46 0 cmyk
f
80.875 188.762 mo
78.1641 188.762 75.418 187.536 72.8828 185.143 cv
69.5762 181.29 69.2617 174.353 71.0166 170.263 cv
71.1465 169.96 71.498 169.819 71.8018 169.95 cv
72.1055 170.08 72.2461 170.431 72.1152 170.735 cv
70.5352 174.417 70.8174 180.9 73.748 184.319 cv
77.9629 188.295 81.6934 187.918 84.0723 186.891 cv
88.3477 185.048 91.6953 179.482 91.6953 174.218 cv
91.6953 174.01 91.8027 173.818 91.9785 173.709 cv
92.1543 173.601 92.375 173.59 92.5605 173.683 cv
93.2324 174.02 93.958 174.355 94.7197 174.709 cv
96.3525 175.465 98.2031 176.323 100.041 177.426 cv
100.324 177.596 100.416 177.963 100.246 178.246 cv
100.076 178.529 99.708 178.62 99.4258 178.451 cv
97.6426 177.381 95.8223 176.538 94.2168 175.794 cv
93.75 175.577 93.2959 175.367 92.8594 175.159 cv
92.5 180.647 89.0469 186.049 84.5469 187.989 cv
83.3457 188.506 82.1133 188.762 80.875 188.762 cv
cp
.5 .7 .8 .58 cmyk
f
42.7061 158.538 mo
43.0566 159.126 43.5703 159.677 44.2041 160.181 cv
48.291 163.429 61.5781 166.194 55.9219 157.854 cv
53.0049 153.551 37.6563 150.099 42.7061 158.538 cv
cp
0 .48 .5 0 cmyk
f
122.548 178.384 mo
121.92 178.796 121.148 179.097 120.281 179.294 cv
114.686 180.563 100.216 176.968 109.788 171.405 cv
114.729 168.536 131.568 172.435 122.548 178.384 cv
cp
f
67.5879 143.347 mo
67.2422 143.24 66.8984 143.141 66.5508 143.041 cv
66.0508 144.625 65.1318 145.919 63.8574 146.756 cv
62.0801 147.929 59.7783 148.058 57.3867 147.119 cv
53.4023 145.561 53.4316 143.378 53.8613 140.168 cv
53.5059 140.09 53.1563 139.999 52.8066 139.901 cv
52.3457 143.302 52.2129 146.225 57.0098 148.106 cv
58.1182 148.539 59.2129 148.769 60.2578 148.801 cv
61.7979 148.843 63.2373 148.459 64.4746 147.645 cv
65.958 146.669 67.0195 145.167 67.5879 143.347 cv
cp
0 0 0 1 cmyk
f
53.3818 143.244 mo
52.752 143.575 52.2773 143.914 51.6943 144.328 cv
51.1387 144.725 50.5762 145.145 49.9473 145.505 cv
49.7676 145.609 49.5322 145.545 49.4209 145.364 cv
49.3203 145.196 49.3672 144.98 49.5254 144.869 cv
50.0518 144.483 50.5488 144.028 51.0625 143.572 cv
51.5508 143.128 52.1533 142.614 52.7129 142.243 cv
52.7393 142.225 li
53.0137 142.044 53.3867 142.118 53.5771 142.392 cv
53.7695 142.665 53.7041 143.032 53.4307 143.212 cv
53.416 143.225 53.3975 143.236 53.3818 143.244 cv
cp
f
56.7178 147.774 mo
56.6533 148.027 56.5723 148.311 56.4707 148.612 cv
56.166 149.417 li
55.958 149.933 55.752 150.425 55.5918 150.93 cv
55.5918 150.93 li
55.5918 150.942 li
55.5518 151.145 55.3496 151.274 55.1445 151.228 cv
54.9404 151.188 54.8047 150.992 54.8369 150.793 cv
54.916 150.325 li
54.9463 150.119 55.1416 149.983 55.3496 150.019 cv
55.5615 150.06 55.7012 150.254 55.6689 150.459 cv
55.668 150.461 li
55.5938 150.926 li
54.8359 150.791 li
54.8662 150.211 54.9414 149.641 55.0059 149.096 cv
55.0898 148.3 li
55.1045 148.064 55.1084 147.803 55.1104 147.52 cv
55.1094 147.07 55.4717 146.717 55.9219 146.727 cv
56.377 146.739 56.7441 147.11 56.748 147.554 cv
56.749 147.623 56.7402 147.69 56.7246 147.752 cv
56.7178 147.774 li
cp
f
62.2275 148.461 mo
62.2461 148.574 62.2813 148.762 62.3008 148.98 cv
62.3047 149.15 62.2979 149.31 62.2891 149.463 cv
62.2676 149.771 62.2227 150.055 62.1768 150.33 cv
62.0488 151.125 li
62.0059 151.367 62.0176 151.64 62.0273 151.701 cv
62.0498 151.905 li
62.0762 152.096 61.9395 152.265 61.7383 152.285 cv
61.6016 152.296 61.4697 152.229 61.4023 152.122 cv
61.125 151.691 61.1426 151.39 61.0986 151.09 cv
61.0469 150.241 li
61.0273 149.969 61.0049 149.711 60.9707 149.466 cv
60.9531 149.346 60.9258 149.236 60.8965 149.13 cv
60.7813 148.842 li
60.624 148.457 60.8086 148.027 61.1992 147.882 cv
61.584 147.737 62.0254 147.931 62.1816 148.317 cv
62.2031 148.361 62.2168 148.417 62.2275 148.461 cv
cp
f
66.1875 145.684 mo
66.4102 145.866 li
66.5176 145.958 66.6367 146.065 66.7393 146.172 cv
66.9063 146.364 67.0469 146.553 67.168 146.745 cv
67.3926 147.115 67.5469 147.458 67.7168 147.752 cv
67.8809 148.039 68.1113 148.355 68.3223 148.673 cv
68.6504 149.155 li
68.8164 149.419 li
68.9004 149.571 li
68.9541 149.691 li
68.9727 149.73 68.9932 149.815 68.9922 149.875 cv
68.9893 149.91 69.0078 149.921 68.9434 150.063 cv
68.877 150.194 68.7061 150.267 68.6191 150.267 cv
68.4102 150.277 68.2246 150.12 68.209 149.91 cv
68.1914 149.702 68.3477 149.526 68.5605 149.516 cv
68.4785 149.505 68.3203 149.569 68.2656 149.69 cv
68.209 149.827 68.2305 149.831 68.2207 149.851 cv
68.2129 149.891 68.2314 149.953 68.2363 149.97 cv
68.2256 149.967 li
68.1484 149.884 li
67.959 149.695 li
67.5527 149.308 li
67.2754 149.044 66.9941 148.794 66.6973 148.474 cv
66.4102 148.163 66.1758 147.854 65.9473 147.624 cv
65.8359 147.511 65.7197 147.415 65.6172 147.339 cv
65.2451 147.15 li
65.2373 147.147 li
64.7891 146.922 64.6074 146.385 64.8223 145.954 cv
65.043 145.523 65.582 145.354 66.0254 145.583 cv
66.083 145.608 66.1396 145.649 66.1875 145.684 cv
cp
f
106.532 152.791 mo
106.885 152.864 107.236 152.941 107.586 153.022 cv
107.309 154.663 107.531 156.255 108.275 157.614 cv
109.312 159.511 111.286 160.743 113.821 161.081 cv
118.049 161.642 119.016 159.7 120.092 156.657 cv
120.441 156.763 120.791 156.851 121.143 156.935 cv
120.008 160.159 118.797 162.806 113.707 162.134 cv
112.531 161.976 111.462 161.649 110.523 161.167 cv
109.145 160.456 108.048 159.417 107.328 158.099 cv
106.463 156.513 106.205 154.671 106.532 152.791 cv
cp
f
119.117 159.606 mo
119.521 160.204 119.789 160.733 120.115 161.382 cv
120.422 162.003 120.73 162.646 121.121 163.271 cv
121.23 163.45 121.471 163.509 121.648 163.401 cv
121.816 163.304 121.873 163.089 121.785 162.913 cv
121.494 162.317 121.264 161.677 121.014 161.021 cv
120.786 160.394 120.487 159.646 120.162 159.048 cv
120.147 159.017 li
119.99 158.724 119.625 158.61 119.331 158.757 cv
119.037 158.905 118.928 159.259 119.088 159.552 cv
119.097 159.571 119.106 159.591 119.117 159.606 cv
cp
f
114.115 161.978 mo
114.059 162.237 114.001 162.526 113.953 162.841 cv
113.854 163.698 li
113.804 164.257 113.764 164.79 113.675 165.317 cv
113.675 165.317 li
113.67 165.325 li
113.611 165.524 113.732 165.733 113.932 165.796 cv
114.133 165.858 114.34 165.753 114.402 165.56 cv
114.547 165.106 li
114.613 164.913 114.501 164.696 114.303 164.628 cv
114.098 164.562 113.884 164.667 113.822 164.86 cv
113.821 164.864 li
113.674 165.31 li
114.404 165.558 li
114.642 165.034 114.834 164.493 115.023 163.979 cv
115.313 163.237 li
115.411 163.022 115.523 162.79 115.648 162.54 cv
115.855 162.142 115.694 161.655 115.295 161.444 cv
114.887 161.235 114.394 161.382 114.189 161.772 cv
114.156 161.833 114.135 161.896 114.118 161.958 cv
114.115 161.978 li
cp
f
108.938 159.913 mo
108.872 159.999 108.756 160.151 108.642 160.333 cv
108.559 160.479 108.491 160.624 108.428 160.765 cv
108.311 161.044 108.219 161.321 108.133 161.583 cv
107.887 162.347 li
107.813 162.581 107.681 162.817 107.645 162.868 cv
107.534 163.032 li
107.422 163.192 107.467 163.407 107.634 163.521 cv
107.75 163.599 107.896 163.603 108.006 163.54 cv
108.446 163.298 108.565 163.021 108.742 162.78 cv
109.174 162.056 li
109.312 161.825 109.449 161.604 109.592 161.407 cv
109.662 161.31 109.736 161.224 109.811 161.147 cv
110.043 160.95 li
110.357 160.683 110.389 160.216 110.111 159.901 cv
109.837 159.581 109.36 159.54 109.046 159.806 cv
109.008 159.833 108.969 159.876 108.938 159.913 cv
cp
f
106.705 155.536 mo
106.429 155.585 li
106.291 155.614 106.137 155.651 105.998 155.696 cv
105.762 155.784 105.553 155.884 105.361 155.993 cv
104.992 156.21 104.701 156.438 104.417 156.616 cv
104.141 156.786 103.793 156.956 103.463 157.134 cv
102.955 157.401 li
102.689 157.552 li
102.547 157.646 li
102.443 157.724 li
102.408 157.749 102.354 157.815 102.324 157.872 cv
102.313 157.899 102.291 157.901 102.283 158.06 cv
102.281 158.204 102.399 158.353 102.479 158.396 cv
102.656 158.505 102.893 158.456 103 158.28 cv
103.111 158.104 103.054 157.874 102.871 157.761 cv
102.945 157.792 103.059 157.927 103.051 158.06 cv
103.039 158.21 103.019 158.202 103.02 158.224 cv
103.006 158.261 102.964 158.306 102.949 158.319 cv
102.961 158.321 li
103.065 158.284 li
103.318 158.212 li
103.854 158.069 li
104.219 157.97 104.581 157.886 104.989 157.751 cv
105.384 157.614 105.73 157.454 106.037 157.362 cv
106.189 157.317 106.334 157.286 106.455 157.274 cv
106.871 157.288 li
106.881 157.286 li
107.377 157.304 107.783 156.923 107.788 156.437 cv
107.79 155.948 107.391 155.536 106.895 155.521 cv
106.832 155.519 106.764 155.524 106.705 155.536 cv
cp
f
255.522 157.162 mo
235.775 143.88 216.517 129.066 210.465 104.818 cv
204.785 82.0654 211.121 56.7192 225.031 38.1143 cv
238.986 19.4468 260.53 8.73291 283.563 6.75879 cv
308.542 4.61719 335.994 12.0908 353.734 30.4883 cv
372.732 50.1904 373.525 76.8242 370.586 102.494 cv
370.207 105.793 369.771 109.085 369.333 112.378 cv
371.19 110.906 373.25 110.302 374.992 108.46 cv
370.104 129.727 359.009 144.425 338.588 153.024 cv
321.912 160.044 302.453 162.889 284.424 162.077 cv
275.166 161.66 266.187 159.805 257.252 157.426 cv
255.522 157.162 li
cp
.4 .78 .9 .35 cmyk
f
281.926 232.113 mo
281.864 240.713 274.891 265.648 279.382 272.167 cv
289.466 286.375 296.628 245.46 295.237 238.776 cv
294.234 229.616 289.517 228.639 282.345 230.247 cv
281.926 232.113 li
cp
0 .24 .43 0 cmyk
f
309.363 230.775 mo
313.225 238.462 318.334 263.864 325.331 267.601 cv
340.837 275.616 328.622 235.901 324.33 230.589 cv
319.259 222.897 314.586 224.193 308.889 228.921 cv
309.363 230.775 li
cp
f
275.64 242.555 mo
275.264 242.496 274.887 242.435 274.512 242.375 cv
277.1 231.497 279.822 219.864 280.123 214.446 cv
280.35 213.086 280.812 210.043 280.954 208.556 cv
285.496 206 291.682 206.269 296.717 206.272 cv
305.701 206.282 315.303 205.82 324.147 206.803 cv
327.831 216.227 330.291 220.272 333.609 229.733 cv
334.828 233.204 336.268 236.571 337.745 241.88 cv
330.472 244.564 324.581 247.753 309.407 245.707 cv
307.824 238.454 306.393 233.186 303.615 227.279 cv
302.419 232.314 302.597 232.663 301.717 237.769 cv
301.353 239.88 300.892 242.633 300.385 245.627 cv
300.385 245.627 286.55 247.217 275.64 242.555 cv
cp
.85 .5 0 0 cmyk
f
272.484 164.147 mo
266.193 164.304 252.382 160.11 247.401 164.887 cv
239.558 172.406 251.065 174.581 256.477 174.573 cv
260.988 174.567 267.727 180.505 272.272 180.839 cv
272.484 164.147 li
cp
0 .27871 .499355 0 cmyk
f
292.593 158.586 mo
291.758 159.416 283.973 160.703 281.456 161.165 cv
276.975 161.992 274.205 162.279 269.669 163.143 cv
269.628 166.626 266.313 176.913 265.742 180.316 cv
270.303 183.736 283.621 188.12 287.311 185.03 cv
289.411 183.275 291.318 161.489 290.897 159.044 cv
292.593 158.586 li
cp
.52 .21 0 0 cmyk
f
327.275 169.371 mo
333.588 174.381 349.171 183.935 348.173 193.651 cv
346.496 210.02 331.263 190.03 326.978 185.552 cv
322.623 181.004 320.654 182.419 315.555 178.973 cv
327.275 169.371 li
cp
0 .24 .43 0 cmyk
f
316.992 161.446 mo
327.477 161.336 333.706 166.767 341.808 172.174 cv
339.308 177.756 337.256 185.679 331.641 188.6 cv
329.812 189.552 331.295 189.22 328.416 190.193 cv
324.521 191.514 319.601 185.087 316.547 183.402 cv
313.589 181.77 310.36 180.946 308.075 178.384 cv
311.614 173.517 316.306 173.5 315.629 167.575 cv
316.992 161.446 li
cp
.52 .21 0 0 cmyk
f
324.918 201.787 mo
326.753 207.001 323.954 206.736 326.162 211.793 cv
308.71 215.832 301.055 214.134 282.931 213.049 cv
278.088 212.758 286.396 213.627 281.704 212.676 cv
288.36 193.978 275.524 177.191 291.963 162.626 cv
303.029 152.822 316.708 155.849 322.781 168.436 cv
328.157 179.581 320.885 190.331 324.918 201.787 cv
cp
f
281.582 217.132 mo
283.309 217.28 286.446 217.075 288.225 216.794 cv
288.875 212.114 288.951 207.085 289.271 202.292 cv
290.454 184.452 293.506 175.623 296.964 158.771 cv
296.996 158.611 290.796 159.8 287.298 160.23 cv
287.298 160.23 277.964 205.326 281.582 217.132 cv
cp
.85 .5 0 0 cmyk
f
325.229 181.125 mo
325.311 174.179 326.227 166.966 323.1 162.327 cv
320.623 162.006 317.943 160.774 315.629 159.899 cv
316.523 163.167 317.087 169.402 317.325 173.137 cv
318.457 190.867 316.849 199.622 318.48 217.243 cv
326.659 217.779 326.2 211.94 326.103 206.068 cv
325.908 194.382 325.092 192.868 325.229 181.125 cv
cp
f
355.158 88.8262 mo
354.164 94.0288 353.888 99.2856 354.109 105.734 cv
365.234 102.054 365.789 117.274 355.272 116.998 cv
356.44 130.5 347.536 142.718 336.247 148.655 cv
330.869 151.484 322.955 152.095 318.21 155.731 cv
313.156 159.603 313.762 164.596 311.876 169.087 cv
307.479 179.578 303.722 164.873 297.237 160.788 cv
292.831 158.012 285.016 161.589 280.263 161.928 cv
274.014 162.377 267.501 161.718 261.407 160.237 cv
248.765 157.163 244.798 144.69 237.66 134.708 cv
226.965 139.477 224.93 123.916 233.978 124.108 cv
233.617 119.107 232.079 114.725 232.498 109.346 cv
238.275 107.266 244.706 106.651 250.7 105.296 cv
271.548 100.582 304.539 92.0786 314.313 69.9536 cv
314.313 69.9536 320.176 90.5415 355.158 88.8262 cv
cp
0 .24 .43 0 cmyk
f
303.792 147.083 mo
302.504 147.083 301.226 146.817 299.979 146.28 cv
295.293 144.26 291.697 138.634 291.322 132.92 cv
290.869 133.135 290.398 133.354 289.914 133.578 cv
288.24 134.354 286.342 135.233 284.483 136.348 cv
284.189 136.526 283.806 136.43 283.629 136.135 cv
283.452 135.84 283.547 135.458 283.842 135.281 cv
285.758 134.131 287.688 133.237 289.39 132.448 cv
290.182 132.082 290.936 131.732 291.633 131.383 cv
291.826 131.287 292.055 131.297 292.239 131.41 cv
292.423 131.524 292.535 131.724 292.535 131.94 cv
292.535 137.421 296.021 143.218 300.472 145.136 cv
302.951 146.205 306.834 146.598 311.267 142.41 cv
314.273 138.899 314.568 132.147 312.924 128.312 cv
312.789 127.996 312.935 127.629 313.251 127.494 cv
313.568 127.359 313.934 127.505 314.069 127.821 cv
315.895 132.081 315.566 139.305 312.167 143.268 cv
309.495 145.796 306.622 147.083 303.792 147.083 cv
cp
.5 .7 .8 .58 cmyk
f
275.35 117.268 mo
276.401 121.575 275.085 125.594 272.412 126.245 cv
269.739 126.897 266.721 123.934 265.672 119.628 cv
264.623 115.32 265.938 111.303 268.611 110.651 cv
271.285 110 274.301 112.964 275.35 117.268 cv
cp
f
320.896 113.391 mo
320.658 113.391 320.44 113.255 320.336 113.041 cv
320.228 112.817 320.262 112.551 320.423 112.363 cv
321.872 110.674 324.277 108.664 326.604 106.72 cv
328.393 105.225 330.082 103.813 331.318 102.577 cv
331.562 102.334 331.956 102.334 332.199 102.577 cv
332.442 102.82 332.442 103.215 332.199 103.458 cv
330.923 104.733 329.213 106.163 327.402 107.675 cv
325.609 109.174 323.768 110.712 322.391 112.083 cv
325.852 111.939 li
328.375 111.938 329.705 111.755 331.546 111.5 cv
332.41 111.381 333.372 111.248 334.597 111.116 cv
334.937 111.078 335.246 111.325 335.283 111.668 cv
335.32 112.01 335.073 112.317 334.731 112.354 cv
333.521 112.485 332.57 112.616 331.716 112.734 cv
329.897 112.985 328.46 113.184 325.878 113.184 cv
320.922 113.391 li
320.913 113.391 320.904 113.391 320.896 113.391 cv
cp
.5 .7 .8 .7 cmyk
f
340.306 124.479 mo
339.949 125.063 339.431 125.611 338.793 126.108 cv
334.68 129.323 321.369 131.971 327.096 123.681 cv
330.051 119.403 345.429 116.085 340.306 124.479 cv
cp
0 .48 .5 0 cmyk
f
263.435 139.094 mo
264.058 139.513 264.827 139.82 265.692 140.025 cv
271.277 141.343 285.777 137.871 276.253 132.227 cv
271.338 129.315 254.466 133.067 263.435 139.094 cv
cp
f
726.302 545.125 mo
725.929 545.078 725.556 545.025 725.183 544.976 cv
727.343 533.546 724.656 501.066 724.755 495.406 cv
724.931 493.98 725.277 490.794 725.365 489.236 cv
729.755 486.416 733.605 486.986 738.578 486.816 cv
747.449 486.517 756.914 485.707 765.685 486.427 cv
769.949 486.777 766.166 507.302 765.974 509.851 cv
765.32 518.615 769.767 526.267 770.388 534.83 cv
770.441 535.58 771.505 544.675 771.421 544.712 cv
764.337 547.759 766.562 547.259 751.501 545.648 cv
749.675 538.138 749.109 514.542 746.152 508.478 cv
745.152 513.769 744.306 532.281 743.623 537.636 cv
743.337 539.849 742.984 542.736 742.591 545.873 cv
742.591 545.873 737.248 549.609 726.302 545.125 cv
cp
0 0 0 .699997 cmyk
f
770.199 449.066 mo
777.544 454.585 795.552 464.966 794.826 476.166 cv
793.605 495.035 775.564 472.648 770.535 467.669 cv
765.423 462.607 763.255 464.308 757.349 460.542 cv
770.199 449.066 li
cp
0 .24 .43 0 cmyk
f
720.072 448.572 mo
712.73 454.089 694.722 464.472 695.449 475.671 cv
696.667 494.539 714.71 472.154 719.738 467.171 cv
724.851 462.113 727.017 463.814 732.921 460.046 cv
720.072 448.572 li
cp
f
754.66 438.064 mo
765.011 437.587 771.357 443.035 779.556 448.394 cv
777.291 454.298 775.552 462.63 770.113 465.869 cv
768.341 466.925 769.791 466.527 766.984 467.642 cv
763.187 469.154 758.093 462.621 755.017 460.968 cv
752.039 459.369 748.818 458.623 746.468 456.029 cv
749.787 450.832 754.421 450.654 753.537 444.501 cv
754.66 438.064 li
cp
.75 0 .36 0 cmyk
f
734.705 439.382 mo
724.353 438.908 718.007 444.355 709.808 449.716 cv
712.076 455.621 713.812 463.951 719.251 467.191 cv
721.025 468.246 719.572 467.847 722.378 468.962 cv
726.177 470.472 731.269 463.941 734.347 462.291 cv
737.326 460.689 740.544 459.943 742.896 457.349 cv
739.578 452.154 734.945 451.974 735.826 445.82 cv
734.705 439.382 li
cp
f
767.884 481.212 mo
768.345 484.619 768.921 488.013 769.527 491.4 cv
769.974 493.9 749.337 495.214 747.607 495.242 cv
740.128 495.367 730.695 494.566 723.226 494.355 cv
718.433 494.218 726.671 494.839 722.001 494.007 cv
727.894 474.287 716.593 457.226 732.3 441.476 cv
742.873 430.875 756.49 433.556 762.943 446.474 cv
765.802 452.199 765.318 458.478 765.015 464.66 cv
764.744 470.216 767.15 475.73 767.884 481.212 cv
cp
f
692.101 429.38 mo
673.464 414.322 655.458 397.774 651.523 372.926 cv
647.826 349.609 656.41 324.749 671.992 307.315 cv
687.63 289.822 710.177 280.974 733.451 281.018 cv
758.685 281.067 785.558 290.978 801.73 310.985 cv
819.048 332.415 817.501 359.193 812.298 384.674 cv
811.626 387.951 810.9 391.215 810.171 394.479 cv
812.164 393.164 814.283 392.739 816.189 391.047 cv
809.419 411.941 797 425.707 775.763 432.535 cv
758.425 438.107 738.662 439.25 720.652 436.849 cv
711.404 435.617 702.564 432.966 693.812 429.796 cv
692.101 429.38 li
cp
.4 .78 .9 .35 cmyk
f
798.025 369.612 mo
796.572 374.743 795.832 379.989 795.484 386.478 cv
806.968 383.764 806.187 399.076 795.662 397.874 cv
795.648 411.517 785.644 422.986 773.802 427.949 cv
768.156 430.312 760.169 430.228 755.089 433.457 cv
749.681 436.894 749.851 441.955 747.566 446.292 cv
742.232 456.427 739.759 441.349 733.617 436.683 cv
729.439 433.513 721.287 436.414 716.492 436.335 cv
710.187 436.234 703.714 435.001 697.732 432.98 cv
685.328 428.785 682.445 415.928 676.164 405.291 cv
665.021 409.133 664.347 393.348 673.404 394.337 cv
673.482 389.291 672.324 384.761 673.218 379.403 cv
679.193 377.825 685.697 377.776 691.828 376.942 cv
713.148 374.049 746.978 368.422 758.726 347.096 cv
758.726 347.096 762.796 368.256 798.025 369.612 cv
cp
0 .24 .43 0 cmyk
f
742.22 423.552 mo
740.64 423.552 739.099 423.162 737.642 422.375 cv
733.121 419.939 730.009 413.98 730.136 408.216 cv
729.667 408.39 729.183 408.565 728.683 408.746 cv
726.931 409.378 724.945 410.095 722.974 411.054 cv
722.667 411.204 722.289 411.077 722.136 410.765 cv
721.986 410.454 722.115 410.079 722.425 409.927 cv
724.457 408.938 726.476 408.209 728.257 407.566 cv
729.078 407.271 729.857 406.989 730.583 406.703 cv
730.787 406.624 731.013 406.653 731.189 406.783 cv
731.363 406.913 731.457 407.124 731.437 407.34 cv
730.957 412.838 733.943 418.958 738.236 421.272 cv
740.626 422.561 744.488 423.294 749.3 419.487 cv
752.623 416.231 753.513 409.486 752.203 405.496 cv
752.095 405.167 752.273 404.813 752.603 404.705 cv
752.933 404.6 753.285 404.777 753.394 405.104 cv
754.849 409.537 753.884 416.751 750.128 420.426 cv
747.505 422.503 744.808 423.552 742.22 423.552 cv
cp
.5 .7 .8 .58 cmyk
f
769.71 391.614 mo
768.8 391.614 767.798 391.575 766.523 391.463 cv
761.533 391.235 li
761.283 391.224 761.064 391.065 760.974 390.832 cv
760.886 390.599 760.945 390.335 761.123 390.161 cv
762.722 388.597 765.308 386.795 767.808 385.054 cv
769.736 383.709 771.558 382.439 772.91 381.306 cv
773.175 381.084 773.57 381.117 773.792 381.383 cv
774.015 381.648 773.98 382.044 773.716 382.266 cv
772.322 383.436 770.476 384.721 768.525 386.082 cv
766.599 387.424 764.621 388.802 763.121 390.053 cv
766.605 390.212 li
769.142 390.434 770.496 390.367 772.369 390.273 cv
773.242 390.229 774.214 390.181 775.447 390.156 cv
775.802 390.125 776.08 390.424 776.087 390.769 cv
776.093 391.115 775.82 391.402 775.472 391.409 cv
774.253 391.434 773.294 391.482 772.431 391.525 cv
771.49 391.572 770.65 391.614 769.71 391.614 cv
cp
.5 .7 .8 .7 cmyk
f
779.998 404.061 mo
779.587 404.615 779.019 405.117 778.337 405.561 cv
773.929 408.422 760.347 409.908 766.82 402.097 cv
770.158 398.068 785.873 396.093 779.998 404.061 cv
cp
0 .48 .5 0 cmyk
f
701.623 411.956 mo
702.214 412.431 702.958 412.805 703.808 413.088 cv
709.292 414.901 724.138 412.694 715.085 406.197 cv
710.412 402.846 693.16 405.124 701.623 411.956 cv
cp
f
707.117 394.535 mo
706.822 394.535 706.56 394.325 706.501 394.025 cv
706.437 393.685 706.662 393.356 707.001 393.292 cv
708.21 393.062 709.171 392.909 710.033 392.771 cv
711.886 392.474 713.226 392.26 715.638 391.524 cv
719.039 390.64 li
717.31 389.724 715.083 388.783 712.916 387.866 cv
710.73 386.941 708.666 386.067 707.062 385.214 cv
706.757 385.052 706.642 384.672 706.804 384.367 cv
706.966 384.062 707.345 383.944 707.652 384.108 cv
709.205 384.935 711.244 385.797 713.404 386.711 cv
716.216 387.901 719.125 389.131 721.015 390.333 cv
721.226 390.466 721.337 390.712 721.298 390.959 cv
721.259 391.205 721.078 391.405 720.835 391.468 cv
715.978 392.73 li
713.509 393.484 712.062 393.715 710.232 394.008 cv
709.378 394.145 708.431 394.296 707.236 394.523 cv
707.195 394.531 707.156 394.535 707.117 394.535 cv
cp
.5 .7 .8 .7 cmyk
f
782.423 540.828 mo
776.652 534.587 765.931 535.853 758.242 537.974 cv
750.349 540.148 747.687 549.281 756.074 552.611 cv
762.181 555.037 771.07 553.316 776.992 551.291 cv
782.113 549.539 786.689 545.443 782.423 540.828 cv
cp
.75 0 .36 0 cmyk
f
716.259 552.082 mo
722.179 554.068 731.07 555.757 737.177 553.378 cv
745.562 550.109 742.9 541.148 735.009 539.013 cv
727.32 536.935 716.597 535.693 710.828 541.816 cv
706.56 546.341 711.136 550.361 716.259 552.082 cv
cp
f
747.072 456.921 mo
748.078 457.914 748.046 460.068 747.31 461.203 cv
746.472 462.492 744.814 463.13 743.398 462.47 cv
739.5 460.65 744.64 454.515 747.072 456.921 cv
cp
0 0 0 0 cmyk
f
747.509 470.455 mo
748.441 471.517 748.257 473.664 747.443 474.742 cv
746.513 475.97 744.816 476.49 743.453 475.73 cv
739.689 473.64 745.251 467.884 747.509 470.455 cv
cp
f
571.466 729.793 mo
574.203 728.57 576.805 727.097 579.213 725.33 cv
596.137 712.893 611.621 697.683 616.584 676.558 cv
622.124 652.989 615.616 626.647 601.571 607.25 cv
587.48 587.791 565.842 576.535 542.77 574.337 cv
517.75 571.953 490.316 579.531 472.675 598.505 cv
453.784 618.826 453.162 646.457 456.27 673.11 cv
456.671 676.539 457.128 679.955 457.587 683.375 cv
455.719 681.836 453.654 681.194 451.897 679.274 cv
456.93 701.372 468.131 716.694 488.63 725.748 cv
505.371 733.14 524.87 736.219 542.913 735.492 cv
552.377 735.113 562.613 733.756 571.466 729.793 cv
cp
.45 .86 .75 0 cmyk
f
502.026 796.74 mo
503.424 803.928 500.8 826.254 506.324 830.709 cv
518.653 840.355 518.752 804.659 516.25 799.388 cv
513.708 791.965 508.904 792.182 502.123 795.091 cv
502.026 796.74 li
cp
0 .24 .43 0 cmyk
f
522.311 797.624 mo
524.152 804.712 522.918 827.158 528.708 831.262 cv
541.612 840.124 539.496 804.491 536.673 799.384 cv
533.675 792.134 528.894 792.649 522.306 795.973 cv
522.311 797.624 li
cp
f
518.292 808.402 mo
518.704 802.5 519.159 796.106 519.659 793.46 cv
520.906 796.017 521.67 802.112 522.306 808.499 cv
528.033 808.631 532.817 809.267 539.458 808.65 cv
539.228 801.802 543.583 774.558 536.889 774.007 cv
529.153 773.373 520.803 774.088 512.978 774.352 cv
508.592 774.501 505.196 773.999 501.321 776.487 cv
501.246 777.86 500.94 780.671 500.786 781.929 cv
500.732 784.99 501.602 796.941 501.844 808.056 cv
507.324 808.116 512.808 808.263 518.292 808.402 cv
cp
.52 .21 0 0 cmyk
f
542.36 749.268 mo
548.153 754.934 565.174 766.905 560.8 775.786 cv
554.639 788.296 544.354 770.508 540.526 765.578 cv
536.632 760.566 534.544 761.806 529.809 757.836 cv
542.36 749.268 li
cp
0 .24 .43 0 cmyk
f
525.264 727.57 mo
531.715 728.115 537.908 736.552 541.792 740.918 cv
546.576 746.295 551.166 751.834 555.954 757.211 cv
558.767 760.36 561.426 761.493 559.132 765.849 cv
556.991 769.913 554.952 775.01 550.4 776.97 cv
548.73 777.691 550.043 777.509 547.462 778.164 cv
543.967 779.051 525.461 749.442 522.959 747.646 cv
520.538 745.905 517.807 744.884 516.047 742.349 cv
519.542 738.182 523.616 738.555 523.547 733.073 cv
525.264 727.57 li
cp
.85 .5 0 0 cmyk
f
495.701 742.888 mo
489.473 748.294 473.9 762.397 473.014 769.47 cv
470.816 787.034 492.043 765.201 496.254 760.37 cv
500.532 755.458 502.521 756.991 507.559 753.272 cv
495.701 742.888 li
cp
0 .24 .43 0 cmyk
f
514.011 727.062 mo
507.067 727.034 499.543 735.819 495.053 740.16 cv
490.184 744.868 485.113 749.393 480.311 754.166 cv
477.016 757.441 475.289 758.447 477.3 763.074 cv
479.045 767.085 480.463 771.81 484.623 774.057 cv
486.223 774.921 484.93 774.625 487.444 775.503 cv
490.848 776.695 511.889 748.832 514.54 747.263 cv
517.106 745.742 519.917 744.966 521.891 742.594 cv
518.777 738.136 514.686 738.15 515.237 732.694 cv
514.011 727.062 li
cp
.85 .5 0 0 cmyk
f
538.83 769.408 mo
539.235 772.414 539.743 775.409 540.279 778.396 cv
540.672 780.6 522.469 781.76 520.941 781.786 cv
515.307 781.878 509.673 781.463 504.05 781.189 cv
502.206 781.099 499.288 780.906 499.66 781.024 cv
499.25 780.863 498.786 780.793 498.397 780.622 cv
499.135 777.342 499.809 774.058 499.992 770.696 cv
500.163 767.547 499.946 764.399 499.804 761.253 cv
499.542 755.466 499.2 749.097 501.315 743.59 cv
502.598 740.25 504.916 736.889 507.441 734.358 cv
516.765 725.006 528.777 727.374 534.469 738.767 cv
536.992 743.817 536.564 749.355 536.297 754.809 cv
536.059 759.709 538.181 764.574 538.83 769.408 cv
cp
f
515.684 734.781 mo
515.05 759.792 li
518.533 764.857 li
522.332 761.375 li
523.915 735.415 li
515.684 734.781 li
cp
0 0 0 0 cmyk
f
524.128 726.069 mo
524.069 726.056 524.014 726.056 523.956 726.048 cv
523.323 725.332 522.147 725.062 521.302 726.014 cv
519.192 728.392 518.062 731.038 516.592 733.707 cv
516.191 734.435 516.282 735.074 516.854 735.664 cv
519.31 738.191 519.179 741.944 522.079 744.247 cv
522.869 744.873 524.561 744.855 525.075 743.816 cv
526.282 741.367 528.098 739.102 529.82 736.88 cv
530.923 735.455 532.864 733.245 532.734 731.444 cv
532.493 728.101 527.35 726.738 524.128 726.069 cv
cp
.52 .21 0 0 cmyk
f
505.915 734.032 mo
505.894 735.834 507.738 737.878 508.795 739.207 cv
510.446 741.277 512.181 743.383 513.386 745.723 cv
513.897 746.715 515.406 746.596 516.075 745.908 cv
518.532 743.377 518.217 739.649 520.268 736.932 cv
520.745 736.299 520.792 735.655 520.396 734.962 cv
518.947 732.426 517.801 729.885 515.796 727.689 cv
514.995 726.812 513.963 727.176 513.439 727.941 cv
513.387 727.952 513.756 724.958 513.703 724.975 cv
510.873 725.904 505.953 730.683 505.915 734.032 cv
cp
f
471.155 656.283 mo
472.148 661.486 472.424 666.744 472.205 673.191 cv
461.079 669.51 460.524 684.731 471.042 684.455 cv
469.872 697.957 478.776 710.175 490.066 716.111 cv
495.444 718.941 503.357 719.55 508.102 723.188 cv
513.157 727.06 512.55 732.054 514.435 736.544 cv
518.833 747.035 522.59 732.331 529.076 728.246 cv
533.481 725.468 541.297 729.046 546.049 729.386 cv
552.297 729.835 558.811 729.177 564.906 727.694 cv
577.546 724.62 581.515 712.147 588.653 702.166 cv
599.347 706.933 601.382 691.372 592.335 691.566 cv
592.695 686.564 594.233 682.183 593.815 676.803 cv
588.037 674.721 581.608 674.108 575.613 672.753 cv
554.764 668.039 521.775 659.535 512 637.41 cv
512 637.41 506.136 657.999 471.155 656.283 cv
cp
0 .24 .43 0 cmyk
f
550.962 684.724 mo
549.911 689.032 551.227 693.052 553.901 693.703 cv
556.574 694.353 559.592 691.391 560.639 687.085 cv
561.69 682.778 560.375 678.76 557.702 678.109 cv
555.029 677.456 552.012 680.42 550.962 684.724 cv
cp
.5 .7 .8 .58 cmyk
f
497.938 677.15 mo
496.887 681.458 498.204 685.478 500.876 686.128 cv
503.549 686.779 506.568 683.817 507.615 679.511 cv
508.666 675.204 507.35 671.186 504.677 670.535 cv
502.004 669.881 498.989 672.846 497.938 677.15 cv
cp
f
531.128 706.938 mo
530.913 710.604 527.485 713.384 523.469 713.149 cv
519.456 712.914 516.375 709.75 516.589 706.084 cv
516.803 702.419 518.988 704.639 523.002 704.875 cv
527.017 705.111 531.342 703.271 531.128 706.938 cv
cp
0 .48 .5 0 cmyk
f
564.373 705.065 mo
563.826 705.476 563.144 705.797 562.369 706.026 cv
557.363 707.511 544.007 705.1 552.373 699.483 cv
556.688 696.584 572.212 699.128 564.373 705.065 cv
cp
f
489.956 696.429 mo
490.383 697.047 490.985 697.615 491.716 698.124 cv
496.43 701.394 511.195 703.475 504.399 694.734 cv
500.891 690.224 483.818 687.539 489.956 696.429 cv
cp
f
285.494 795.044 mo
283.943 802.4 272.539 822.458 275.981 828.878 cv
283.781 842.925 298.143 809.216 297.886 803.234 cv
298.447 795.201 293.82 793.486 286.245 793.525 cv
285.494 795.044 li
cp
0 .24 .43 0 cmyk
f
337.796 591.46 mo
328.305 587.488 320.069 582.043 309.916 581.599 cv
297.778 580.054 278.429 583.48 267.244 587.232 cv
259.52 589.436 259.077 592.774 252.311 596.378 cv
242.083 601.524 231.951 608.345 226.243 617.738 cv
207.202 649.072 213.819 676.148 216.245 686.597 cv
220.582 703.736 229.04 717.761 242.944 729.388 cv
260.597 744.398 288.183 753.232 310.843 754.56 cv
326.073 755.224 343.581 754.123 356.972 746.402 cv
356.972 746.402 351.896 742.281 349.984 739.484 cv
349.984 739.484 li
363.522 724.478 379.784 713.152 385.449 692.037 cv
393.549 661.877 379.873 625.68 356.995 606.033 cv
351.774 601.398 347.874 597.498 341.917 594.185 cv
337.796 591.46 li
cp
.458352 .938022 .94 0 cmyk
f
343.458 714.099 mo
350.613 710.255 365.668 699.638 374.264 704.437 cv
388.743 712.515 364.168 718.644 358.32 720.826 cv
352.372 723.042 352.896 725.431 347.674 728.775 cv
343.458 714.099 li
cp
0 .24 .43 0 cmyk
f
281.849 735.65 mo
275.05 740.097 258.534 748.25 258.641 758.091 cv
258.818 774.671 275.946 756.017 280.657 751.916 cv
285.446 747.751 287.292 749.355 292.725 746.365 cv
281.849 735.65 li
cp
f
352.211 702.685 mo
352.329 709.683 355.172 718.451 353.671 725.242 cv
351.746 733.939 341.037 737.998 334.713 742.943 cv
330.398 746.318 327.124 750.544 323.946 754.97 cv
323.254 747.875 324.785 741.226 323.547 734.222 cv
322.149 726.318 323.333 718.15 322.953 710.134 cv
327.425 710.943 334.444 708.318 338.924 707.216 cv
341.78 706.511 348.562 704.822 349.1 704.48 cv
352.211 702.685 li
cp
0 0 .34 0 cmyk
f
302.721 719.449 mo
302.711 719.394 302.704 719.339 302.695 719.283 cv
294.607 723.623 286.255 727.552 278.639 732.408 cv
276.247 734.472 272.63 734.271 277.081 739.125 cv
281.108 744.554 285.598 749.589 288.734 755.726 cv
293.404 754.123 297.844 751.583 302.25 748.912 cv
302.425 743.453 303.305 738.031 303.631 732.49 cv
303.898 727.957 303.424 723.894 302.721 719.449 cv
cp
f
325.047 732.437 mo
324.723 739.847 322.783 746.308 315.127 749.15 cv
297.567 755.667 295.081 727.302 302.743 717.38 cv
306.604 712.375 315.412 708.589 321.366 711.847 cv
329.673 716.396 325.358 725.408 325.047 732.437 cv
cp
f
355.433 820.869 mo
351.85 826.193 342.101 831.328 341.666 821.177 cv
341.228 810.914 345.612 811.347 337.951 803.57 cv
328.619 794.091 337.348 784.798 346.44 791.429 cv
355.461 798.009 363.81 808.435 355.433 820.869 cv
cp
0 .24 .43 0 cmyk
f
294.708 720.521 mo
297.387 719.539 301.137 719.05 303.279 719.05 cv
303.813 724.945 308.634 752.453 320.953 738.697 cv
324.701 734.279 322.56 721.503 322.56 716.101 cv
324.701 716.591 330.472 712.894 330.861 714.626 cv
333.272 725.435 334.614 728.535 335.681 735.013 cv
342.108 774.068 364.737 784.384 365.81 787.332 cv
365.81 787.332 li
339.831 814.595 270.608 806.492 267.929 806.492 cv
267.929 806.492 li
271.009 795.068 285.068 771.488 294.708 735.751 cv
296.337 729.714 297.387 719.05 294.708 721.015 cv
294.708 720.521 li
cp
.2 0 1 0 cmyk
f
361.353 783.875 mo
335.647 803.484 282.392 802.792 270.357 799.666 cv
269.834 800.941 269.371 802.134 268.97 803.248 cv
268.94 803.328 268.913 803.408 268.884 803.494 cv
268.731 803.923 268.588 804.345 268.455 804.75 cv
268.416 804.873 268.374 804.996 268.336 805.113 cv
268.187 805.589 268.047 806.052 267.929 806.492 cv
270.608 806.492 339.831 814.595 365.81 787.332 cv
365.529 786.562 363.827 785.587 361.353 783.875 cv
cp
.5 0 .66 0 cmyk
f
247.313 674.376 mo
241.42 673.841 234.992 677.054 232.316 682.41 cv
226.424 695.263 243.563 701.689 249.99 691.513 cv
247.313 674.376 li
cp
0 .33 .46 0 cmyk
f
242.089 670.619 mo
250.924 669.012 262.576 658.173 272.216 654.962 cv
293.104 647.998 315.064 647.46 335.415 640.5 cv
340.772 638.892 346.663 636.751 350.948 635.144 cv
356.838 644.787 358.981 656.568 362.193 667.277 cv
367.551 685.49 363.8 697.806 346.663 707.982 cv
340.772 711.195 334.878 713.875 328.453 716.017 cv
325.774 716.017 318.713 717.701 319.348 720.298 cv
320.756 726.066 320.756 728.746 317.542 730.886 cv
313.793 733.564 307.073 731.376 306.026 725.798 cv
304.42 717.232 284 727.798 273.287 728.333 cv
257.22 728.333 252.399 719.765 245.973 706.376 cv
240.618 694.593 240.082 683.345 236.333 672.099 cv
242.089 670.619 li
cp
0 .24 .43 0 cmyk
f
236.352 634.273 mo
234.338 623.182 217.456 569.938 233.741 567.013 cv
244.677 565.049 267.177 586.884 272.362 594.685 cv
279.654 605.653 269.433 608.316 259.006 614.958 cv
249.384 621.092 240.781 625.345 235.622 636.061 cv
236.352 634.273 li
cp
.2 0 1 0 cmyk
f
244.389 625.017 mo
243.25 618.748 233.703 588.644 242.911 586.992 cv
249.096 585.88 261.816 598.225 264.747 602.636 cv
268.87 608.837 263.09 610.341 257.196 614.099 cv
251.756 617.566 246.891 619.972 243.975 626.027 cv
244.389 625.017 li
cp
.02 0 .578947 0 cmyk
f
345.35 617.021 mo
343.452 605.91 341.139 550.1 324.832 552.916 cv
313.884 554.801 300.282 581.296 298.071 590.399 cv
294.963 603.2 305.393 603.921 317.462 606.607 cv
328.598 609.083 338.137 610.144 346.644 618.454 cv
345.35 617.021 li
cp
.2 0 1 0 cmyk
f
333.022 607.113 mo
332.049 601.402 330.859 572.712 322.479 574.159 cv
316.849 575.13 309.857 588.748 308.72 593.427 cv
307.123 600.007 312.482 600.378 318.687 601.758 cv
324.414 603.033 329.316 603.578 333.689 607.849 cv
333.022 607.113 li
cp
.02 0 .578947 0 cmyk
f
270.848 598.909 mo
295.15 589.59 325.371 588.317 345.513 607.115 cv
356.713 617.568 359.403 631.469 360.491 645.902 cv
359.786 646.205 357.085 646.631 356.121 646.555 cv
346.375 620.691 329.786 604.728 299.713 606.445 cv
274.824 607.866 252.963 621.031 244.04 644.017 cv
239.217 656.441 239.729 669.677 239.276 682.802 cv
226.793 672.787 227.478 644.504 232.674 631.984 cv
239.505 615.509 254.236 605.277 270.848 598.909 cv
cp
.2 0 1 0 cmyk
f
358.24 659.396 mo
368.99 651.47 361.196 639.511 351.977 640.644 cv
354.737 646.569 356.521 653.019 358.24 659.396 cv
cp
0 .33 .46 0 cmyk
f
305.45 704.843 mo
304.571 704.843 303.698 704.662 302.847 704.294 cv
299.68 702.931 297.245 699.15 296.958 695.291 cv
296.679 695.421 296.391 695.556 296.095 695.693 cv
294.961 696.218 293.675 696.816 292.417 697.57 cv
292.189 697.708 291.893 697.634 291.755 697.406 cv
291.618 697.177 291.692 696.88 291.92 696.744 cv
293.223 695.962 294.533 695.355 295.689 694.818 cv
296.221 694.572 296.727 694.337 297.196 694.103 cv
297.345 694.029 297.522 694.037 297.665 694.125 cv
297.807 694.212 297.894 694.367 297.894 694.535 cv
297.894 698.222 300.237 702.121 303.228 703.41 cv
305.61 704.435 308.111 703.8 310.466 701.576 cv
312.483 699.22 312.681 694.681 311.575 692.107 cv
311.47 691.861 311.583 691.578 311.827 691.472 cv
312.072 691.367 312.355 691.48 312.46 691.726 cv
313.704 694.623 313.48 699.539 311.164 702.24 cv
309.34 703.966 307.38 704.843 305.45 704.843 cv
cp
0 0 0 1 cmyk
f
345.631 681.618 mo
345.278 682.207 344.757 682.763 344.12 683.269 cv
340.001 686.544 326.61 689.328 332.311 680.924 cv
335.252 676.587 350.719 673.115 345.631 681.618 cv
cp
0 .48 .5 0 cmyk
f
262.645 700.888 mo
263.312 701.253 264.111 701.488 265 701.611 cv
270.726 702.408 284.949 697.554 274.86 692.792 cv
269.654 690.333 253.081 695.693 262.645 700.888 cv
cp
f
280.165 673.464 mo
279.815 673.541 279.466 673.625 279.117 673.711 cv
279.456 675.379 279.292 677 278.596 678.392 cv
277.627 680.337 275.695 681.61 273.163 681.974 cv
268.948 682.587 267.908 680.622 266.712 677.535 cv
266.368 677.642 266.019 677.736 265.669 677.827 cv
266.929 681.101 268.241 683.781 273.317 683.046 cv
274.49 682.875 275.551 682.533 276.474 682.033 cv
277.829 681.294 278.891 680.226 279.564 678.875 cv
280.374 677.255 280.561 675.377 280.165 673.464 cv
cp
0 0 0 1 cmyk
f
267.799 680.525 mo
267.416 681.138 267.168 681.682 266.865 682.345 cv
266.577 682.982 266.295 683.638 265.926 684.277 cv
265.82 684.462 265.585 684.521 265.4 684.416 cv
265.231 684.316 265.167 684.099 265.248 683.921 cv
265.517 683.312 265.725 682.654 265.95 681.987 cv
266.154 681.345 266.426 680.582 266.73 679.968 cv
266.745 679.938 li
266.893 679.639 267.254 679.517 267.552 679.666 cv
267.853 679.812 267.975 680.174 267.826 680.473 cv
267.82 680.492 267.809 680.511 267.799 680.525 cv
cp
f
272.902 682.896 mo
272.97 683.156 273.038 683.451 273.099 683.771 cv
273.226 684.644 li
273.298 685.21 273.359 685.755 273.469 686.287 cv
273.469 686.287 li
273.474 686.298 li
273.537 686.498 273.425 686.714 273.226 686.777 cv
273.028 686.845 272.815 686.74 272.746 686.544 cv
272.586 686.085 li
272.511 685.884 272.615 685.666 272.812 685.593 cv
273.017 685.523 273.233 685.626 273.305 685.828 cv
273.305 685.83 li
273.469 686.283 li
272.745 686.542 li
272.487 686.009 272.275 685.46 272.065 684.941 cv
271.749 684.187 li
271.646 683.97 271.521 683.734 271.385 683.48 cv
271.164 683.078 271.307 682.578 271.701 682.361 cv
272.102 682.143 272.602 682.29 272.82 682.687 cv
272.856 682.746 272.881 682.81 272.898 682.875 cv
272.902 682.896 li
cp
f
278.017 680.738 mo
278.085 680.83 278.209 680.98 278.332 681.165 cv
278.418 681.315 278.491 681.461 278.558 681.601 cv
278.689 681.888 278.79 682.166 278.884 682.433 cv
279.161 683.21 li
279.242 683.449 279.385 683.685 279.424 683.734 cv
279.542 683.906 li
279.659 684.062 279.623 684.283 279.459 684.402 cv
279.344 684.482 279.197 684.488 279.087 684.425 cv
278.636 684.179 278.504 683.904 278.319 683.656 cv
277.86 682.923 li
277.712 682.691 277.565 682.47 277.416 682.269 cv
277.342 682.171 277.265 682.085 277.188 682.005 cv
276.946 681.806 li
276.623 681.542 276.573 681.062 276.841 680.738 cv
277.104 680.414 277.581 680.365 277.904 680.631 cv
277.945 680.66 277.984 680.702 278.017 680.738 cv
cp
f
280.092 676.258 mo
280.374 676.309 li
280.511 676.337 280.668 676.373 280.809 676.417 cv
281.049 676.503 281.261 676.604 281.458 676.714 cv
281.836 676.931 282.138 677.162 282.428 677.339 cv
282.71 677.512 283.064 677.681 283.403 677.857 cv
283.92 678.124 li
284.195 678.276 li
284.339 678.369 li
284.447 678.449 li
284.483 678.474 284.542 678.541 284.571 678.595 cv
284.584 678.628 284.607 678.628 284.619 678.787 cv
284.626 678.937 284.514 679.087 284.437 679.132 cv
284.262 679.246 284.025 679.199 283.908 679.019 cv
283.792 678.843 283.841 678.607 284.021 678.49 cv
283.944 678.523 283.838 678.659 283.851 678.792 cv
283.868 678.945 283.888 678.937 283.89 678.961 cv
283.902 679.001 283.949 679.048 283.961 679.06 cv
283.951 679.062 li
283.843 679.028 li
283.586 678.954 li
283.045 678.813 li
282.676 678.714 282.311 678.632 281.898 678.499 cv
281.496 678.362 281.143 678.204 280.831 678.115 cv
280.679 678.072 280.532 678.041 280.407 678.025 cv
279.991 678.045 li
279.981 678.045 li
279.485 678.072 279.065 677.683 279.042 677.187 cv
279.021 676.69 279.408 676.269 279.903 676.25 cv
279.965 676.244 280.033 676.251 280.092 676.258 cv
cp
f
318.052 666.208 mo
318.393 666.096 318.735 665.992 319.078 665.886 cv
319.639 667.493 320.609 668.804 321.918 669.644 cv
323.741 670.821 326.054 670.927 328.417 669.954 cv
332.355 668.325 332.248 666.103 331.695 662.838 cv
332.049 662.755 332.396 662.658 332.741 662.558 cv
333.331 666.013 333.573 668.99 328.833 670.951 cv
327.737 671.404 326.648 671.65 325.601 671.691 cv
324.059 671.751 322.601 671.371 321.333 670.557 cv
319.808 669.574 318.687 668.057 318.052 666.208 cv
cp
f
332.29 665.968 mo
332.932 666.298 333.422 666.636 334.022 667.052 cv
334.591 667.453 335.171 667.874 335.816 668.236 cv
335.999 668.341 336.235 668.271 336.337 668.087 cv
336.435 667.914 336.379 667.695 336.217 667.582 cv
335.675 667.196 335.161 666.737 334.624 666.276 cv
334.121 665.831 333.497 665.314 332.923 664.941 cv
332.894 664.92 li
332.615 664.738 332.244 664.82 332.061 665.099 cv
331.879 665.379 331.956 665.752 332.238 665.933 cv
332.254 665.947 332.273 665.958 332.29 665.968 cv
cp
f
329.111 670.608 mo
329.188 670.867 329.279 671.154 329.391 671.46 cv
329.724 672.278 li
329.954 672.802 330.179 673.3 330.358 673.814 cv
330.358 673.814 li
330.358 673.825 li
330.406 674.033 330.614 674.162 330.815 674.113 cv
331.021 674.07 331.148 673.87 331.109 673.667 cv
331.013 673.188 li
330.976 672.98 330.774 672.845 330.565 672.883 cv
330.356 672.927 330.223 673.128 330.265 673.333 cv
330.265 673.336 li
330.355 673.808 li
331.109 673.664 li
331.059 673.076 330.961 672.495 330.876 671.941 cv
330.764 671.129 li
330.743 670.888 330.728 670.625 330.714 670.337 cv
330.7 669.877 330.322 669.523 329.872 669.536 cv
329.418 669.554 329.061 669.933 329.075 670.386 cv
329.075 670.458 329.088 670.524 329.104 670.587 cv
329.111 670.608 li
cp
f
323.614 671.368 mo
323.599 671.478 323.573 671.671 323.563 671.892 cv
323.563 672.066 323.575 672.229 323.588 672.385 cv
323.623 672.695 323.678 672.991 323.731 673.267 cv
323.89 674.074 li
323.942 674.321 323.942 674.599 323.935 674.661 cv
323.92 674.865 li
323.902 675.064 324.044 675.235 324.245 675.251 cv
324.383 675.263 324.513 675.193 324.576 675.083 cv
324.841 674.642 324.808 674.333 324.845 674.029 cv
324.864 673.166 li
324.873 672.89 324.884 672.625 324.91 672.375 cv
324.924 672.253 324.947 672.138 324.972 672.033 cv
325.079 671.739 li
325.221 671.343 325.021 670.908 324.625 670.767 cv
324.231 670.619 323.798 670.821 323.655 671.216 cv
323.636 671.261 323.623 671.319 323.614 671.368 cv
cp
f
319.542 668.576 mo
319.326 668.761 li
319.22 668.857 319.106 668.968 319.006 669.076 cv
318.845 669.275 318.71 669.468 318.598 669.663 cv
318.386 670.044 318.244 670.394 318.084 670.695 cv
317.929 670.989 317.711 671.314 317.511 671.64 cv
317.202 672.134 li
317.045 672.404 li
316.967 672.56 li
316.914 672.681 li
316.897 672.721 316.882 672.809 316.884 672.874 cv
316.889 672.904 316.869 672.917 316.94 673.062 cv
317.01 673.193 317.184 673.265 317.274 673.265 cv
317.481 673.273 317.662 673.109 317.67 672.898 cv
317.681 672.685 317.517 672.507 317.304 672.499 cv
317.383 672.49 317.548 672.552 317.605 672.675 cv
317.667 672.814 317.647 672.818 317.658 672.837 cv
317.665 672.877 317.651 672.941 317.645 672.959 cv
317.655 672.956 li
317.729 672.871 li
317.914 672.677 li
318.309 672.281 li
318.574 672.004 318.847 671.751 319.135 671.423 cv
319.41 671.101 319.633 670.785 319.853 670.548 cv
319.964 670.429 320.075 670.33 320.173 670.257 cv
320.54 670.058 li
320.549 670.054 li
320.988 669.822 321.152 669.275 320.919 668.837 cv
320.684 668.402 320.135 668.234 319.699 668.468 cv
319.644 668.498 319.587 668.539 319.542 668.576 cv
cp
f
316.941 766.273 mo
317.274 762.337 321.154 756.39 326.147 758.283 cv
333.436 761.001 328.315 773.65 325.117 777.521 cv
312.61 792.63 296.835 769.375 305.981 761.072 cv
310.268 757.302 316.53 762.164 316.483 765.72 cv
316.941 766.273 li
cp
.5 0 .66 0 cmyk
f
342.951 442.026 mo
345.761 440.768 348.435 439.254 350.907 437.438 cv
368.289 424.666 384.189 409.045 389.289 387.35 cv
394.978 363.143 388.293 336.09 373.869 316.171 cv
359.397 296.186 337.175 284.625 313.481 282.369 cv
287.785 279.92 259.609 287.703 241.493 307.189 cv
222.09 328.059 221.452 356.436 224.645 383.807 cv
225.056 387.329 225.527 390.838 225.998 394.351 cv
224.08 392.77 221.958 392.11 220.153 390.139 cv
225.322 412.832 236.826 428.568 257.879 437.87 cv
275.071 445.461 295.096 448.622 313.627 447.875 cv
323.346 447.487 333.858 446.092 342.951 442.026 cv
cp
.45 .86 .75 0 cmyk
f
310.333 509.418 mo
311.607 518.157 322.211 542.543 318.559 549.807 cv
310.302 565.68 297.256 525.065 297.73 518.069 cv
297.46 508.61 302.123 506.952 309.644 507.577 cv
310.333 509.418 li
cp
0 .24 .43 0 cmyk
f
279.613 516.098 mo
277.269 524.614 277.229 551.223 270.934 556.395 cv
256.927 567.584 261.246 525.129 264.501 518.918 cv
268.063 510.153 273.031 510.518 279.718 514.133 cv
279.613 516.098 li
cp
f
320.06 524.411 mo
320.426 524.35 320.792 524.288 321.157 524.225 cv
318.639 513.053 315.991 501.106 315.699 495.542 cv
315.477 494.143 315.029 491.02 314.89 489.491 cv
310.472 486.866 304.456 487.143 299.557 487.147 cv
290.819 487.155 281.477 486.682 272.875 487.692 cv
269.292 497.37 266.9 501.524 263.67 511.241 cv
262.485 514.807 261.084 518.264 259.647 523.717 cv
266.722 526.473 272.453 529.749 287.212 527.647 cv
288.753 520.198 290.145 514.788 292.847 508.721 cv
294.009 513.891 293.837 514.25 294.694 519.495 cv
295.046 521.665 295.495 524.491 295.989 527.565 cv
295.989 527.565 309.446 529.198 320.06 524.411 cv
cp
.75 0 .36 0 cmyk
f
325.068 452.702 mo
330.244 456.571 344.303 461.264 345.637 468.227 cv
347.74 479.186 336.808 474.168 332.281 470.948 cv
328.503 468.262 319.331 469.231 315.326 466.809 cv
325.068 452.702 li
cp
0 .27871 .499355 0 cmyk
f
311.169 435.778 mo
311.339 436.938 316.776 442.358 318.506 444.147 cv
321.583 447.338 323.622 449.124 326.718 452.377 cv
324.667 455.305 321.153 465.733 319.571 468.887 cv
313.887 469.192 300.644 465.411 299.551 460.774 cv
298.928 458.139 310.448 438.913 312.248 437.106 cv
311.169 435.778 li
cp
0 .05 .52 0 cmyk
f
268.566 449.249 mo
262.083 454.393 246.079 464.206 247.104 474.184 cv
248.827 490.995 264.47 470.463 268.873 465.866 cv
273.345 461.196 275.366 462.649 280.602 459.11 cv
268.566 449.249 li
cp
0 .24 .43 0 cmyk
f
279.834 441.106 mo
269.635 440.995 263.577 446.573 255.695 452.127 cv
258.126 457.86 260.123 465.995 265.584 468.997 cv
267.364 469.973 265.921 469.633 268.723 470.633 cv
272.51 471.989 277.296 465.389 280.267 463.659 cv
283.144 461.981 286.286 461.135 288.508 458.504 cv
285.066 453.506 280.502 453.489 281.161 447.405 cv
279.834 441.106 li
cp
0 .05 .52 0 cmyk
f
272.125 482.54 mo
270.339 487.895 273.063 487.622 270.915 492.815 cv
287.891 496.963 295.337 495.221 312.967 494.106 cv
317.678 493.807 309.595 494.702 314.161 493.723 cv
307.686 474.52 320.171 457.28 304.18 442.323 cv
293.417 432.25 280.11 435.36 274.204 448.288 cv
268.974 459.735 276.048 470.774 272.125 482.54 cv
cp
f
314.28 498.299 mo
312.599 498.452 309.547 498.241 307.818 497.952 cv
307.184 493.147 307.11 487.981 306.8 483.057 cv
305.65 464.737 302.68 455.668 299.316 438.362 cv
299.286 438.196 305.317 439.417 308.718 439.858 cv
308.718 439.858 317.798 486.176 314.28 498.299 cv
cp
.75 0 .36 0 cmyk
f
271.823 461.319 mo
271.743 454.186 270.853 446.78 273.893 442.014 cv
276.302 441.684 278.909 440.418 281.161 439.522 cv
280.29 442.877 279.743 449.28 279.511 453.116 cv
278.41 471.325 279.975 480.317 278.387 498.415 cv
270.431 498.965 270.877 492.965 270.972 486.938 cv
271.161 474.936 271.956 473.381 271.823 461.319 cv
cp
f
239.932 366.525 mo
240.951 371.87 241.236 377.27 241.008 383.891 cv
229.583 380.111 229.014 395.742 239.814 395.459 cv
238.614 409.324 247.758 421.875 259.352 427.97 cv
264.875 430.875 273.002 431.503 277.876 435.239 cv
283.067 439.217 282.446 444.344 284.38 448.958 cv
288.898 459.731 292.755 444.629 299.416 440.434 cv
303.941 437.583 311.967 441.254 316.847 441.606 cv
323.265 442.065 329.954 441.389 336.214 439.866 cv
349.195 436.709 353.271 423.9 360.601 413.648 cv
371.584 418.542 373.674 402.564 364.383 402.761 cv
364.752 397.625 366.333 393.125 365.904 387.602 cv
359.969 385.463 353.366 384.833 347.209 383.441 cv
325.798 378.599 291.917 369.866 281.878 347.144 cv
281.878 347.144 275.857 368.289 239.932 366.525 cv
cp
0 .24 .43 0 cmyk
f
321.893 395.734 mo
320.814 400.16 322.165 404.287 324.912 404.957 cv
327.656 405.625 330.756 402.582 331.833 398.16 cv
332.911 393.736 331.56 389.611 328.815 388.941 cv
326.071 388.271 322.971 391.314 321.893 395.734 cv
cp
.5 .7 .8 .58 cmyk
f
267.437 387.957 mo
266.359 392.381 267.709 396.51 270.455 397.178 cv
273.2 397.846 276.3 394.805 277.377 390.383 cv
278.455 385.958 277.104 381.832 274.359 381.163 cv
271.614 380.492 268.516 383.536 267.437 387.957 cv
cp
f
301.524 418.55 mo
301.303 422.314 297.783 425.171 293.658 424.927 cv
289.537 424.685 286.373 421.437 286.592 417.674 cv
286.812 413.91 289.056 416.189 293.179 416.432 cv
297.301 416.672 301.744 414.783 301.524 418.55 cv
cp
0 .48 .5 0 cmyk
f
335.666 416.627 mo
335.105 417.049 334.405 417.379 333.608 417.613 cv
328.466 419.138 314.75 416.662 323.341 410.893 cv
327.773 407.916 343.717 410.527 335.666 416.627 cv
cp
f
259.239 407.758 mo
259.678 408.391 260.297 408.975 261.047 409.496 cv
265.888 412.854 281.052 414.992 274.073 406.016 cv
270.471 401.385 252.936 398.625 259.239 407.758 cv
cp
f
765.501 737.334 mo
772.12 740.761 787.797 746.576 789.187 755.891 cv
791.534 771.587 773.738 755.913 768.997 752.58 cv
764.178 749.191 760.775 753.067 755.571 750.868 cv
765.501 737.334 li
cp
0 .24 .43 0 cmyk
f
687.766 725.449 mo
680.85 727.663 664.724 730.478 662.292 740.037 cv
658.192 756.141 677.529 743.345 682.584 740.827 cv
687.724 738.271 690.638 743.098 696.022 741.876 cv
687.766 725.449 li
cp
f
704.229 599.244 mo
713.024 595.406 720.629 590.211 730.092 589.654 cv
741.393 588.042 759.488 590.965 769.973 594.309 cv
777.208 596.253 777.667 599.36 784.03 602.628 cv
793.641 607.284 803.186 613.502 808.644 622.184 cv
826.843 651.143 821.054 676.489 818.938 686.266 cv
815.133 702.316 807.443 715.515 794.637 726.555 cv
778.384 740.804 752.778 749.43 731.663 750.99 cv
717.467 751.826 701.122 751.042 688.523 744.028 cv
688.523 744.028 693.2 740.115 694.943 737.478 cv
694.943 737.478 li
682.106 723.675 666.779 713.339 661.198 693.723 cv
653.216 665.708 665.465 631.753 686.527 613.105 cv
691.332 608.709 694.914 605.017 700.423 601.844 cv
704.229 599.244 li
cp
.3 .5 .75 .22 cmyk
f
789.79 675.307 mo
795.277 674.725 801.317 677.633 803.891 682.587 cv
809.567 694.496 793.67 700.73 787.532 691.329 cv
789.79 675.307 li
cp
0 .33 .46 0 cmyk
f
726.532 792.191 mo
726.178 799.326 731.812 820.508 727.098 825.577 cv
716.535 836.599 711.484 802.158 713.166 796.72 cv
714.59 789.205 719.262 788.746 726.21 790.613 cv
726.532 792.191 li
cp
0 .24 .43 0 cmyk
f
742.59 792.221 mo
743.863 799.25 754.147 818.61 750.7 824.616 cv
742.906 837.742 730.191 805.333 730.599 799.658 cv
730.286 792.015 734.731 790.513 741.922 790.757 cv
742.59 792.221 li
cp
f
776.66 737.224 mo
766.985 726.297 753.303 720.694 740.299 714.807 cv
739.56 714.473 738.864 714.742 738.433 715.225 cv
737.893 714.818 737.152 714.759 736.583 715.439 cv
733.576 719.019 731.097 723.009 728.938 727.175 cv
727.688 722.696 726.102 718.438 722.147 716.211 cv
717.464 713.571 711.167 715.422 706.324 716.419 cv
698.948 717.938 691.619 719.627 684.091 720.201 cv
683.47 720.249 682.797 720.95 682.818 721.585 cv
683.042 728.459 683.137 736.878 685.585 743.37 cv
688.519 751.141 697.426 748.437 703.784 747.786 cv
712.395 746.908 721.036 745.371 728.934 741.758 cv
734.246 744.505 739.293 747.726 744.401 750.859 cv
748.614 753.443 753.908 757.33 759.208 756.443 cv
767.563 755.042 770.577 744.206 776.655 739.413 cv
777.344 738.868 777.168 737.799 776.66 737.224 cv
cp
0 .38 .85 0 cmyk
f
695.376 808.187 mo
695.186 808.077 698.354 809.375 698.165 809.307 cv
706.515 812.319 715.52 811.926 724.249 811.667 cv
733.177 811.401 742.113 811.554 751.044 811.375 cv
756.579 811.264 761.495 810.074 766.872 811.85 cv
766.835 803.9 761.19 774.264 758.5 766.861 cv
754.501 755.862 751.022 744.676 748.214 733.313 cv
746.669 727.061 745.669 716.012 748.214 718.05 cv
748.214 717.54 li
745.669 716.521 742.107 716.012 740.072 716.012 cv
739.564 722.119 734.983 750.618 723.279 736.369 cv
719.716 731.788 720.949 721.046 720.949 715.447 cv
718.913 715.957 713.431 712.124 713.062 713.922 cv
710.77 725.118 710.297 725.839 709.285 732.551 cv
706.326 752.153 694.081 792.666 688.191 804.502 cv
690.523 805.852 692.917 807.089 695.376 808.187 cv
cp
f
690.244 799.86 mo
690.874 800.068 691.354 800.231 691.267 800.206 cv
701.581 803.215 712.701 802.825 723.478 802.565 cv
734.503 802.297 745.538 802.454 756.565 802.275 cv
759.775 802.222 762.816 801.934 765.826 801.825 cv
764.059 789.798 760.481 772.31 758.5 766.861 cv
754.501 755.862 751.022 744.676 748.214 733.313 cv
746.669 727.061 745.669 716.012 748.214 718.05 cv
748.214 717.54 li
746.08 716.687 743.239 716.195 741.173 716.058 cv
740.661 717.886 740.04 719.787 739.297 721.598 cv
737.524 731.544 732.719 747.861 723.279 736.369 cv
721.298 733.821 720.8 729.368 720.75 724.954 cv
719.492 722.27 719.166 718.721 719.154 715.244 cv
716.708 714.517 713.347 712.527 713.062 713.922 cv
710.77 725.118 710.297 725.839 709.285 732.551 cv
706.638 750.089 696.557 784.363 690.244 799.86 cv
cp
.46 .81 0 0 cmyk
f
731.197 757.375 mo
732.443 752.822 737.922 746.84 742.804 750.381 cv
749.946 755.505 741.625 769.062 737.344 772.782 cv
720.603 787.297 709.093 755.737 720.709 748.361 cv
726.128 745.046 731.692 752.422 730.832 756.605 cv
731.197 757.375 li
cp
0 .38 .85 0 cmyk
f
794.609 671.729 mo
786.344 670.353 775.326 660.41 766.289 657.548 cv
746.708 651.349 726.219 651.158 707.14 644.951 cv
702.12 643.526 696.595 641.614 692.575 640.174 cv
687.216 649.249 685.385 660.268 682.539 670.302 cv
677.798 687.364 681.47 698.799 697.596 708.049 cv
703.137 710.964 708.672 713.377 714.695 715.288 cv
717.192 715.25 723.803 716.72 723.248 719.154 cv
722.016 724.553 722.053 727.049 725.082 729.003 cv
728.615 731.451 734.853 729.315 735.75 724.095 cv
737.128 716.082 756.323 725.651 766.323 726 cv
781.307 725.776 785.683 717.713 791.489 705.137 cv
796.318 694.071 796.659 683.572 799.998 673.03 cv
794.609 671.729 li
cp
0 .24 .43 0 cmyk
f
799.448 637.749 mo
801.168 627.376 816.167 577.476 800.936 574.978 cv
790.707 573.3 770.03 593.982 765.305 601.333 cv
758.656 611.664 768.227 614.001 778.045 620.055 cv
787.108 625.637 795.191 629.483 800.154 639.405 cv
799.448 637.749 li
cp
0 .38 .85 0 cmyk
f
791.822 629.228 mo
792.795 623.364 801.276 595.155 792.664 593.74 cv
786.881 592.792 775.19 604.485 772.518 608.639 cv
768.761 614.483 774.169 615.804 779.723 619.225 cv
784.846 622.383 789.417 624.556 792.223 630.166 cv
791.822 629.228 li
cp
.02 0 .578947 0 cmyk
f
697.542 623.192 mo
699.155 612.801 700.526 560.716 715.777 563.11 cv
726.013 564.715 739.074 589.237 741.265 597.696 cv
744.343 609.592 734.627 610.412 723.407 613.084 cv
713.056 615.551 704.172 616.676 696.355 624.545 cv
697.542 623.192 li
cp
0 .38 .85 0 cmyk
f
711.375 611.493 mo
712.282 606.165 713.391 579.405 721.21 580.753 cv
726.461 581.658 732.983 594.362 734.043 598.727 cv
735.535 604.863 730.535 605.209 724.747 606.5 cv
719.404 607.686 714.83 608.194 710.751 612.18 cv
711.375 611.493 li
cp
.02 0 .578947 0 cmyk
f
766.776 605.249 mo
743.978 596.899 715.774 596.135 697.249 613.954 cv
686.951 623.862 684.636 636.865 683.828 650.341 cv
684.488 650.614 687.012 650.975 687.912 650.889 cv
696.636 626.628 711.886 611.506 739.958 612.684 cv
763.194 613.659 783.768 625.63 792.415 646.945 cv
797.086 658.465 796.795 670.819 797.404 683.053 cv
808.905 673.535 807.867 647.168 802.845 635.561 cv
796.245 620.292 782.361 610.956 766.776 605.249 cv
cp
0 .38 .85 0 cmyk
f
686.116 662.897 mo
675.978 655.654 683.08 644.39 691.693 645.319 cv
689.203 650.881 687.63 656.925 686.116 662.897 cv
cp
0 .33 .46 0 cmyk
f
735.898 704.545 mo
734.131 704.545 732.333 703.761 730.662 702.228 cv
728.428 699.709 728.15 695.126 729.269 692.407 cv
729.364 692.176 729.63 692.07 729.856 692.162 cv
730.085 692.256 730.196 692.519 730.101 692.749 cv
729.105 695.167 729.353 699.397 731.302 701.599 cv
733.498 703.61 735.842 704.166 738.046 703.175 cv
740.818 701.93 742.947 698.261 742.894 694.822 cv
742.891 694.667 742.97 694.52 743.101 694.436 cv
743.232 694.352 743.397 694.343 743.539 694.41 cv
743.984 694.625 744.463 694.837 744.967 695.062 cv
746.049 695.543 747.277 696.089 748.499 696.798 cv
748.713 696.922 748.787 697.198 748.662 697.413 cv
748.537 697.627 748.261 697.699 748.047 697.576 cv
746.867 696.892 745.664 696.356 744.602 695.883 cv
744.319 695.757 744.043 695.635 743.778 695.514 cv
743.566 699.117 741.348 702.678 738.415 703.996 cv
737.594 704.364 736.75 704.545 735.898 704.545 cv
cp
0 0 0 1 cmyk
f
698.189 683.445 mo
698.527 683.99 699.02 684.5 699.622 684.965 cv
703.509 687.959 716.037 690.368 710.604 682.611 cv
707.799 678.608 693.324 675.585 698.189 683.445 cv
cp
0 .48 .5 0 cmyk
f
775.861 700.253 mo
775.245 700.602 774.502 700.832 773.675 700.958 cv
768.345 701.784 755.011 697.458 764.355 692.873 cv
769.176 690.505 784.709 695.27 775.861 700.253 cv
cp
f
759.134 674.918 mo
759.462 674.986 759.789 675.059 760.116 675.134 cv
759.822 676.694 760 678.206 760.667 679.492 cv
761.598 681.292 763.417 682.453 765.784 682.757 cv
769.724 683.27 770.669 681.421 771.739 678.524 cv
772.061 678.621 772.388 678.705 772.716 678.784 cv
771.586 681.853 770.401 684.374 765.656 683.759 cv
764.559 683.618 763.565 683.31 762.699 682.858 cv
761.423 682.19 760.417 681.209 759.771 679.958 cv
758.993 678.458 758.792 676.708 759.134 674.918 cv
cp
0 0 0 1 cmyk
f
770.767 681.33 mo
771.135 681.897 771.372 682.399 771.665 683.015 cv
771.944 683.603 772.213 684.214 772.568 684.803 cv
772.668 684.975 772.889 685.029 773.059 684.926 cv
773.216 684.83 773.272 684.628 773.194 684.463 cv
772.934 683.899 772.731 683.288 772.513 682.667 cv
772.312 682.071 772.049 681.363 771.756 680.795 cv
771.743 680.769 li
771.6 680.492 771.262 680.382 770.987 680.523 cv
770.708 680.667 770.599 681.004 770.741 681.282 cv
770.749 681.299 770.759 681.317 770.767 681.33 cv
cp
f
766.041 683.614 mo
765.981 683.857 765.922 684.132 765.87 684.432 cv
765.763 685.249 li
765.704 685.778 765.654 686.288 765.562 686.785 cv
765.562 686.785 li
765.556 686.795 li
765.5 686.984 765.608 687.185 765.793 687.239 cv
765.979 687.299 766.175 687.196 766.237 687.014 cv
766.38 686.584 li
766.449 686.397 766.348 686.193 766.163 686.129 cv
765.971 686.067 765.772 686.165 765.708 686.353 cv
765.708 686.356 li
765.562 686.78 li
766.24 687.013 li
766.471 686.513 766.664 685.998 766.852 685.509 cv
767.135 684.802 li
767.228 684.596 767.339 684.376 767.464 684.135 cv
767.665 683.757 767.526 683.295 767.154 683.099 cv
766.778 682.9 766.314 683.042 766.115 683.416 cv
766.083 683.473 766.059 683.535 766.043 683.595 cv
766.041 683.614 li
cp
f
761.239 681.671 mo
761.177 681.758 761.064 681.9 760.954 682.073 cv
760.874 682.216 760.809 682.352 760.749 682.485 cv
760.63 682.753 760.54 683.015 760.456 683.267 cv
760.208 683.993 li
760.135 684.217 760.007 684.441 759.969 684.487 cv
759.862 684.649 li
759.756 684.797 759.792 685 759.948 685.111 cv
760.055 685.184 760.192 685.187 760.294 685.127 cv
760.71 684.891 760.83 684.629 760.999 684.398 cv
761.417 683.708 li
761.554 683.489 761.686 683.282 761.822 683.091 cv
761.891 682.999 761.961 682.918 762.032 682.845 cv
762.252 682.653 li
762.551 682.402 762.59 681.954 762.337 681.655 cv
762.088 681.358 761.642 681.317 761.343 681.572 cv
761.305 681.599 761.27 681.638 761.239 681.671 cv
cp
f
759.241 677.524 mo
758.979 677.575 li
758.851 677.603 758.707 677.638 758.575 677.682 cv
758.353 677.767 758.156 677.863 757.972 677.969 cv
757.625 678.175 757.348 678.392 757.078 678.562 cv
756.817 678.73 756.49 678.891 756.174 679.061 cv
755.697 679.317 li
755.443 679.463 li
755.309 679.55 li
755.209 679.628 li
755.177 679.654 755.124 679.714 755.096 679.766 cv
755.085 679.795 755.064 679.797 755.053 679.947 cv
755.051 680.088 755.157 680.225 755.229 680.265 cv
755.395 680.37 755.615 680.322 755.721 680.154 cv
755.828 679.986 755.778 679.768 755.61 679.66 cv
755.678 679.69 755.782 679.815 755.772 679.941 cv
755.758 680.084 755.741 680.078 755.739 680.097 cv
755.727 680.135 755.685 680.178 755.672 680.192 cv
755.683 680.194 li
755.782 680.158 li
756.02 680.086 li
756.522 679.947 li
756.866 679.853 757.206 679.769 757.589 679.637 cv
757.961 679.507 758.289 679.354 758.578 679.266 cv
758.719 679.221 758.857 679.192 758.972 679.178 cv
759.362 679.188 li
759.37 679.188 li
759.834 679.206 760.221 678.836 760.236 678.374 cv
760.245 677.913 759.88 677.524 759.419 677.513 cv
759.361 677.506 759.295 677.516 759.241 677.524 cv
cp
f
723.696 668.684 mo
723.375 668.584 723.055 668.491 722.733 668.396 cv
722.234 669.905 721.346 671.141 720.137 671.943 cv
718.453 673.066 716.298 673.199 714.08 672.323 cv
710.383 670.858 710.454 668.786 710.921 665.734 cv
710.591 665.661 710.267 665.576 709.944 665.485 cv
709.443 668.717 709.257 671.497 713.707 673.259 cv
714.735 673.667 715.752 673.881 716.731 673.903 cv
718.169 673.937 719.526 673.564 720.697 672.786 cv
722.105 671.848 723.13 670.415 723.696 668.684 cv
cp
f
710.414 668.66 mo
709.817 668.977 709.365 669.299 708.812 669.698 cv
708.287 670.078 707.75 670.478 707.155 670.826 cv
706.987 670.924 706.765 670.864 706.666 670.695 cv
706.575 670.532 706.624 670.329 706.772 670.221 cv
707.272 669.854 707.744 669.417 708.241 668.981 cv
708.702 668.559 709.277 668.067 709.807 667.711 cv
709.833 667.691 li
710.09 667.518 710.439 667.589 710.613 667.847 cv
710.789 668.106 710.719 668.455 710.46 668.627 cv
710.444 668.638 710.428 668.651 710.414 668.66 cv
cp
f
713.441 672.944 mo
713.375 673.186 713.293 673.455 713.194 673.742 cv
712.894 674.509 li
712.686 675.002 712.484 675.468 712.324 675.951 cv
712.324 675.951 li
712.324 675.962 li
712.283 676.157 712.091 676.278 711.901 676.236 cv
711.708 676.198 711.588 676.016 711.623 675.823 cv
711.705 675.377 li
711.737 675.181 711.922 675.053 712.118 675.085 cv
712.313 675.123 712.44 675.311 712.405 675.5 cv
712.405 675.504 li
712.329 675.946 li
711.623 675.821 li
711.66 675.273 711.744 674.729 711.813 674.21 cv
711.909 673.453 li
711.923 673.226 711.935 672.982 711.943 672.713 cv
711.951 672.284 712.296 671.946 712.718 671.954 cv
713.143 671.965 713.48 672.312 713.472 672.735 cv
713.473 672.803 713.462 672.865 713.449 672.925 cv
713.441 672.944 li
cp
f
718.58 673.575 mo
718.594 673.677 718.624 673.858 718.636 674.064 cv
718.638 674.227 718.629 674.376 718.619 674.524 cv
718.589 674.812 718.543 675.087 718.496 675.347 cv
718.362 676.102 li
718.317 676.333 718.319 676.592 718.326 676.651 cv
718.343 676.841 li
718.363 677.028 718.233 677.186 718.046 677.206 cv
717.917 677.218 717.795 677.155 717.735 677.052 cv
717.482 676.647 717.508 676.358 717.468 676.075 cv
717.439 675.268 li
717.427 675.012 717.413 674.766 717.384 674.532 cv
717.371 674.418 717.347 674.313 717.322 674.212 cv
717.219 673.942 li
717.081 673.574 717.262 673.167 717.628 673.028 cv
717.993 672.885 718.401 673.066 718.539 673.434 cv
718.557 673.476 718.573 673.529 718.58 673.575 cv
cp
f
722.339 670.914 mo
722.543 671.083 li
722.643 671.17 722.75 671.273 722.845 671.373 cv
723 671.556 723.125 671.733 723.233 671.915 cv
723.437 672.267 723.574 672.591 723.727 672.87 cv
723.878 673.142 724.083 673.442 724.276 673.742 cv
724.572 674.199 li
724.722 674.447 li
724.796 674.592 li
724.847 674.705 li
724.866 674.744 724.879 674.824 724.877 674.883 cv
724.874 674.913 724.893 674.926 724.827 675.061 cv
724.764 675.183 724.605 675.255 724.52 675.253 cv
724.327 675.265 724.156 675.116 724.147 674.918 cv
724.132 674.72 724.283 674.552 724.482 674.542 cv
724.407 674.533 724.254 674.593 724.203 674.708 cv
724.148 674.84 724.166 674.844 724.155 674.862 cv
724.15 674.899 724.164 674.958 724.17 674.975 cv
724.16 674.971 li
724.091 674.893 li
723.917 674.715 li
723.542 674.351 li
723.291 674.099 723.032 673.864 722.758 673.562 cv
722.498 673.266 722.285 672.976 722.077 672.757 cv
721.972 672.65 721.867 672.557 721.771 672.49 cv
721.428 672.31 li
721.421 672.306 li
721.008 672.096 720.846 671.588 721.057 671.175 cv
721.273 670.766 721.779 670.602 722.192 670.817 cv
722.244 670.841 722.295 670.878 722.339 670.914 cv
cp
f
122.336 716.001 mo
140.591 701.08 158.223 684.695 161.959 660.217 cv
165.465 637.25 156.881 612.833 141.446 595.759 cv
125.959 578.631 103.72 570.048 80.8188 570.222 cv
55.9805 570.413 29.5889 580.315 13.7852 600.096 cv
-3.13965 621.28 -1.46826 647.627 3.79736 672.678 cv
4.47461 675.898 5.20801 679.106 5.94238 682.311 cv
3.97559 681.032 1.88818 680.624 0 678.969 cv
6.78174 699.498 19.0806 712.973 40.0171 719.573 cv
57.1128 724.963 76.5688 725.974 94.2793 723.511 cv
103.375 722.248 112.06 719.592 120.653 716.421 cv
122.336 716.001 li
cp
.45 .86 .75 0 cmyk
f
62.8184 738.445 mo
57.5132 741.72 43.6021 745.026 41.7231 751.603 cv
38.7671 761.95 49.6992 758.067 54.3262 755.359 cv
58.1831 753.101 66.9155 754.819 70.9722 752.836 cv
62.8184 738.445 li
cp
0 .27871 .499355 0 cmyk
f
83.9746 725.68 mo
83.5342 725.458 83.0977 725.237 82.666 725.008 cv
79.8237 726.716 75.4043 728.922 73.5894 729.865 cv
68.8413 732.335 65.8252 733.597 61.0317 736.126 cv
62.2544 740.264 62.2715 753.542 62.8711 757.762 cv
69.2559 760.292 85.8584 761.051 88.8911 756.167 cv
90.4463 753.666 85.8882 731.95 83.9746 725.68 cv
cp
.266667 .4 0 0 cmyk
f
124.875 738.497 mo
132.142 740.596 149.02 743.317 151.82 752.183 cv
156.542 767.118 136.04 755.135 130.703 752.769 cv
125.279 750.365 122.377 754.809 116.733 753.641 cv
124.875 738.497 li
cp
0 .24 .43 0 cmyk
f
96.4253 754.097 mo
96.6802 754.518 96.9331 754.938 97.1782 755.362 cv
100.494 755.419 105.409 755.897 107.448 756.059 cv
112.783 756.485 117.686 754.336 123.093 754.734 cv
124.252 750.58 129.604 741.997 131.335 738.101 cv
127.266 732.569 113.595 723.117 108.434 725.646 cv
105.788 726.943 98.1299 747.766 96.4253 754.097 cv
cp
.266667 .4 0 0 cmyk
f
120.985 779.348 mo
118.392 774.338 118.939 772.201 118.615 766.611 cv
117.957 755.292 122.16 745.17 115.847 734.131 cv
108.715 721.66 92.6489 718.661 79.6533 728.375 cv
60.3452 742.808 72.1895 759.634 68.438 777.868 cv
69.6069 778.068 100.583 783.333 120.985 779.348 cv
cp
f
74.3145 782.375 mo
75.9355 782.522 78.8794 782.319 80.5479 782.04 cv
81.1582 777.404 81.2305 772.42 81.5293 767.674 cv
82.6387 750 85.5034 741.25 88.748 724.555 cv
88.7783 724.398 82.9604 725.574 79.6792 726.003 cv
79.6792 726.003 70.9204 770.679 74.3145 782.375 cv
cp
.46 .81 0 0 cmyk
f
114.304 745.683 mo
114.379 738.801 113.909 729.887 112.724 724.883 cv
110.399 724.564 106.075 725.621 103.905 724.752 cv
104.743 727.992 105.788 733.77 106.011 737.473 cv
107.073 755.036 105.541 773.376 107.073 790.833 cv
119.692 791.71 114.479 784.722 114.248 770.097 cv
114.066 758.52 114.175 757.317 114.304 745.683 cv
cp
f
126.051 825.226 mo
122.415 830.158 113.34 834.418 113.839 824.442 cv
114.345 814.36 118.188 815.129 112.087 806.91 cv
104.653 796.892 113.19 788.483 120.657 795.691 cv
128.067 802.844 134.547 813.711 126.051 825.226 cv
cp
0 .24 .43 0 cmyk
f
77.2041 827.259 mo
95.5645 841.872 82.0889 790.999 87.311 791.284 cv
78.7852 790.819 70.4106 789.104 71.9019 802.977 cv
72.7446 810.818 70.7368 822.114 77.2041 827.259 cv
cp
f
68.6572 798.551 mo
68.7295 795.838 68.041 793.46 68.165 790.406 cv
68.3257 786.439 68.4517 781.625 68.625 777.671 cv
79.1777 776.705 91.3989 775.828 101.798 776.222 cv
107.223 776.428 111.901 776.387 117.625 776.732 cv
121.297 776.954 121.929 782.326 123.65 785.962 cv
125.533 789.94 128.023 793.936 129.771 798.055 cv
130.304 798.833 130.879 799.943 130.463 800.576 cv
130.239 800.969 128.685 801.117 127.928 801.243 cv
124.778 802.033 121.497 802.344 118.273 802.598 cv
115.835 802.792 110.357 804.241 108.196 803.163 cv
106.183 802.155 98.8638 791.736 96.8423 789.465 cv
96.8237 792.99 95.4429 796.498 95.0381 800.026 cv
95.0381 800.026 95.0859 802.701 91.7202 802.625 cv
87.6274 802.322 83.3154 801.749 79.1567 801.76 cv
76.4258 801.766 73.4648 801.577 70.6118 801.35 cv
70.6118 801.35 68.5249 801.467 68.6572 798.551 cv
cp
.46 .81 0 0 cmyk
f
146.037 655.258 mo
145.053 660.414 144.779 665.623 144.997 672.012 cv
156.02 668.365 156.569 683.445 146.149 683.169 cv
147.306 696.546 138.485 708.652 127.3 714.535 cv
121.973 717.336 114.133 717.942 109.431 721.545 cv
104.424 725.379 105.024 730.327 103.157 734.777 cv
98.7993 745.169 88.9639 740.458 87.9199 728.306 cv
87.478 723.167 76.5454 727.347 71.8369 727.683 cv
65.645 728.128 59.1924 727.476 53.1548 726.008 cv
40.6309 722.962 36.7007 710.606 29.6284 700.716 cv
19.0337 705.441 17.0171 690.024 25.981 690.215 cv
25.6235 685.26 24.0991 680.917 24.5142 675.59 cv
30.2378 673.527 36.6089 672.919 42.5479 671.577 cv
63.2021 666.905 95.8857 658.483 105.57 636.562 cv
105.57 636.562 111.379 656.958 146.037 655.258 cv
cp
0 .24 .43 0 cmyk
f
129.967 693.157 mo
129.545 693.686 128.968 694.161 128.279 694.571 cv
123.839 697.226 110.428 698.192 117.078 690.748 cv
120.509 686.905 136.034 685.533 129.967 693.157 cv
cp
0 .48 .5 0 cmyk
f
50.5957 701.724 mo
51.1973 702.166 51.9468 702.497 52.7969 702.733 cv
58.2729 704.255 72.7637 701.38 63.5527 695.422 cv
58.8003 692.35 41.9526 695.409 50.5957 701.724 cv
cp
f
116.542 679.337 mo
111.591 678.15 112.738 669.654 118.079 670.947 cv
123.007 672.14 122.116 680.673 116.542 679.337 cv
cp
0 0 0 1 cmyk
f
62.7271 686.919 mo
57.6494 686.546 57.4111 677.976 62.8896 678.389 cv
67.9468 678.772 68.4448 687.336 62.7271 686.919 cv
cp
f
101.509 703.937 mo
101.509 703.937 100.365 702.667 99.9927 702.526 cv
98.2837 703.625 96.4067 704.44 94.4121 704.85 cv
92.4287 705.256 90.4302 705.653 88.4189 705.714 cv
89.8838 709.73 92.4058 715.091 97.2358 715.399 cv
104.183 715.842 105.165 708.381 101.509 703.937 cv
cp
0 .48 .5 0 cmyk
f
87.8804 706.128 mo
84.8765 706.128 82.0469 705.463 79.7534 703.952 cv
80.1431 703.362 li
87.1982 708.014 100.138 704.015 106.145 697.601 cv
106.661 698.085 li
102.284 702.757 94.6421 706.128 87.8804 706.128 cv
cp
0 0 0 1 cmyk
f
62.8594 660.374 mo
50.832 660.374 41.0474 670.158 41.0474 682.184 cv
41.0474 694.212 50.832 703.998 62.8594 703.998 cv
74.8867 703.998 84.6714 694.212 84.6714 682.184 cv
84.6714 670.158 74.8867 660.374 62.8594 660.374 cv
cp
62.8594 706.863 mo
49.2524 706.863 38.1821 695.792 38.1821 682.184 cv
38.1821 668.578 49.2524 657.508 62.8594 657.508 cv
76.4663 657.508 87.5366 668.578 87.5366 682.184 cv
87.5366 695.792 76.4663 706.863 62.8594 706.863 cv
cp
0 0 0 .799988 cmyk
f
116.086 652.314 mo
104.059 652.314 94.2744 662.099 94.2744 674.127 cv
94.2744 686.154 104.059 695.938 116.086 695.938 cv
128.113 695.938 137.898 686.154 137.898 674.127 cv
137.898 662.099 128.113 652.314 116.086 652.314 cv
cp
116.086 698.803 mo
102.479 698.803 91.4092 687.734 91.4092 674.127 cv
91.4092 660.52 102.479 649.449 116.086 649.449 cv
129.693 649.449 140.763 660.52 140.763 674.127 cv
140.763 687.734 129.693 698.803 116.086 698.803 cv
cp
f
91.5742 676.265 mo
90.0444 676.977 88.3887 677.203 86.7676 676.648 cv
84.7715 675.966 83.4194 678.905 85.4385 679.694 cv
87.8066 680.619 90.4619 680.469 92.7593 679.404 cv
94.7139 678.497 93.5347 675.353 91.5742 676.265 cv
cp
f
147.16 669.533 mo
144.637 670.314 142.479 672.038 139.829 672.466 cv
137.708 672.807 138.039 676.121 140.178 675.792 cv
143.115 675.34 145.632 673.772 148.342 672.661 cv
150.351 671.835 149.207 668.899 147.16 669.533 cv
cp
f
41.1064 685.104 mo
39.4663 684.387 37.4927 685.056 35.8433 685.451 cv
32.4785 686.256 29.2041 687.318 25.7944 687.951 cv
23.6724 688.345 24.0093 691.7 26.1465 691.3 cv
29.0806 690.753 31.9541 690.011 34.8184 689.178 cv
36.48 688.694 38.4692 687.949 40.2109 688.201 cv
42.0356 688.466 42.8071 685.848 41.1064 685.104 cv
cp
f
116.086 652.314 mo
104.059 652.314 94.2744 662.099 94.2744 674.127 cv
94.2744 686.154 104.059 695.938 116.086 695.938 cv
128.113 695.938 137.898 686.154 137.898 674.127 cv
137.898 662.099 128.113 652.314 116.086 652.314 cv
cp
116.086 698.803 mo
102.479 698.803 91.4092 687.734 91.4092 674.127 cv
91.4092 660.52 102.479 649.449 116.086 649.449 cv
129.693 649.449 140.763 660.52 140.763 674.127 cv
140.763 687.734 129.693 698.803 116.086 698.803 cv
cp
f
91.5742 676.265 mo
90.0444 676.977 88.3887 677.203 86.7676 676.648 cv
84.7715 675.966 83.4194 678.905 85.4385 679.694 cv
87.8066 680.619 90.4619 680.469 92.7593 679.404 cv
94.7139 678.497 93.5347 675.353 91.5742 676.265 cv
cp
f
147.16 669.533 mo
144.637 670.314 142.479 672.038 139.829 672.466 cv
137.708 672.807 138.039 676.121 140.178 675.792 cv
143.115 675.34 145.632 673.772 148.342 672.661 cv
150.351 671.835 149.207 668.899 147.16 669.533 cv
cp
f
41.1064 685.104 mo
39.4663 684.387 37.4927 685.056 35.8433 685.451 cv
32.4785 686.256 29.2041 687.318 25.7944 687.951 cv
23.6724 688.345 24.0093 691.7 26.1465 691.3 cv
29.0806 690.753 31.9541 690.011 34.8184 689.178 cv
36.48 688.694 38.4692 687.949 40.2109 688.201 cv
42.0356 688.466 42.8071 685.848 41.1064 685.104 cv
cp
f
61.2437 442.676 mo
36.2632 440.019 36.2632 480.946 55.9272 487.323 cv
55.9272 487.323 li
59.6479 477.756 62.3042 468.19 63.3687 458.09 cv
63.3687 455.965 63.3687 441.082 64.4312 445.334 cv
61.2437 442.676 li
cp
0 .24 .43 0 cmyk
f
148.404 327.618 mo
127.517 303.25 90.0308 299.708 60.8882 308.752 cv
31.5542 317.858 12.5503 342.723 7.62061 372.521 cv
6.92334 376.742 6.62842 381.004 6.49951 385.277 cv
5.96924 402.815 10.2183 418.502 20.3169 433.382 cv
33.0728 452.518 56.9888 468.463 78.2485 475.903 cv
92.5981 480.688 109.605 484.407 124.488 480.688 cv
124.488 480.688 120.767 475.372 119.704 472.184 cv
136.71 461.555 155.313 455.176 166.474 436.574 cv
182.417 409.997 179.229 371.731 162.753 346.75 cv
159.033 340.906 156.376 336.122 151.593 331.338 cv
151.593 331.338 148.41 327.625 148.404 327.618 cv
cp
.3 .5 .75 .22 cmyk
f
111.732 461.413 mo
113.363 474.129 109.589 485.006 99.3765 492.862 cv
96.9741 488.042 92.7104 474.739 95.1362 469.422 cv
97.1499 465.012 106.63 463.467 111.335 461.811 cv
111.732 461.413 li
cp
0 .24 .43 0 cmyk
f
38.8481 446.723 mo
42.7202 445.784 46.394 444.295 50.1636 443.104 cv
56.814 441.001 63.2671 438.091 70.1304 440.939 cv
76.9116 443.75 82.4917 448.336 90.2075 444.272 cv
92.6001 444.272 li
92.7808 444.719 92.939 445.17 93.0854 445.624 cv
91.8022 447.86 li
98.1812 451.448 106.95 452.51 113.328 455.432 cv
116.835 466.733 101.302 477.643 91.6655 474.032 cv
90.3784 475.979 88.1772 477.024 84.2271 476.807 cv
77.8511 476.459 70.1147 474.42 63.7847 473.213 cv
53.8032 471.305 35.6675 458.481 38.8481 446.723 cv
cp
0 0 0 0 cmyk
f
70.2339 534.174 mo
70.3706 541.633 77.7378 563.311 73.1831 568.924 cv
62.9546 581.157 55.2573 545.622 56.6284 539.838 cv
57.5815 531.907 62.4136 531.098 69.7886 532.551 cv
70.2339 534.174 li
cp
0 .24 .43 0 cmyk
f
96.5415 532.579 mo
96.6792 540.038 104.047 561.715 99.4897 567.331 cv
89.2632 579.563 81.5659 544.026 82.936 538.243 cv
83.8901 530.311 88.7222 529.504 96.0972 530.958 cv
96.5415 532.579 li
cp
f
95.7886 445.334 mo
93.1323 444.272 89.4097 443.739 87.2856 443.739 cv
86.7534 450.118 81.9702 479.881 69.7466 465 cv
66.0269 460.217 68.1519 446.399 68.1519 440.55 cv
66.0269 441.082 60.2993 437.08 59.9136 438.957 cv
57.521 450.651 56.189 454.004 55.1304 461.014 cv
48.7524 503.268 27.228 530.374 26.1655 533.561 cv
26.1655 533.561 li
51.9429 563.059 119.707 538.346 122.364 538.346 cv
122.364 538.346 li
119.308 525.987 105.356 500.477 95.7886 461.811 cv
94.1733 455.28 93.1323 443.739 95.7886 445.868 cv
95.7886 445.334 li
cp
.66 0 .334648 0 cmyk
f
53.271 516.155 mo
53.271 514.467 54.6382 513.098 56.3257 513.098 cv
58.0132 513.098 59.3804 514.467 59.3804 516.155 cv
59.3804 517.844 58.0132 519.211 56.3257 519.211 cv
54.6382 519.211 53.271 517.844 53.271 516.155 cv
cp
53.8003 539.274 mo
53.8003 537.586 55.1694 536.219 56.8579 536.219 cv
58.5464 536.219 59.9136 537.586 59.9136 539.274 cv
59.9136 540.963 58.5464 542.331 56.8579 542.331 cv
55.1694 542.331 53.8003 540.963 53.8003 539.274 cv
cp
64.1646 474.7 mo
64.1646 473.01 65.5327 471.643 67.2202 471.643 cv
68.9077 471.643 70.2769 473.01 70.2769 474.7 cv
70.2769 476.387 68.9077 477.756 67.2202 477.756 cv
65.5327 477.756 64.1646 476.387 64.1646 474.7 cv
cp
77.9839 528.911 mo
77.9839 527.223 79.3511 525.856 81.0386 525.856 cv
82.728 525.856 84.0972 527.223 84.0972 528.911 cv
84.0972 530.596 82.728 531.965 81.0386 531.965 cv
79.3511 531.965 77.9839 530.596 77.9839 528.911 cv
cp
86.4858 474.168 mo
86.4858 472.481 87.855 471.112 89.5425 471.112 cv
91.231 471.112 92.6001 472.481 92.6001 474.168 cv
92.6001 475.856 91.231 477.225 89.5425 477.225 cv
87.855 477.225 86.4858 475.856 86.4858 474.168 cv
cp
89.5425 513.899 mo
89.5425 512.209 90.9116 510.84 92.6001 510.84 cv
94.2886 510.84 95.6548 512.209 95.6548 513.899 cv
95.6548 515.584 94.2886 516.954 92.6001 516.954 cv
90.9116 516.954 89.5425 515.584 89.5425 513.899 cv
cp
95.9224 493.434 mo
95.9224 491.747 97.2886 490.377 98.9761 490.377 cv
100.665 490.377 102.033 491.747 102.033 493.434 cv
102.033 495.124 100.665 496.493 98.9761 496.493 cv
97.2886 496.493 95.9224 495.124 95.9224 493.434 cv
cp
102.033 534.36 mo
102.033 532.67 103.401 531.303 105.089 531.303 cv
106.777 531.303 108.146 532.67 108.146 534.36 cv
108.146 536.045 106.777 537.415 105.089 537.415 cv
103.401 537.415 102.033 536.045 102.033 534.36 cv
cp
0 0 0 0 cmyk
f
89.5425 471.112 mo
91.231 471.112 92.6001 472.481 92.6001 474.168 cv
92.6001 475.856 91.231 477.225 89.5425 477.225 cv
87.855 477.225 86.4858 475.856 86.4858 474.168 cv
86.4858 472.481 87.855 471.112 89.5425 471.112 cv
cp
f
60.7104 448.657 mo
60.7104 450.344 59.3413 451.713 57.6538 451.713 cv
57.4468 451.713 57.2417 451.694 57.0444 451.653 cv
57.4604 449.93 57.9233 448.03 58.4507 445.719 cv
59.7515 446.073 60.7104 447.247 60.7104 448.657 cv
cp
f
67.2202 471.643 mo
68.9077 471.643 70.2769 473.01 70.2769 474.7 cv
70.2769 476.387 68.9077 477.756 67.2202 477.756 cv
65.5327 477.756 64.1646 476.387 64.1646 474.7 cv
64.1646 473.01 65.5327 471.643 67.2202 471.643 cv
cp
f
51.144 491.176 mo
51.144 492.864 49.7759 494.233 48.0874 494.233 cv
47.5415 494.233 47.0356 494.077 46.5894 493.825 cv
47.271 491.995 47.937 490.11 48.5815 488.17 cv
50.0337 488.407 51.144 489.659 51.144 491.176 cv
cp
f
38.3882 518.813 mo
38.3882 520.5 37.019 521.87 35.3315 521.87 cv
34.6714 521.87 34.064 521.655 33.564 521.297 cv
34.5054 519.676 35.4976 517.913 36.5278 516.002 cv
37.6206 516.467 38.3882 517.551 38.3882 518.813 cv
cp
f
56.3257 513.098 mo
58.0132 513.098 59.3804 514.467 59.3804 516.155 cv
59.3804 517.844 58.0132 519.211 56.3257 519.211 cv
54.6382 519.211 53.271 517.844 53.271 516.155 cv
53.271 514.467 54.6382 513.098 56.3257 513.098 cv
cp
f
56.8579 536.219 mo
58.5464 536.219 59.9136 537.586 59.9136 539.274 cv
59.9136 540.963 58.5464 542.331 56.8579 542.331 cv
55.1694 542.331 53.8003 540.963 53.8003 539.274 cv
53.8003 537.586 55.1694 536.219 56.8579 536.219 cv
cp
f
81.0386 525.856 mo
82.728 525.856 84.0972 527.223 84.0972 528.911 cv
84.0972 530.596 82.728 531.965 81.0386 531.965 cv
79.3511 531.965 77.9839 530.596 77.9839 528.911 cv
77.9839 527.223 79.3511 525.856 81.0386 525.856 cv
cp
f
105.089 531.303 mo
106.777 531.303 108.146 532.67 108.146 534.36 cv
108.146 536.045 106.777 537.415 105.089 537.415 cv
103.401 537.415 102.033 536.045 102.033 534.36 cv
102.033 532.67 103.401 531.303 105.089 531.303 cv
cp
f
110.005 515.225 mo
110.005 513.752 111.046 512.528 112.433 512.235 cv
113.211 514.176 113.964 516.026 114.691 517.803 cv
114.216 518.104 113.662 518.282 113.061 518.282 cv
111.374 518.282 110.005 516.913 110.005 515.225 cv
cp
f
92.6001 510.84 mo
94.2886 510.84 95.6548 512.209 95.6548 513.899 cv
95.6548 515.584 94.2886 516.954 92.6001 516.954 cv
90.9116 516.954 89.5425 515.584 89.5425 513.899 cv
89.5425 512.209 90.9116 510.84 92.6001 510.84 cv
cp
f
91.4038 455.17 mo
91.4038 453.543 92.6743 452.227 94.2749 452.133 cv
94.4194 454.051 94.689 456.168 95.0366 458.167 cv
94.8491 458.202 94.6558 458.225 94.4585 458.225 cv
92.771 458.225 91.4038 456.858 91.4038 455.17 cv
cp
f
98.9761 490.377 mo
100.665 490.377 102.033 491.747 102.033 493.434 cv
102.033 495.124 100.665 496.493 98.9761 496.493 cv
97.2886 496.493 95.9224 495.124 95.9224 493.434 cv
95.9224 491.747 97.2886 490.377 98.9761 490.377 cv
cp
f
119.955 530.961 mo
121.017 533.793 121.849 536.26 122.364 538.346 cv
119.707 538.346 51.9429 563.059 26.1655 533.561 cv
26.3862 532.901 27.4878 531.206 29.1431 528.579 cv
54.0776 550.883 107.783 534.409 119.955 530.961 cv
cp
.66 0 .334648 .11 cmyk
f
142.822 398.971 mo
148.669 398.438 155.048 401.627 157.706 406.942 cv
163.551 419.698 146.542 426.074 140.166 415.975 cv
142.822 398.971 li
cp
0 .33 .46 0 cmyk
f
31.1616 389.172 mo
20.4937 381.305 28.23 369.436 37.3765 370.562 cv
34.6392 376.441 32.8667 382.844 31.1616 389.172 cv
cp
f
148.007 395.243 mo
130.729 390.797 116.429 378.935 98.8999 374.301 cv
82.8159 370.049 66.2983 368.377 50.5249 363.088 cv
42.7397 360.477 38.353 360.743 35.3081 368.967 cv
32.5757 376.352 31.0874 384.372 28.8198 391.927 cv
23.5063 409.997 27.2261 422.221 44.2339 432.318 cv
50.0796 435.509 55.9253 438.167 62.3042 440.292 cv
64.9624 440.292 69.7456 442.418 71.3394 444.547 cv
72.9331 447.204 70.8071 454.645 73.9956 456.77 cv
77.7163 459.426 78.7788 453.583 82.4995 451.456 cv
92.0659 445.61 106.417 451.985 117.046 452.518 cv
132.99 452.518 137.774 444.014 144.152 430.724 cv
149.467 419.033 150 407.872 153.718 396.711 cv
153.718 396.711 148.011 395.243 148.007 395.243 cv
cp
0 .24 .43 0 cmyk
f
81.9375 432.933 mo
79.2251 432.933 76.4785 431.707 73.9443 429.312 cv
70.6377 425.458 70.3232 418.523 72.0771 414.433 cv
72.2075 414.129 72.5591 413.988 72.8623 414.119 cv
73.1655 414.249 73.3062 414.601 73.1758 414.904 cv
71.5972 418.585 71.8799 425.07 74.8091 428.49 cv
79.0249 432.466 82.7559 432.089 85.1343 431.062 cv
89.4082 429.22 92.7559 423.654 92.7559 418.39 cv
92.7559 418.183 92.8633 417.99 93.0396 417.881 cv
93.2158 417.773 93.436 417.762 93.6216 417.855 cv
94.2915 418.19 95.0146 418.525 95.7739 418.877 cv
97.4082 419.634 99.2612 420.494 101.102 421.597 cv
101.385 421.767 101.477 422.134 101.307 422.417 cv
101.138 422.701 100.769 422.792 100.487 422.623 cv
98.7007 421.551 96.8784 420.707 95.271 419.962 cv
94.8066 419.748 94.355 419.538 93.9209 419.332 cv
93.5605 424.818 90.1074 430.22 85.6074 432.16 cv
84.4072 432.677 83.1758 432.933 81.9375 432.933 cv
cp
.5 .7 .8 .58 cmyk
f
45.2573 406.155 mo
45.6099 406.741 46.1226 407.293 46.7563 407.797 cv
50.8433 411.047 64.1313 413.807 58.4741 405.469 cv
55.5562 401.165 40.2075 397.717 45.2573 406.155 cv
cp
0 .48 .5 0 cmyk
f
127.605 425.283 mo
126.945 425.64 126.151 425.875 125.27 425.998 cv
119.587 426.787 105.474 421.973 115.486 417.247 cv
120.652 414.807 137.099 420.122 127.605 425.283 cv
cp
f
113.996 398.763 mo
112.988 402.898 114.251 406.756 116.818 407.381 cv
119.384 408.008 122.283 405.163 123.29 401.028 cv
124.298 396.893 123.034 393.032 120.468 392.407 cv
117.9 391.783 115.002 394.628 113.996 398.763 cv
cp
.5 .7 .8 .58 cmyk
f
60.3159 387.601 mo
59.3081 391.736 60.5718 395.594 63.1382 396.221 cv
65.7046 396.846 68.6011 394 69.6089 389.866 cv
70.6187 385.731 69.355 381.872 66.7886 381.246 cv
64.2222 380.621 61.3228 383.464 60.3159 387.601 cv
cp
f
66.4897 365.969 mo
58.0605 365.969 50.3672 371.259 47.3462 379.131 cv
43.2983 389.684 48.5903 401.564 59.1431 405.613 cv
61.5054 406.519 63.9741 406.979 66.4805 406.979 cv
74.9111 406.979 82.604 401.689 85.6235 393.817 cv
87.585 388.705 87.438 383.135 85.21 378.133 cv
82.9819 373.131 78.9399 369.296 73.8281 367.335 cv
71.4653 366.429 68.9961 365.969 66.4897 365.969 cv
cp
66.4805 409.671 mo
63.6436 409.671 60.8501 409.151 58.1787 408.126 cv
46.2397 403.545 40.2529 390.106 44.8325 378.167 cv
48.2505 369.261 56.9536 363.277 66.4897 363.277 cv
69.3271 363.277 72.1206 363.797 74.7925 364.822 cv
80.5757 367.041 85.1484 371.379 87.6694 377.038 cv
90.1899 382.697 90.356 388.998 88.1372 394.782 cv
84.7212 403.687 76.0181 409.671 66.4805 409.671 cv
cp
0 0 0 .799988 cmyk
f
114.895 379.45 mo
106.465 379.45 98.772 384.74 95.7524 392.612 cv
93.7905 397.725 93.9375 403.294 96.1655 408.296 cv
98.3931 413.298 102.436 417.132 107.548 419.093 cv
109.911 420 112.379 420.459 114.886 420.459 cv
123.315 420.459 131.009 415.17 134.03 407.297 cv
138.077 396.745 132.785 384.865 122.232 380.816 cv
119.87 379.91 117.401 379.45 114.895 379.45 cv
cp
114.886 423.152 mo
112.048 423.152 109.255 422.632 106.583 421.607 cv
100.8 419.389 96.2266 415.051 93.7061 409.392 cv
91.1855 403.733 91.0195 397.432 93.2388 391.648 cv
96.6548 382.742 105.357 376.758 114.895 376.758 cv
117.732 376.758 120.525 377.278 123.196 378.302 cv
135.135 382.883 141.122 396.323 136.543 408.262 cv
133.126 417.168 124.422 423.152 114.886 423.152 cv
cp
f
92.6616 393.582 mo
91.0796 393.69 89.5513 393.331 88.3159 392.299 cv
86.7944 391.029 84.6187 393.153 86.1245 394.524 cv
87.8921 396.133 90.271 396.895 92.646 396.735 cv
94.6655 396.596 94.689 393.441 92.6616 393.582 cv
cp
f
153.503 401.315 mo
147.884 402.368 142.343 405.833 136.5 404.495 cv
134.482 404.032 134.031 407.171 136.016 407.655 cv
142.222 409.168 148.324 405.818 154.238 404.408 cv
156.007 403.987 155.282 400.981 153.503 401.315 cv
cp
f
45.4097 378.315 mo
41.6187 376.031 39.5874 371.852 35.9663 369.358 cv
34.2642 368.186 32.2222 370.658 33.9292 371.874 cv
37.7612 374.601 40.0171 378.817 44.1147 381.28 cv
45.8979 382.35 47.1714 379.377 45.4097 378.315 cv
cp
f
74.5171 502.065 mo
74.5171 502.065 63.9995 513.42 60.4438 508.122 cv
56.6382 502.446 72.4331 498.473 72.4331 498.473 cv
72.4331 498.473 57.9858 497.278 60.6528 490.145 cv
63.3179 483.014 75.3433 495.893 75.3433 495.893 cv
75.3433 495.893 68.646 483.854 77.9185 483.278 cv
87.187 482.702 78.4897 497.442 78.4897 497.442 cv
78.4897 497.442 90.4663 486.952 93.063 496.02 cv
95.936 506.053 79.2153 500.469 79.2153 500.469 cv
79.2153 500.469 88.895 512.297 81.5698 515.194 cv
73.104 518.542 74.5171 502.065 74.5171 502.065 cv
cp
0 0 .44 0 cmyk
f
493.024 139.122 mo
468.044 136.466 468.044 177.392 487.708 183.769 cv
487.708 183.769 li
491.429 174.202 494.085 164.636 495.15 154.536 cv
495.15 152.411 495.15 137.528 496.212 141.782 cv
493.024 139.122 li
cp
0 .24 .43 0 cmyk
f
582.828 34.3247 mo
558.822 12.0566 523.463 4.00732 492.669 15.7407 cv
463.335 26.9189 444.332 47.9385 439.402 84.521 cv
438.703 89.7036 438.41 94.936 438.281 100.182 cv
437.75 121.712 441.999 140.972 452.097 159.239 cv
464.853 182.729 488.769 202.304 510.029 211.438 cv
524.378 217.312 541.386 221.878 556.267 217.312 cv
556.267 217.312 552.548 210.786 551.484 206.874 cv
568.492 193.823 587.093 185.995 598.255 163.155 cv
616.117 126.603 615.617 66.8691 585.055 36.4648 cv
584.324 35.7373 583.582 35.0239 582.828 34.3247 cv
cp
.3 .5 .75 .22 cmyk
f
543.513 157.858 mo
545.143 170.575 541.371 181.452 531.158 189.308 cv
528.755 184.487 524.492 171.187 526.917 165.868 cv
528.931 161.458 538.412 159.911 543.116 158.255 cv
543.513 157.858 li
cp
0 .24 .43 0 cmyk
f
471.473 146.937 mo
469.843 161.956 473.617 174.804 483.83 184.083 cv
486.232 178.39 490.495 162.679 488.07 156.397 cv
486.056 151.188 476.576 149.362 471.871 147.405 cv
471.473 146.937 li
cp
f
470.629 143.169 mo
474.5 142.229 478.175 140.741 481.944 139.55 cv
488.594 137.446 495.047 134.538 501.912 137.386 cv
508.691 140.198 514.273 144.782 521.989 140.718 cv
524.38 140.718 li
524.56 141.165 524.72 141.616 524.867 142.069 cv
523.583 144.306 li
529.962 147.894 538.73 148.954 545.109 151.878 cv
548.617 163.179 533.083 174.089 523.447 170.478 cv
522.159 172.425 519.958 173.47 516.007 173.255 cv
509.631 172.905 501.896 170.866 495.566 169.659 cv
485.583 167.753 467.449 154.927 470.629 143.169 cv
cp
0 0 0 0 cmyk
f
499.226 226.813 mo
496.529 233.771 495.143 256.622 488.803 260.095 cv
474.705 267.546 481.029 231.743 484.487 226.907 cv
488.373 219.927 493.152 221.009 499.427 225.146 cv
499.226 226.813 li
cp
0 .24 .43 0 cmyk
f
531.619 226.827 mo
530.568 234.214 534.389 256.788 528.998 261.604 cv
516.953 272.054 515.011 235.743 517.285 230.253 cv
519.489 222.575 524.388 222.548 531.437 225.157 cv
531.619 226.827 li
cp
f
544.234 217.116 mo
543.19 207.653 538.516 200.673 532.673 193.339 cv
532.143 192.675 531.117 192.386 530.398 192.962 cv
523.697 198.329 514.902 193.872 507.582 192.269 cv
499.958 190.599 489.019 192.835 481.466 193.606 cv
480.603 193.692 480.158 194.294 480.07 194.958 cv
479.091 195.245 478.281 196.524 479.103 197.411 cv
479.796 198.159 478.839 202.587 478.703 203.733 cv
478.239 207.62 477.6 211.489 476.951 215.349 cv
475.981 221.103 471.634 227.042 472.583 233.071 cv
473.41 238.312 482.406 239.251 486.591 239.55 cv
491.837 239.925 497.167 240.319 502.306 238.915 cv
505.47 238.05 506.285 227.013 507.681 223.89 cv
508.437 227.405 510.605 240.114 514.953 240.14 cv
518.883 240.161 517.997 240.349 521.937 240.409 cv
526.187 240.472 532.097 239.562 536.412 239.562 cv
543.297 239.562 544.836 222.575 544.234 217.116 cv
cp
0 .59 .85 0 cmyk
f
478.534 211.038 mo
478.335 210.925 481.644 212.282 481.443 212.21 cv
482.925 212.749 484.41 213.288 485.916 213.761 cv
488.421 214.546 490.941 215.294 493.5 215.903 cv
499.057 217.229 504.414 218.144 508.179 218.478 cv
513.251 218.929 518.343 219.116 523.424 219.46 cv
531.843 220.028 540.373 220.577 548.818 220.003 cv
543.064 205.833 534.25 185.257 527.57 158.255 cv
525.955 151.728 524.914 140.187 527.57 142.313 cv
527.57 141.782 li
524.914 140.718 521.191 140.187 519.066 140.187 cv
518.535 146.563 513.751 176.327 501.528 161.446 cv
497.807 156.663 499.933 142.845 499.933 136.997 cv
497.807 137.528 492.08 133.526 491.694 135.403 cv
489.302 147.097 487.97 150.45 486.912 157.46 cv
483.822 177.931 477.179 194.831 471.027 207.192 cv
473.462 208.601 475.963 209.89 478.534 211.038 cv
cp
0 .26 .85 0 cmyk
f
574.603 96.1304 mo
580.451 95.5981 586.829 98.7866 589.486 104.102 cv
595.332 116.855 578.324 123.233 571.947 113.136 cv
574.603 96.1304 li
cp
0 .33 .46 0 cmyk
f
463.18 83.957 mo
452.512 76.0894 460.248 64.2207 469.394 65.3467 cv
466.657 71.2256 464.884 77.6294 463.18 83.957 cv
cp
f
464.208 68.2114 mo
467.789 62.0322 470.382 46.1646 474.994 40.4219 cv
479.595 34.728 485.216 29.2793 492.349 25.3706 cv
494.112 24.3765 495.981 23.5405 497.892 22.7817 cv
525.373 11.8745 562.261 20.9272 579.21 45.8413 cv
583.804 52.5933 586.513 60.2378 587.582 67.7705 cv
588.138 71.5415 588.257 75.3159 588.044 79.0298 cv
587.81 82.7466 587.3 94.4092 586.231 98.0039 cv
583.808 100.89 li
582.173 97.5337 582.223 91.4541 580.748 88.3022 cv
579.287 85.1499 577.776 82.1206 576.222 79.2295 cv
573.089 73.4468 569.582 68.3052 565.582 63.9072 cv
563.581 61.7036 561.449 59.6807 559.169 57.8228 cv
558.604 57.3525 558.021 56.9019 557.433 56.4575 cv
556.858 56.0259 556.218 55.543 555.695 55.1821 cv
554.388 54.2778 553.164 53.4453 551.834 52.6455 cv
549.211 51.041 546.421 49.6655 543.566 48.4106 cv
540.708 47.1523 537.744 46.0889 534.715 45.2305 cv
531.699 44.3228 528.609 43.6211 525.485 43.1401 cv
522.363 42.6323 519.205 42.3022 516.038 42.2329 cv
512.896 42.1289 509.644 42.2378 506.597 42.5972 cv
505.384 42.7417 li
504.267 42.8921 li
503.525 43.0068 502.785 43.1436 502.044 43.3008 cv
500.566 43.6152 499.107 44.0425 497.638 44.5146 cv
491.781 46.4448 486.084 49.8379 480.566 53.9189 cv
475.023 57.978 470.73 64.5112 464.941 68.8354 cv
464.208 68.2114 li
cp
0 .26 .85 0 cmyk
f
579.788 91.6895 mo
562.51 87.2437 548.21 75.3818 530.681 70.7471 cv
514.597 66.4956 498.08 64.8237 482.306 59.5352 cv
474.52 56.9248 470.132 57.1899 467.089 65.4146 cv
464.357 72.7993 462.869 80.8188 460.601 88.374 cv
455.287 106.444 459.007 118.669 476.015 128.767 cv
481.861 131.956 487.707 134.612 494.085 136.739 cv
496.742 136.739 501.526 138.864 503.121 140.993 cv
504.714 143.649 502.587 151.089 505.777 153.216 cv
509.498 155.872 510.56 150.028 514.281 147.901 cv
523.846 142.056 538.198 148.433 548.827 148.964 cv
564.771 148.964 569.554 140.462 575.932 127.172 cv
581.248 115.479 581.78 104.318 585.499 93.1587 cv
585.499 93.1587 579.792 91.6895 579.788 91.6895 cv
cp
0 .24 .43 0 cmyk
f
513.717 129.381 mo
511.005 129.381 508.259 128.154 505.726 125.761 cv
502.418 121.908 502.104 114.971 503.858 110.88 cv
503.989 110.577 504.345 110.438 504.643 110.567 cv
504.947 110.697 505.087 111.048 504.958 111.352 cv
503.378 115.034 503.661 121.52 506.59 124.937 cv
510.804 128.914 514.536 128.536 516.915 127.51 cv
521.188 125.667 524.537 120.102 524.537 114.838 cv
524.537 114.631 524.644 114.438 524.82 114.329 cv
524.996 114.221 525.216 114.21 525.402 114.303 cv
526.069 114.636 526.789 114.97 527.544 115.32 cv
529.182 116.079 531.038 116.938 532.883 118.044 cv
533.167 118.213 533.258 118.581 533.088 118.864 cv
532.918 119.147 532.554 119.242 532.268 119.069 cv
530.478 117.997 528.652 117.151 527.042 116.405 cv
526.581 116.191 526.132 115.983 525.701 115.778 cv
525.341 121.266 521.888 126.668 517.387 128.608 cv
516.187 129.125 514.956 129.381 513.717 129.381 cv
cp
.5 .7 .8 .58 cmyk
f
477.039 102.603 mo
477.39 103.189 477.904 103.742 478.538 104.244 cv
482.624 107.494 495.913 110.255 490.255 101.916 cv
487.336 97.6123 471.988 94.1641 477.039 102.603 cv
cp
0 .48 .5 0 cmyk
f
559.386 121.729 mo
558.726 122.087 557.931 122.323 557.05 122.444 cv
551.369 123.233 537.255 118.419 547.266 113.693 cv
552.433 111.255 568.879 116.567 559.386 121.729 cv
cp
f
545.776 95.21 mo
544.768 99.3452 546.032 103.204 548.599 103.829 cv
551.166 104.456 554.063 101.61 555.071 97.4751 cv
556.079 93.3403 554.814 89.4795 552.25 88.8545 cv
549.681 88.2295 546.783 91.0752 545.776 95.21 cv
cp
.5 .7 .8 .58 cmyk
f
492.097 84.0483 mo
491.089 88.1831 492.353 92.042 494.919 92.6685 cv
497.484 93.2939 500.382 90.4482 501.39 86.313 cv
502.4 82.1782 501.135 78.3179 498.57 77.6924 cv
496.002 77.0674 493.104 79.9116 492.097 84.0483 cv
cp
f
509.829 181.748 mo
511.13 176.627 516.82 169.893 521.875 173.864 cv
529.263 179.607 520.614 194.853 516.168 199.047 cv
498.794 215.387 486.927 179.948 498.98 171.642 cv
504.601 167.905 510.35 176.185 509.453 180.878 cv
509.829 181.748 li
cp
0 0 0 0 cmyk
f
509.713 183.374 mo
510.753 179.799 515.336 175.105 519.432 177.894 cv
525.418 181.925 518.464 192.559 514.881 195.479 cv
500.876 206.856 491.196 182.06 500.918 176.284 cv
505.454 173.687 510.122 179.487 509.409 182.765 cv
509.713 183.374 li
cp
0 .59 .85 0 cmyk
f
511.939 30.334 mo
511.881 30.3354 511.833 30.3335 511.781 30.3413 cv
513.07 28.6465 513.99 26.4844 512.485 24.8325 cv
511 23.1831 509.157 23.3481 507.461 24.1641 cv
507.948 22.3491 507.562 20.5972 505.356 19.6426 cv
502.877 18.5566 501.073 20.7095 499.895 22.8735 cv
499.374 20.7217 498.36 18.5176 495.971 18.6094 cv
495.537 18.6274 495.147 18.6929 494.783 18.8057 cv
493.018 19.3301 492.037 20.856 491.564 22.6318 cv
490.694 21.0923 489.388 19.9038 487.585 19.9824 cv
485.193 20.0776 485.528 22.5737 486.282 24.7783 cv
485.032 24.0337 483.658 23.7656 482.136 24.5859 cv
480.258 25.606 481.162 27.7129 482.289 29.1084 cv
479.165 31.1006 479.09 35.1831 482.398 35.8389 cv
480.957 37.248 479.988 38.8882 480.67 41.0938 cv
481.147 42.665 482.498 43.0186 483.925 42.8438 cv
482.689 44.7593 482.387 47.0625 484.662 48.7466 cv
487.356 50.7378 489.704 48.7944 491.335 46.5522 cv
491.708 48.9512 492.493 51.4336 495.259 51.5425 cv
496.578 51.5947 497.462 50.6436 498.073 49.3696 cv
498.687 50.7505 499.773 51.7861 501.493 51.8833 cv
503.995 52.0327 504.959 49.2861 505.132 46.8569 cv
507.031 48.6416 509.886 49.834 511.818 47.7163 cv
514.42 44.8662 513.041 41.5391 510.521 39.4233 cv
513.641 38.9907 516.272 37.5317 516.636 33.8774 cv
516.937 30.9668 514.364 30.1797 511.939 30.334 cv
cp
f
489.824 32.5752 mo
488.689 36.4556 489.813 41.0103 494.08 42.8726 cv
498.91 44.9785 505.804 42.3506 506.672 36.7339 cv
507.506 31.332 503.501 26.4756 498.09 26.1987 cv
493.859 25.9819 490.876 28.9932 489.824 32.5752 cv
cp
0 0 0 0 cmyk
f
504.358 34.1548 mo
504.333 34.0327 504.282 33.9053 504.235 33.7764 cv
501.283 25.7349 487.145 30.1484 492.525 38.0684 cv
495.987 43.1592 506.427 40.9189 504.358 34.1548 cv
cp
0 .59 .85 0 cmyk
f
746.741 234.896 mo
748.465 242.014 760.155 261.213 756.993 267.564 cv
749.805 281.473 734.834 249.066 734.913 243.231 cv
734.131 235.426 738.588 233.619 745.965 233.438 cv
746.741 234.896 li
cp
0 .24 .43 0 cmyk
f
709.735 229.332 mo
708.698 236.581 712.432 258.747 707.137 263.474 cv
695.305 273.722 693.424 238.074 695.661 232.685 cv
697.829 225.146 702.639 225.121 709.557 227.69 cv
709.735 229.332 li
cp
f
778.01 200.275 mo
780.676 198.806 783.188 197.033 785.481 194.898 cv
801.606 179.893 816.075 161.496 819.508 135.825 cv
823.342 107.18 814.836 75.0723 799.254 51.3643 cv
783.622 27.5752 767.077 16.4277 743.678 13.5801 cv
718.303 10.4922 685.153 16.793 668.79 39.752 cv
651.268 64.3408 652.688 97.9648 657.793 130.426 cv
658.452 134.6 659.165 138.762 659.881 142.928 cv
657.885 141.039 655.756 140.245 653.846 137.895 cv
660.551 164.825 672.967 183.557 694.284 194.73 cv
711.692 203.853 731.557 207.745 749.674 206.997 cv
759.18 206.603 769.387 205.03 778.01 200.275 cv
cp
.3 .5 .75 .22 cmyk
f
685.782 163.27 mo
678.104 161.345 661.352 154.912 654.379 161.497 cv
642.629 172.586 667.305 172.506 673.35 173.171 cv
679.499 173.845 679.575 176.226 685.303 178.136 cv
685.782 163.27 li
cp
0 .24 .43 0 cmyk
f
747.944 170.595 mo
755.331 173.439 772.731 177.818 774.647 187.214 cv
777.877 203.044 757.741 188.783 752.415 185.846 cv
746.999 182.861 745.569 184.764 739.782 183.03 cv
747.944 170.595 li
cp
f
674.79 154.576 mo
676.35 161.216 675.756 170.176 678.795 176.232 cv
682.692 183.986 693.774 185.261 700.928 188.424 cv
705.809 190.583 709.913 193.792 713.969 197.214 cv
712.928 190.347 709.897 184.435 709.393 177.522 cv
708.827 169.722 705.758 162.288 704.204 154.627 cv
700.172 156.457 692.917 155.658 688.42 155.684 cv
685.555 155.702 678.747 155.723 678.157 155.531 cv
674.79 154.576 li
cp
0 .05 .52 0 cmyk
f
724.745 159.443 mo
724.743 159.389 724.739 159.335 724.735 159.28 cv
733.327 161.755 742.088 163.786 750.336 166.851 cv
753.04 168.326 756.444 167.393 753.198 172.927 cv
750.475 178.925 747.231 184.64 745.5 191.126 cv
740.725 190.56 735.975 189.049 731.231 187.405 cv
729.944 182.244 727.997 177.261 726.551 172.05 cv
725.368 167.786 724.987 163.821 724.745 159.443 cv
cp
f
708.241 173.126 mo
708.772 180.332 710.85 186.569 718.389 189.112 cv
735.68 194.945 737.274 167.252 729.522 157.812 cv
725.616 153.052 716.928 149.621 711.227 152.968 cv
703.268 157.639 707.735 166.29 708.241 173.126 cv
cp
f
737.438 160.637 mo
734.801 159.761 731.135 159.392 729.049 159.454 cv
728.7 165.209 724.807 192.141 712.411 179.103 cv
708.631 174.908 710.344 162.405 710.188 157.146 cv
708.118 157.687 702.387 154.251 702.059 155.951 cv
700.028 166.546 698.811 169.604 697.961 175.945 cv
692.84 214.164 671.106 224.869 670.147 227.771 cv
670.147 227.771 li
696.237 253.563 763.411 243.653 766.02 243.575 cv
766.02 243.575 li
762.69 232.543 748.311 209.99 737.881 175.469 cv
736.122 169.64 734.788 159.282 737.452 161.119 cv
737.438 160.637 li
cp
.75 0 .36 0 cmyk
f
674.385 224.272 mo
699.991 242.622 751.829 240.396 763.458 236.998 cv
764.002 238.226 764.491 239.374 764.913 240.446 cv
764.944 240.525 764.975 240.603 765.004 240.681 cv
765.165 241.098 765.315 241.503 765.458 241.894 cv
765.5 242.012 765.545 242.131 765.584 242.246 cv
765.743 242.704 765.893 243.15 766.02 243.575 cv
763.411 243.653 696.237 253.563 670.147 227.771 cv
670.397 227.013 672.026 226.016 674.385 224.272 cv
cp
0 .05 .52 0 cmyk
f
668.315 94.1807 mo
669.463 99.3516 669.897 104.599 669.87 111.051 cv
658.639 107.705 658.54 122.936 669.043 122.344 cv
668.278 135.874 677.545 147.821 689.006 153.418 cv
694.467 156.084 702.395 156.459 707.247 159.952 cv
712.415 163.67 711.958 168.68 713.977 173.112 cv
718.686 183.466 722.002 168.655 728.362 164.379 cv
732.684 161.472 740.602 164.813 745.362 165.012 cv
751.622 165.273 758.112 164.421 764.159 162.757 cv
776.704 159.306 780.295 146.72 787.133 136.528 cv
797.965 140.974 799.534 125.359 790.497 125.823 cv
790.706 120.813 792.112 116.388 791.534 111.023 cv
785.696 109.115 779.25 108.695 773.217 107.52 cv
752.239 103.431 719.008 95.918 708.577 74.0957 cv
708.577 74.0957 703.333 94.8496 668.315 94.1807 cv
cp
0 .24 .43 0 cmyk
f
748.938 120.223 mo
748.014 124.561 749.452 128.539 752.143 129.108 cv
754.834 129.68 757.762 126.628 758.68 122.293 cv
759.602 117.957 758.167 113.979 755.475 113.408 cv
752.784 112.836 749.858 115.89 748.938 120.223 cv
cp
.5 .7 .8 .58 cmyk
f
695.709 114.238 mo
694.79 118.575 696.223 122.554 698.917 123.124 cv
701.608 123.695 704.536 120.645 705.454 116.309 cv
706.375 111.972 704.94 107.996 702.249 107.424 cv
699.557 106.852 696.631 109.905 695.709 114.238 cv
cp
f
729.952 143.817 mo
729.454 147.455 725.821 149.963 721.836 149.418 cv
717.852 148.874 715.024 145.483 715.522 141.845 cv
716.018 138.206 718.024 140.59 722.008 141.133 cv
725.995 141.678 730.448 140.178 729.952 143.817 cv
cp
0 .48 .5 0 cmyk
f
762.95 140.152 mo
762.417 140.58 761.745 140.922 760.975 141.172 cv
756.016 142.808 742.594 140.797 750.788 134.934 cv
755.016 131.907 770.608 133.984 762.95 140.152 cv
cp
f
688.307 133.748 mo
688.754 134.353 689.372 134.902 690.12 135.388 cv
694.928 138.516 709.749 140.154 702.694 131.621 cv
699.053 127.22 681.907 125.044 688.307 133.748 cv
cp
f
704.913 213.39 mo
704.758 212.94 704.733 212.414 704.87 211.785 cv
705.54 208.71 710.819 207.642 712.266 204.988 cv
713.672 202.394 708.264 192.731 710.624 193.084 cv
714.002 192.604 716.276 197.519 720.153 196.734 cv
723.293 196.098 726.116 191.805 729.606 193.165 cv
730.586 196.653 726.252 201.599 728.905 205.047 cv
730.145 206.663 737.502 208.887 737.627 210.963 cv
737.758 213.035 729.612 213.344 728.157 213.988 cv
724.833 215.465 726.805 217.977 724.778 220.938 cv
723.817 222.338 722.241 226.007 720.096 225.118 cv
718.295 224.376 717.87 218.193 716.704 216.72 cv
714.438 213.855 706.071 216.72 704.913 213.39 cv
cp
0 .05 .52 0 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 15.0.0%%For: (Elaine Leong) ()%%Title: (cutekids.eps)%%CreationDate: 7/04/2014 6:30 pm%%Canvassize: 16383%AI9_DataStream%Gb",KGs`7gdeEVBp^ZgBMF,2Pm),Q.72,k*`V!V0#)HeGMs#?bGWu"/^ZqD$P"ZXQUSHstnR,-gG?&d.mG5+YQt^[.j\#Iqe+e,=%i?aYii?VYq,a-0aio8G0U#-pXOj[Ok&a3l*$sbfjZ^,Vo]TBENc#r9Y>bffNq=W$!X&8HBm;/QOBXQG)fl+iU@]t#B:Pt"<I^Ro)%-]tAD932LZkoK)s:oX;F7]TSV,j^bM2WL$/IFY3=k]Qf`B'4967P.,ZVaFk>^smWa]D)#EGWom(59dANF$-6^bGn90fcL+<8M"F3%[DX-b]VV7`RuTDZbFq\645A!gpIZ;Mr?p*Irr%4cTSGPW_]8$*'"Tc>%n#U[N^CcgqG9rm5`&;jLO)h85VLs3Udi*82:/GE:bS=;%Eii.kRsIrL?n]R>Hn!P9$nL,dV9YAbf\%t*e*ct)#+F0clK&LMCq(&jS*2.Ldl"de:D5l[<)7;.dkGI(Kh`ff>3Ie2?HX:>N#G//%ZZXWkhoWl1ksP&&K7+_V9HVLulJrEJENr,JBI"CpA;1+\#mQlu.f3'FF_%M,VbCg97+6-=dudpY`KQT,m\o`kOW=M+(#$H*\kW2,%"t"COH9*0tYXs-]%CnMK#Cku!H5]I]oQ3?&>n?d`E?-1=]>6g@P:6T=4:H"-]tRN4*_3=L[4(l2i?_uo9Xu?tPQ"/0`%[^YjVhNg%P\7LpcG,a?(Hh%-0>)@okD1,m^KU`4CjW)o0/PJagZuprc)Y?b;-f`KSkac3B#,NX(049S_2'8PXu'uoEJA<8;TbBR1F9tQB-Dl`%N^VZ!Lc\YaD#eS-$:ohFXq`M`i$OQ3:G+.<?a^:6BBfAgIo0p(>/a75;?)H-koF!nK-S-6PjP7JemruNR)o*d`GW(.'h+kSMgk%U%9^qQK9f06Q-(DGM,X`.S27_IW#lZ(Qrnm0&qAXn8'1Tk"BatVnQpNBeXX/c^Fo!=Ph?o=Y"<aE2Nr<.f>3u$cED9^M*L$%YiI@f?%Uc#]T&14Y5X^BKk2Z75*#tJ(3,^&oV^=$*/rn!&-cW]>-?S)(+WJ/g'c;E\QUi'I:OAtc:hCnHq@CPO2?I^PH&.qX.>a2okfrqP)%o\M!MC6<X[#\F!>FuV+_0)Q2^(QE/G91&5alHtN-D7B;bDtPL1Du0.e`bU;dC"U@NN^i?1\YMo@K,L%eOjIc5D:4he!UU$SO3kJ<%i@u1($Kc;@`=BtZfPabB.ePYbqLp?]84-n!<@R\0$qF+'nh2/_F6LXPIO*!fIAc,W'ad8lc0g;P'eQh;7+:;aj_U]HV.e>m1;r[)%11@2B$i-mu4$TFj]1n+`s82FWK6gVa(j"X>5B0I0Wa0qXh.h&$48&3b_G[u#3:dg(X^[-u-2,YKq^'r(9<+]cgJO<G@&d=C5+FSD%U"/]Infb]jrs\lgrGC8]ADd&eQ`^)[=23I&L5,*''^Ol!8[6g954h.K=>.)qgtiuq\+5fU'T#<XZ28Ao$q^rV,_GP:ggt/N#ou?n%AsfOL\Kk,+YF""WZ/n1T!LIZPa#bc%qc\hMX4t?^*&eedhQVWnHD@NQDFOSMb]1EOeG&9l5bg-7%`:)bpkdfXe9h*%oJ"RcB8b;T%je>ak?<0Zq'1=tObp8oeLU"SDc5P5*]@Q/C:s2/0eZ"e5rmA2ua0/2U%FdA@e4Htm=M"1!D:G$DBbO"'`MUskFtO0Xo;FU@F\39+%/7Xmcahh+mo$PkND=V4o?PZ[h^F%MI<o<92^*"Ff^Fl'uj28h#;5XT&]_$-E>,Q")r)GE$#c<l@kbhdGeLj'%M:EW0CBG)/hjXIZ%2;N!^^C=!(+*Uq%UqQ(?rs)62hLAkCXAm@p^Wt/HPnN_;Yr)r^*+:$r9:]c6oO-0e%E;3l&d,8Y=h!G#d>]4>7L\6Qn(.2*S`3^m%RZ*4I%j]!l&#.M?<'$jK=I<$,WAfjIF$*8;!.5?UQJX#2@2;=j#:]beK34WYgO>jXJ*GBfpbiR!KKnIIbRiDWP<,lU8M?C`D3j5P%'4-t#\BQ!\Q==5,a\0W3q9"\23b\m=4Urn4iE[=)LM7SF27foQ^Fa;fGT]qa:YcB0B#mW[EcF*>bR%!JN!BdnGR'T,T1ZXM:8Pl?%#mK`>%b&C<9VDDD%/IZQ$KV3s6S8gaN`&ThTtqn7:l[%I-k0Q<,id%rE(]ShVQ7tbii._=14XVDJ6U:okDAlB_fY2Sds7ubVLA,+%UXK,n>UD6J8BbA:38:pOi\JJ@FO!%H33:!PA"%a<EH=&#*n*o?IdSrhFrjRU%*W)/A(iPYg[.V<SuHm_`8oMco'K14kC9UQ=jSh]%CCGfB'?g;ir*mU]18!)"i>igI6tS,<"ujR$q0C_e[Sf>$99c>(XdEpXnqb^D:ULnr!r@_L0\ali0\8u0VSC4ONK44Rp;T71qPA);%f\2%ebp@Eq=J[&q.eV*T%)0hZOWIGF@$7#h9oI'O?f,0c>-S*W7/Hk#.e%b38H6HZGM(Z@Dq1ffn>b3NaV#[&qWDmH3:)FTFU\7G%pfL+WCnokT'^O5c&M_+5"RKg/o)CTeFajV&@`#OJE"CpXD4MJ9r_]XSSJ,L2Jhm]'9oK\rA\U=0gY="KY:Yo>L\6-A(7L\aLnRoH%#H'"[`DaP'VS4g7&N^,G%T<"8*+]#0HqZdA,G7gI5]NLoLt&sR(O(]Ve]jT:5h/J^c]H*JM]6H9R*!PkCTh3Jd^cITS[daYs0Q>6%TJ#!j>8KLjO%%9MJ&Y?<:1*e+KmI[GlG"tMj!E)kX2*hpPfT53WH.d*&t.ApEO-:GU`L?ID\.#O%I>;opR*L&1B(@iH?<:@2u]4H%i.%Y&DmYt"\-6@\_uH67=0Z#p:9BiqWL+[t%D]Y09?/?i<PFm)()-24S[;N_S8ncL!lY8*n+CR-'f!D)PrfdQ5@5PPj]'#)"]A%0%T*qIIk_@uoS8c&T'&0.n)'i"Zm.hTVSs[<Cj0X4s^q]SlSY%2,0dhfjfYK;II7AGMm&-Ld;G&c1"W^tD\s5(u0u7G^%.lE"7SIp\%[?X4adV`*D,p*rAmM242e/[jY.Nc]2O8S4T*ED\*Dt^J=YPZip^Zq.tE-i)TJ]fIo6hu:KU6U`D>,,J4>J8(1fktW!`ruA\Q^#EW%!Cg%Pr5Pa'?GTsD:=HLaZ#qa8PG!tfCV_,e2.uf1qBna]'a)4j"4I7NCWkCu"EA<1B4D#CN<:=Yd1b,t<'U/4JFMX=HDNM`B)PX3%jE[S*SK<@PrVsh^p*/H9>h`$6(Pu>rcp?%%;gEB))CPB2FO[l`@MPO2(XiPB()-HXY_*ebHG*^*V\C^Y^Vf(:j"po<&8pTM"^_:u%L/uK1B0R^[ome)MVGuj3\e?iKTt"Dl0"?RB*lOpTXHrA3U?T(ZFh\cW]%fKn,A'`LfU?+T;uNWh/LI3b#P*t9ct_'ZOcqF2eD!4?%55QWp0d4K298[>#-=UF$gt8$N$2c`*-=YsCrE3\CDEN`(P;7ql9Z54N2f)aWT9hj^C!ZcMAIt]JK^$7H$mI=5`6@Niilb]DpZJlc%V`!J.p&<T1LmV:lo0S6tTFdh3QNY]1:%XggJ)`kO\7iYs'ghi(Wa]9?nXhlZ2_9Un^Ln]X.5%m3S''EO^jjg086kdTg^>:f=bs&I%'GE.g`]H1-nDAI<a$^Qbn%8E.pFX@<>Q;'WY2YVFr6sm/l^Tg3hDs^7MbQT+`!(u:?7Zk]7C^Ik4CSBgr:>8&;:hAfCnjkP`2LOu%IUh*X]:^Q!/q*Bb7"<bk3PX^)`7MKUAe@m#?I@5hE9CIkrB(*la+FQX!bs?\+p:k=\8s9qjqcHj#q3R=(`Vk1bGS]D539&BF8KZ(%SmnFfk2L)-SjpXs9R-/1'i2SC=[Pjqd_fW*5@J>\=7nBsA=;nJT>*a`Gd'NiG"><Jnn[ZT?i6@aQ="Ed^$R$KfC[9f^+0h*?.T_+%U;+)=rN+K:o\Xe;OGF-^d1s8L>id3iEYm%!/fuNM%`e/#r$%d%`Fs^_:\a4R-Ecor#<'?s76\'jr*h$4>p*56AcKD@+92$*+-',-%n3=@W5:.`DG?ug7T?lcYoP1)P?uXT#ra5\pDqRU^fk?G5:-U\q524bP!/9'QmJY&fC1A-d^@@QUa6oR,-A)jO$2&X^m&P,Od^YjZ%"/(:2]c%,Yhh-mpk[F\eWU_Dh<$)]4=6&<2Z(nmU1Ku9/`+$"Zhl4S(AJO$'LD=$Yc=P8h`'k^(>aNFU9U[%mr?6qnj!S!hGu/E_%]XE;q^6Z!4U2E:OY='N)-Qfo\W;Ps_&$!TeVfC\lH,fDuA`',DZ"/]DS>EBja%6'NZ]mZnrcsebHIL3HPlD1Fo?WE?Z]t&4jZH2h%QtIjtasR-UZ]r#Cq0BI:n)@pt!e0P=ogn\p\3SsLC:3TXqF/U%lg(o*rH6OkQ&EZYf1Mh'GLfuIH+hTTf#It#Ii7-Wr\_^*pdS70%DiuF%]GqH`jpoff3cbPj^VOOM+T6Hn;Q`?.W-<Dt\<HE[(c953<GL>-DAmV,&d%I:4%O&"8q>.FjOl9(,6[LQ+#.PT>N_euNb8*E%9M@'X*<c2L5&XSM/+GmdVJ^=ROLXhi"CpK(O'87jVjV]s9G3]p&.eRoP$>5O3ieTS"JHF+#EbIsr#]rUj+5i:jOZ.!NgbER9\@oY%g@FDr>?#E-7U&jUKnD#LBZiNl&deS#g+n_tbbHc]BZiNlnd@ljVYd[L$)%<?:Ndd1qYc"7b5%FXPDff>7c@[1`%1k+PLSb(Gf:sA%2?NWqNIuS__.c5XDmnS+5aBtAV>2,6ACh4(O@L3"7(t2F''iK.^Y.K=UWtUnqIf>.a&dcEOo1SK=uSI)+-V)i9oe;TL$F0EOo/sj%F&8rs2:[0k/JbBTmee>Z>]9H6ZZK>T'Z0coRCOsIOh*(j.r]!0(.0HWY0^Wi.F#&]q%;6$`(ZoLYEYG^.J!YFPSpBtk#]^L,l<%g%A(iYGKh9=lk6IR<X-ElJ`r>dZgQ,pF89p^6mnl:rT?[M2K4HQ0qjM&35lZ#6S_IPTJM:s:jVY9&muis-q\&q20+h:b^"M]N]'Jj$%#,Zm=?hYq[6:[B]EoWefeXCPDW)oK-%p#(p6$#9SkP@J^4D90W5:A.Wci'N(8YWa;2"uXbISd\Di$\:cQi7C@gQmMd/]NF#!PF'_%qG3qM_]^ck/k@C0#B?-2g69C2$2c$jIB#^N+4s)"Wd,jT706q]#5_CF!QX$I=h!\Ja'KE5^MY?\!TSXb8uFDOZ7m#WMnT5WOMa'V%Uje9+:V#'<,A5!(?YK7B]!MX]l-fC`,N"F,r9f^Ch'5-,fFi?$aEag`RkBS.E^F%541l9BrT,K[[La^gPK@h$.[E-7lAJ+X/r-*G%,@8RC0#buM%`;WAf(Os=?`07$`oXXh0Z8URZoaOJl12>^SW6CWEQ"F.J^OPV2[Q(rKtj@7jg3TPnWW!#:gZ0\?]%L&rO4g.35>:J%VkEN"?`oEGA@el[r&fEf&3oLq@rhcj*^0ES"R[gAH=n-#0sK&<[rZ%W7klrDUDYX)W8*9(X2WW;SQh"nC[n<)Mt,KYs+S-GA&X-;%QXY[;WOR`n&iZl$L^Wk,YIB;qjR[,E&T=Xel(=!JjCms;r?4ARYE@M*h.qni.GVJc'PF3+<kP;sE8')]RQF5bVePQUc(1`a\K5gi%l1]:g@M1<l<Lp#El+hU=N5/!ieu*S5N/i_Nn3b[p_;P3Ng])$/"b3-HpG(@B^X^;5dj7e"'$'noZ6ud[Y5c9F!t*RJ@iE\l,a76B%oM=54"+'d^YI1]OZ#mCFOA1^HYuKt8>Dl5"8YL4]h&`>01>d2[`s@Curr-aYIT&8*c0'bdnQCN07;5F)`PrXd5<9u-,AD:;?(R7P%SD$tM_Yi@iMVmL$gMnZh^[ZNWNL3,gk25!dDWP3b43fQ`eOcBQT"`,%oi\pHRNf"'icfBG8!dYmYFEQ7LB33d_GQJ#qOa_d,nLuG%H4[(AI3nf`bLdems/tgD+0"_%btY;.1U5rU$?HU@:U%(QQMne@mjQg=O_EkVD)U\Y$u!UjV+9KNq4.uSg$Hi5I9uMhZml#KM^?s%%lecN&b_pCh!X^jsou<#qI]rWTVLK%=-76i/^'5Ym/+FrnK9$Djs4jfo`rh5=CU$u15Na,?s%OsdIrSa0(PQf1>o"6UH37Fg(TPf(%fe9AK@d!p<oi]M+C]4pKgGkW!lW1pZAG(H.Fnk(lhY5;M]RKG[9&b"[8R-:;o,C:kd@%RM@UTRLl^j:7?LE'%W5,U<9)6uR?BI9C%4,b"\=^7F!I12o*K.pR4-T(KDlF1(m4O=L5\qrE$-5bGMC(Fbsc),FX\4Pdtn,3!8#=%jtK@r.Qr1(+^]/h'(M#:*d#:*fb,AqOC%5Va[piTSemZgH`MR"ea]\s)00amYMjRZ4@u!`n;?2YYn\3$T!d%J!#UC;nCJs.dhA&XT]6ID8&e(0`LRom9V#(dA=S1HgOM!QV<O%]m]knY1Y=Il_VKYma##[9qC9H>i]BoTS^L34]A^Z:W+O:561<JY#QZ@g7EB6cfV$fPL'ps_;r4Q.5U.`T?^*h<tn=-Tu6VZ<-4h^%MTP/?e8Y97?&RScH6=H<nRna;cZmF1(AeUP*Q1`Oc0G[c6lfJOL!"o8OcA$^/2(VH>)`b-B"Wojg9d7;K-OE%^)?H(*up+H&i]^G%85dA0rp,&S,X/HY5<:QU;gRX!UsUSt[#/iX>\<roaC9HcBW(ZP\bG1t1g+KPIF4u8&0cK,6rGpUr/401r*\JP'2Mm/jIk5'^\<#-%M(7W,R@hR-]'[\Z?EmhLn6:bJ<nVCSSGXo]+(gG]C?7c#[&W;/UJY;kk_Wn!Q.RIAY"!M]Qq5X:iVqEHrXiF]LdJN%RG-QVreFnD%_7i$"`!al#(In9o7"c;$j'a,XWD1Pl5jMW\ZS<RcK`(:kK7<qdr*Rq6&-#9;k"UI$7[*Q_Su:00a%eU+Dd)\'9PY'1Cs\dSiR"3$%T3%0oI)sc?#t\9\s8UtOg7pAL'g,pQ[M"<?ZM4smFbY_=d%>(dq:[pGP>BW/c4R5$D_J1UY;cH[o04AmdreDY^*#/V_O4s'=$Lr@%aq50d\+d_9V<fMMs+K`8:g\#?e>oUm9%6L(SRUjK\hD;^;l83MPetnV)HZpV=*4GT]&-D6L\)#fU<u!n9+;N_ANZ45'KndJ\So26%BSgBob@bSd#OJd`GlLW6Pc=K'i<"3P01Z82=@aus`X-`#9hWVXZ$K5_FWuph<;h,g1AVY-kP#2^f;A`-LUdB`(k=!LSo*!#h+D;g%gu0&fA(e,[2^];^bg?&W/A5fqq6,6q^FZQ@`2MS.m_)JH_c?`Ed9'Mqs6H#_J:Sf@YL<qQa7n(e,_,Z#844M!C<^Kh6u%SWKg9Zc%d;OdJ5mdS_KpgTul3;(BVZT<5Yl#i!hj<1u<PUo*l?>9Q6ZI(b,NI+uqa5\`m^0L"j!.Ub9m^<YFlB!H(K7n:J!gL`>0:^qXII`/%G*<i9Dea;9hcqa$4Q?*6_P=SG(OsO=W*sV.)W#ACg@,XucP-fcBB_fj'c1tYrsYR-Fb&0NP5bE';]hE9pegOld"SG$<$O5S5Y#RF%(aJr,(rNaIW6kFk5h(U;5PupShk;.:lbDk$eAmJn47jeCf`[.cA\(?E";@RV6SW&+n=sA"_n\N\s*\W)..*u-_iMY?kX4i001#Aq%j:b2"%l>gR6Wh$^bRBdV*b=nOD^@,q,=8Hp:bQR>>/ej`!CBsW1peI3#X=JS@&l7(J6C"2(a_V-SfW4;7bdnjUCZHG%U6Xr6`gOj%F)M`5)C'#Pr2@A?"=,(W>5d=KT5k.f;J>V(/k3*"bQsr\O*Y9OEC&]Nl$8!uU6e'8?MXr@/DdcY!/(8B]gNPO_iI9t`ee(A8"7:N%c@C:6fcL+<$.&qhG"/\A4].,T"e4CHF>0h)M`W/QDrb%TLhe\%4N#]krl%ihg%9k$_+K1d%lX?eLJZ,IqeO(H1%On^'+'Gs1b:fA%K+;ilL>EqrelrY];R*>=FL"EhG5.2I?.8UtbAf\o;*_(/,SPnu(jltcV8eH7&jmH26jho"'03gi:b7=8BG%28T`sf/bGFO`5t2si%6n)oad'bW1X$qp*n0>m\?m`@l/U3Q:aDE[081gQ1s22Q)K->=Ang\[4%mLEi$&>sBlON@iGO1o?!sk7tTM\D;</TSA"+D1D*JPY)%Nfar`F;Q1@O$h7igVFl`%d)F2?k2P!PiW@V,W1Nbamc'sS@"(.fBoj3LEGLRK1sV2$V\+sq"MC2c%XEn&JL<hga%t(2#6A!>OALh%`A%<F'NlGm*&G*V2:j7!COWs\.s?dXMl3Vl^WDqa^V\r:qKG.p]m.,1\#fF$M,l:$:5Me#SpD&Ze22"RV&kAak')\o!rVorR$>:T%!5R2qX+DOl,CaGLieIO(dp`$6<#Ch*(hMI,=U@2o)9$0h?%c:9/b+H0G%QsC+iZUm_-FQYDkE?,m7sFb4tUKUGWI9joH,VOJA^Sk%n:S-PZ_9m:fT%J&^gUdiG.\t7<#_YaIp2-!qUHPXWHBCLSjWVO&c8icU2B[W&X\=-=bX2p;f?@Enb@gCpb029)R:L2Rq5&5%H?5.%s6$:o^im+`qCU2=,9eY\\7d(P3":I%;a&XiWGC]HgCZnap!>?mA&Id6lDS.(AuUk9ZuhG91icg[KiYB`C)F!c2,fF28_:1FL9?H%%U%Bqb5+.:gQdT11o&GGI^JVM22*,7gmeZ+;rDr#hC@NbACmhMc$!*f,gd$iUR[m'QnitF;ONrU,r:@S5:9es#GCDRicOTO#Kgr+D%r/j2*%FmbNe[T;gm<7UWFGhkk$p4Oe-u8[e1V^SdboX51kEW#R%U2'G@YW_Fr1bYQMfn*?GgieI]*81@r+t">&u-k(kn^=bc?)4*%i;P.[57t"=i";uag23[%A2$ap&6d:W@2SW6`9N>qff:g*qeZo>Z)V\rYX.%IAI.l,d[_FY^H8u/3$:sXFqjpQ-@dA5;7B?1"+DGs%@6AFo-XmXgBqPFsMoTR]!jsBX+%fqGKJOA5dQ9c@HAO?045FLX[ogE/(,,U(6)3+M%Z*T&iIK-1^\-,Q*;fbZ')?RE;`q,Q[AC):%fB>p?N1MWP^D>Qo,faFK9/h"&f?6f$>Fi)iYuOQg2_btlJrISIfq',,<.2LiTBC?h&T#WGXRQCLn3BqL[K7m>'tdl!5,UkI'/enm%^[AQVeN/O'UW*>ShsY`Wh+lt6f^AMdjcLi!rH=si%;nNOH=P9>?V^&3>./qd&f'\3m.cDnPUff(c1;74YNh+q<J*QKBJfj7(hUL4%UdQ/uH]=U[=)M&:6PGPmeK3_NG-fR6l;]@CYLHs'J9S>%mVBZ2:*SN]1jUtq&e(F1#PS]cM_/2C9aF_@M0?(0#[]74/2h4!g6GjN%>3s^V.MJ>3G^?.@B&pW(:a:R65aEGdeYg@rE>]5I[rue/IMsO*H9HHkV.(0e([`71E/]GsAlV`2QmjU%^)H#]]i4,qWr[.Rp02B%%$p"_UbO'<3!Bk2o>gC)YoKGE+`%V./V^Hg<oYnf[GLcOf8kY]K2H#Ib48G/u,g)YmX$s`;H'jB)Y7U_7.s4)(k'HgrCn3X5h'VkI%<@^dI5bq6V-%U#$1f7cW6Bp6T#!mLt2nRU`O0?b=,:EQn1;B&;7q1*Ml;pIZDg:DV+G(P>rDjTn%dbDO_4m*l+-MnA:GWtW)Z0<>%d<n(gap9+M.\%ci5lJ3T81QkF+VZurPMiPQ\n-q_`\@-Es#gJh=%B$S^Xu,jW`T1Z"=)^dUf&j)rYagJiI6-m;Fo.C4fsCfh$A[?%DftU(;=Q0f[QkU4IgEb&/TFJH9#=EqiE@n&_kM%7QZVn`G-/6,HtucYg53P$f<5FOX55V8op0`q\*P'IjUB?/=^KO2ph0`rU)@^%%23>267X8jZ=!W;'.IT=dI*a^h(a0&CgO"6'l)27.h!dJuL@89_lSb'uOTP)RgJ@1c?q2;]cd!J0*5IOJUlFNG7&F(tJpgX[QD6P7%;RK/he=4,RV4fCV3UBP@Ne7uT)Oho:F580O!unJ*:WC-pc4'')*noC8nSCEJ5Iq;q*q/Li3[B`,-V0+X%41rE$/HKe]j_Y@8gcr"%NkTM_/=+A)GhO:XY>Oa&X&3P"^65ZW45[>m[G%3t(:&-F7'9\Ti:A^4f6h6\#J1Y5oJGU(@0??GpDdEmBir>-`1]%QC`/1]A%T!=%<`l$NJoLC/AERVT'fCAg&#@r)4<D=&r@SD:it4;0SH**QE?&7de))'dbG)R?\.4B^k&u/Xa$I(Zh84Wt_"6+'M6\9[%3IR!qDb.q%C>YprrS0A*Z,KeG<Wb"L4cK"%$UI;RLG"<DQJo"6X%MuBD!J(Ch#\.bc.p5@"T;K20uK+m<:-g\\5"V2N*C/6dHV%eoj1/j8(aCj%c?AL9NC;Zh\TXbnD!G7'(ChqpqGm)fcMc1QF#*+#aJ6ra7)13pDKL`1E%TU<JUu_B>_Ws5Un4F:\#Ved44KB@jB$XNTYT%fG9[$"%VZJ6@h&a<JZ=C@MRaT0Y_m<;]Id-g&?`nKdTeOI+LXD(PD_j6hB--?bBU68/3jbfE:hkq:/TlSn2n;;N:)qrLDWSgI<6r9S.BG6e%OVAgliq-_06TnYk4WQ&aj+*11\aiJ*mZU_C3jnq3?p=iJEkM*WOg_5RH+^.*Z-JciM.kLTe0iV0qp_()9b,.VUAEF=MdiTNEZW]o%XFf9.&0(dsha`_GjLj>@[C^)=$&G9J\_:kj2o6p&Qu9<$H%O[d?IZ,UBCORnkNAg^gF'PN0"`*HkuI!sPrS<[83rE#/LN_5*M)O=%I!D%RWfPha/6G6,lS68S%p/BW/-TQ1p=+!!H9DN8g6"K$/8N5U<?#&_qNmV^\,(jC%)"`^k0/7Srcs!Ya)paO9c3.5\qcrMTm%%4%)>Xh.*R.D#R63".-LG45CP<7>:[&3rTL'QCg<?Z1-53mpoh"E!=G4ls3J)OM'"r;)`EB$9.lN/OC,E]rd.C56d]$"&Iu+[,It',2%7B.A5*AF25J4bf+kYeIO6<LHqCo4qlfP^h.d&g6Gp@8?KP(<D99;VJ1GpiJGX/-q5'WjB+[pmku@%Z0AEZ0t?Ms5>V5*rt0D'\Iq%-gsG=7k`l1k%1=\^WF11CF-$%b)RoN>H(qRpIlX4T%#\Q7[f=^KIr+Re"en1_drYFmfBfW^6uf?#\fJN$anUT9\!TJR_.pq.i7km%"Dfu#.8Bn<>((M(CoEDu:%%`$Cu)s>c4^EJMkm2>Ini>1S2gD3aL0)MBoUN_Gd"k9Ni,Ci4mKuUTg9\JVKAE0CO/.Aka>bl^5eT]%Bp`!9?jom_dK6-qAU4,oK)DE>dqt4jVlG&#S)s/rU77UVf5LS;e-2>E)HAj[dMJCgD[dC+9q5P`&"K`Jh(b%H*BDh;4/;s+F@';U%3p7RSUI/WWpWO^!-$GCr9=Hs=@_F<c!J^3lr=G$9AUc+4`D4e,YhQ9h):FY&PtCC`DGKX@R0$]C/Q77hE@F0WKZ`a(pO0<OI?)/N%_pN@l"j<nKi*eSG35sS<NA.%i+@J@UOkps!hVaiAQPl+-)L:Rn"QriuUpgJR,.RriN28H,qAs,;!0_-Q0*\@6qJ"JJV9TrbFWpcM%hr2r.;*E9Yl;#'G>X;'f@hEj2NI#pgY\/s%`4gU5!baGi#pMk'U[69dCZYI,Wi>3Uq.0O)qrNg$bm3RR2_345qtnLZ<bo<j\TUib%o;lnDAa)Lh;G=Lefrq"0mCR.<YI5PAR8;CW5<RTQC3<0E+g:@FMo%=>C0E^n3Hqa&h:l-548!9&A#7l8C-U<O(DaL2GOMnj:<tth%Ml/4P[l-q[-sPAP>frm@%k^>Kg+C(9q4(\uEQrd<h8t*EQndJE=44LrDEGOQe@Ah5Cu=UqEot'!bie8DPD.!2\b>A@Ej0nNGOE+m%q>NbX31G4WIaW2M[?"N2=+u]>C[G)<3Oc<H/M(b*cPI@b=G9PKqq^''`tKh!h5\1l43q/TZBriu0gLappN%XcqdjR'ab(6e%Y<E\%rdF<\K7:H4-+?h0\W]UrTC8V;P'?4)L,[(lG@Anr]X1qdQ`QNHfh:pYI3ZF=ggA@>=S]>:Q$r/%OS-5H*l!/IpN!rH.UM)Cb&[K/%pJT9f[+1o"WndKY<r)Vq3E'42nfZUhrm4C.*o6htp`FCU5J&`f(@CeH+1K\kdY$9Ek2,s7;u<e%ELbSQ\WLcpG/Wt%Rco`5ausOT%-F,WBI-8Gpb%m:/C6@(Kltn@$=8YbB3N,LXhX3"6ATp'#T&`s8X%hocoA74YfZ?&N?J]p4I_VbPh>PF45-?OO6BCM(GHiF^m1]A.%*HZUt\U%p:'l1N9mqUkBh7_TYET;N,cLSR_B!LmaD]XVE/1bOKJ*iX$qsrdaLAGcI,l_+mc`Z=nahdVYq@9du)f>E@j8=e+HZHBj%`];`-=>,/QnMdX^%q$;o5@^ZqW)Mh]%tK^h!6!=J+ZfEG[omo1\Pjhtc>Pp%m<A9e;YiBIGr^)_qYX"#=F>'@A"UG\koD=hH'R74%Ae&kE8!P`3?TtVu/1bDW\&YD0R.'D4]DSX1I[r4NV"Y8-cR5XDb%H'DrOfR`;95=n&k'OUT,d$uh!!)I*dt"N:[da9H="ZU/3fK.%#m`,.T2r_U9YF\[o"+Tb,4sN2Md,MfS\NUncT9lZe:o@jU-l-rDd%@:ToNgLlt8BfMtqSY`=)Xn`flonpon<`$Z(4E.--1G*j$u+%)W'AhCGeZ9nA5A;+Z\`-A\6,b,$`!,HFCGV5(+cF@lBXBl^nMWkKd(@D<(D^rp\e%)\S5uEnK28cS$j*Da)BOg4rc*jkWn0c`+8P%hDQKbNq-b#kSA$8g3l<Tm_eD1A\RQ5QX1]0STjqPn/<9/XhGhnqlfC7EokN'=q^;HJ"BqJ9HW_gQV#%Vp2ZSW[oZGREmIRsmC1A$%D48,?l.b@W.-G[^$4dZIl\1l%:1&I_r@,:]fZ/oS.\.CH3QoOsao0gBE)P][lP6!J\,**"..auJY%=X+f8]FmjdUTR`:N*I!6tF6%j+UgLT6/qf&'lmNctb<&PL`p;d!h*E'ORpU*d1T-/Aab0P2?2D]t"$gPJfN=]sr0Fmm#IZrihV[%J2`oJf&oMJ'm,c-O;rmlg#8=%qn;1'EqTD.Xk);eS\E>1,p?Dp08A'>pfZ4lQ`e'X=2[.I,XpkJV^.J,KuSE!o@D*_0@Io;@>Y><o#No&T6Zq)FHtUD:HQlaRt]=+%WfoX3hQ,_`Nq5nsjN5Hto:7s5]r.n3-[0_A]@?(*Wtlp2"k+jUnro:!^R`:6#:9?-cCHOMDe/EbY,5e&:Nqt9r_9IFAN`3N[.[Td%XZb;D[=*@3AGD.<`Gj/o,Pe(*^LLp<Mk:D2Wu!Ol#Q0U.4.&9n,6utJ>0mYtl\Bfcd70/.W6Y3$B'Fr':>p2;((psA6\L!Y]cg#:%m@8i!Jct"V'Ylu?82PT[!*/f]52nI\(h4k)_:q=&l@V2Ul.O&Q%7qLt#E$3257,"45pAqCg(R?;\sEnhP,HX>^UL&<ptU2K-\8(+%C8:VlNH4e:h5BVVim:"\0($%_@V?X*Z^e\`QI#\0flm4pq,l$YJ/kk%s.;CjUWYG`^^uLK/5*hsaPVR]eS>9eA@A.R)93TSfcp+Q%dr#Gl5-%'_M]^:s;8cpK,p`V5KQ'ED8>7kXKSU3O0VI&0ep'^0f,J01Ra<CHgE,tZ-fsmZV">A2oN,gI<@.#d,'O8<U:,s5OE_3R%+N1'<W*FcHr7[s<`\1#+AkbUoa()f:n%Zd3iPcb?Tj3`\>u6K(1?L36&,4Um9R`WX1#5NM&E1[lQW,8*H>fWGApSgGIf.?9OnMhV%DFe2XG'EYh>+MK#q,6si$UaPMBsD=*_GU0T4+3<<q*DWZgY&jHOIL8m.%EK6EsYk?.!Lf$pd?$8b&ES78Sq;c%J77\mBR6+gN(r)%9&Am'97o9C3TR],bc.3uX?Xp@bH8f,$@2C8BceL2rS;?7D:0tN01;t[^=_brJQ]@l>H],"D<I6m1s/V_*cA+k4j?s,`O('aro72M%g#eiP6`uh4YWf-N%9p&hKNTWlj7l7hf+DL;F*<];+6="<*6#_p8r!Who0cprbVT,.H*8/gWTEfZ[7^b5ARVXi\pS(lm@?@J>Lp23%/c3.s=a1]=f_Y/NGH$\)MN%8Q>,/j@[7Xh(T/F@;3+#c-i)';Jcc'1F7scPag/$#B>o6N5mH.bgk$#<=ogu;Ph`_tK/4)^dKXnhs%G(&fg[cMZ1[qg>/A1*SEAt;B##k.=sg;]nXheK9,rk[`CDlj6.o^kN=H,b:u%.`nHfj<."Cd/3X?BL4lCoUErliR=Th[8gi[2K:-%cX/81W=A@:hp6.H/c'#Q^>,B(JOQQ/YFRM)!JR#K^=-tiB.NA,9hoH#P.c78I7Q'[I2X,L`1Kk30)iG8KR)TBc`Op,qLfp'>VYZ]%3-hKp2stJ,<VPiFgO4P%,f,bqa6p!NmE,2P\/\Z=gro,aeaL4X9^anr:GGL$UPY7;m@MMs0h(F!rpR5'r]Jk\csq7oaN'?h>,Ef+%jS"T.^rOaOqX_1G&as)`;-jmV^P4GbIem`ir40%ohe_O]YO6Y`R9dA4qL3LbX8A<_a7mpAK:ZlD<`?,uX@AT2<kEgJ)4F^rb2KmL%Hfg%$J0jRkNUn=DS%pKNrUJ:k6GD=TUb@$O[m.=eP]i[1?63o'kRZS%?A-nfjboncb]<!ba_)jf`Ur4p,J0/?^*2ohR7n]8?bOSu%5@#fnk?kuL)DM/6BD^NMVab+Zq/uoLs%Id*s,mOB7UJ3?RbW:WH$WFi::P2>n)qtis+kr:KO_[Uj7BChr>Qeo`nfD$JE2P_gV6OJ%\S&$7T;M)6&0O?S46ao3mce<@jbH=\c;a1hp\g*&O1;;Te!!El_hNARo)3!XSgMR8_`#WAj[]#i?UZ91VjY</?Jk'j,kGk:5Q6gM%/JtP:o;=4]7$uKh5bN#@pIa8l^R.ctk]<eSD'Xn3UK/PI@P=nkpWe]6_m]lAYf8^QYD._Eep_t/5!30NOT/iM48A2afS5M$>Pdb(%;IA=2s'Q'eq9sU>XLhKYja?=S_bC9gMY,3IRV&WCh9Qi(YJ/r'9\"R\0JpIfITA)^Et8^hd]MQbZhDS-p%,(o(L(Z&X!`_@j=VLM%SW=Qt6`,`?./([/<\*EWak3P`TZ[@]ljk.+!5D,qaY&SD@IGVRrH@Khp\aila<]C8-6"n[hIfL@q#7t%_WfnRJ($0MXjK_4F`XP"%EcPs_`TO:`HG`q>Ihh6O(#N#.]?)]rlZlsHQX/UUm*iS)Tgt*%"4:?;h7e@"oqPN8G`f\L\2[,#SN@'EGu=d?W.k,:hF=&:IrZoP%qq\0+/mbEdH=ms.a(rVF/4<#[69"pG`jF=2"J!r)0V_m+]YechJk`S65?iQfN8P.#-Ac_$Q8SO^]t]k_^9sPHL9*b]&_WG)>O*A<%*O&".2Fc<6>9Z6kpj6eo^@Qf%gGP"<7^-&a[ur3&5:%t_Uh$'pnp_I:%ap-qOZZ&.Kpg5o>3dQ+E3Z%fDmlu*ZEH^SnlCiX/7&om%G^kiL2P1Pu3cB*&k:cK6H5^!,aZIc&pAWTXaB+NYK?Wn[5:gr,ZI8oIJD.Ai5*tmC[R1HiqrRL7X0%B%boDSEFZ9?'FS;l8.p5Bp%GQ4CCjBl^`*URB!ICWu+mQA..+5+WH>^qqPYA3Idc"HMAk1P+M.\/e!45Sp".AQ:Vl/sF^]ocHR=mj#E_XD&Nqi@l40ND`Ai$b5=%n'G@bZ8QOI085%dX'hWm-F[;GIo@L.Eq+_5e>ONYRLKetpe-T)g;TVb02G4>^n_LPC%n]S&__$QY"ibNa^&$(?HbVh6KI$ODCfNa%n$b5TcX&`)o-Q,tlKR@+8"6W?Q+%\_hW9O)c.qo'k>tG<5FD:$^Z[>;.d;T[O$A^G46dl2Q)SB1eFKHaA!*a>/mn8ee4h#b[oUuT%hM%HT9>)^lZug&C1@2UfCs<]\V&7_KD]e5Y^c:O?f\4uj3[X9EinF/+>$^baIjlF*X+#Y1j)YVehmpLC-Q)Q@Qem5b[#dIfCn@N+%Sb4ea8.@V1Oou/N)c(OQR>m!r(/&0VCA7+BGL)472Z<0?OF=EPL\>1b#2(0[%RZ>Ngnj[bZjZ>DlbT(S=jX-#'/uD7qQ#E8p)r`B%h1(_P:Zoi_3'Z4=-.^nQ[.X(O:AWmTBg;?so(HtN/:1%S,P-#(bRjM1l(blDBBf9A7pcTBKi38`SN=jc/1nmrIP:IK;['"]-a2.o%:V.RVk9#bE_G]Ej#^?!j2+4qB.8rV\(132H!WA1_Y8m;L[`q=L);<3fcH_o+E$_MEJ)g"4dOu]E^.*_4/rV&aeX'?Y!N+feKQ`sA%1(.;&Rr=$$pjgE%CAZOA9iZEt\B#NWV83\na^TOtZ@2Gq]4j2Q*Xl.CGC$kDUgN16e[rBR<L;4miN&4LKp&5`Yk/a]eiUZ\(\2pV%h+8Bt_sNuo=mtoje#j[/;g`kH>iD`1\S(g*hY;Q<=WaW8ECigOd%Y.7gag^aSUL?9md>DB"s4nfS1BTTGB0b>:M/Lj6Krb<]55TQ%4[piB!Y<8LORlJ"*+DL6]TK=DcD5-3ms];J-eYEY>aGDQHiN#0Bb)-Q6i-T=?7P\cq<hT5U"?UpM.4fgMXl;)Hr81SCYm3a^g/-m%^A@h8VRCle>W=l[XU^1oZ$bYHrAUNdX2$h?/`n%&HFd;$FjkW$Uj;\(b>eIhq%oQ-hT$qf[qg<So[27dLM(m9^Pcu</UdCqT/AXL%=*Us_=EsJ$jOf*M9QGQ0D32H^a\poe@GefQ68?9&QmL9VeTn^,kpp+5o^9=AP'lH;oO692M0Nm0E2e7:*p7^h00?^W91oGVCjrqb%)O?Oh9W-[HMm*cLIJU<igA.*eCd%9KC"VRC#_C]1^=^:#jispg-#'XV@=;^6qji*3J^d'`,^3\QYG<,(qiCU17ZSDgdF=@O;N<1p%QX;809?4,HM*X&6'[d4jc*b6.[kVQ#So!-S(Z?Cs9%i3(mSRQ'jD5ZY5QC/!-f9jEEL.n*:lYm:/ZhsI]q>-/^<q+cgcTi5?Yh-u%Q\^aQ+!bo]H?p*VqSUP-qF4B)[\49d[]7]*jaN?3^p(`hf#,@>^:]aVf4Fu&U]6R(m.d`XZD-/*hAc1K0+Y6Q+\S\Qk/#&TIcY)%%%_]!rqCthof#C>V6\SinoIP4[`]q[prquQUp=n%Cq>7g+HNqk7b4cZA>'P]G=c\9K88190SNh@>TBPbj'*d^_;Q$b+;r"Ta*L%^U%=?J3n-1\9I*j4Rqh)X(V]/PHBqTF.f8smS'B5QGVh89,7(\QR/j5Vm"0EP$t-lT5&r,A"lbI@h/+)c@%c+h`Rh`Z)YWt,I86,(kI%lYh"IWH%8B/'lcSV^nt&#3P62Eh"KuUE,tS42bgGEB]Lh?[+gT\)BdedBpC3NA'\L#aM#0Kt24i_Rf\Z@<([;nb$31s+*/><*PFm%:W]?T(!09nacZoTUD9B2g:<P'SZS+gY^W>#C4G'[ZCc.?rnYRZbiPV+[JkBU$fBp-oKr@;l/lM2h+7Es5'V)f@k#)$JWk*=43&Q>%n`$;r9ggiQ`&9''KuIk>K+NM2p8Hig[;^VB\(NDt9&7&H]sd<@PmdIKq=^AN^QZmC?Im<=Heu_5MkGKU4$k\H>IjA)6%8W,kt=d`%Q`P9'fXd8p,d@-KCFmr[[Ln-s'ZU/9ma[a9QG)DTb9f"bQ<\aN;lt6=YXtUT\3Zs,<*:ni0b8;$4'Y:f=);18cWO%i6.HViLFsGO%*Ea6Vg/7UGm<8nsHKPhCm,Ml/qgcd%Sfum/knYG4/N2_@>8;WcNI*?Ukgl)WZ^U(tS0=AQE5`37BB#n^TI6AXc@h5m9`as,TI>6T%\;1%eQ>OL4JY;1GX&9=JSOE0X^$Vo:*r"sZa.,[=#3$n-q]9n*YYV]i>A#8`SlKDHe#gpfcJ'b'/U%'PbAQ^K?E@+=?CTbWH2j]1%A_0P&_Vpd:IO_cf-iVfbMZ;!R8.mH7)ZS=K-Z#AUl4]*F+`j$OrAJM_ih08t/UQ2Fa-E[^^L(PMp[)#O>IK#"[1Cn,C`'7K:6C3F%C[u)tT!-j3$``598$X<M5%mnGV&B%5(gN]=nch1'K6bToWN"Kd9jS;p2n0c!a-S%o'-r,BSP)2@N^Y5I_;uI4>l++]>@(`9X=#,[%+6'[nO5O8@U=dJlIbf0d!FCY%Z0:ZcD16>0fPcaeU04<O)tek;Ke``Ra1T2XV(6\;/J/WQ.g_ZQpO8ZV8>=SK3$gddiL9@IU0?X0%^>\Ln@T2.8JkQ*sh9mUBh*J9?E`):d-0LQ"dE_+l`/X@P1mN6Y>JJ%1L/VS=Ar((lX\*Zg.EJ0oqO6l^dA%(HlaPKE2bKF=7a7"R%Z"mSW0VjHf\ZE4-K+WBT[jU&./6@B&+Z]?oK9ZA26`0sfV!OSq5Ug#Xr62M]b@BE<Bu*s=KQO3D3%K/qMr4Ftdp?t,^1<;=HXP9"%%\FarB6ld?@#hd%@-6c1c,_CN_NX`1k3HF'B8th]JEZ;:`[IJ<M01uH&F#RK,A3%VHA3q7V^f"<W2@YF?A<AfT1l+J7<1O@%DFnj%UtHLP!5+FQAB]M;jHsXo]+]4JQBqGBO%JB10*X\#c(M>>??8,@>.(du2r#H0&8"f5,OjR*:=q#E&=)k0Ug%_g=4Kul^""gLjB#4q%W<':fcYql<g/7C@^IQj@L"7V7G^GV632,)Y#!LJMZ#PE^I)u)b[QCHds5*_4^u\>i.Y5p4L2SX.J`%!p=4AePK0)TS7qZ/sI<9W$%9;d^C:b(<4I;"mG_h(G#5FVE]Zf<?bmO!&TaL6fRh6Ve]mYbj'GO#Wa`G?p]U@2/F3MM8pHV/]4K%_[HIMH,,/g;qRQ,CA>ZuPKc%^f@(lqM4q[ihm/f,#(:?r`SI5+"a`N^PIfOUmjj;Mn&P4[5n"^?qjLKrpc!InVhqm9MPO4BPZu]hLF#fAW2#H@+c_M>gH"f:")\u%Xt(-m"j=<QdH*hRj_CBXYZr^?H4HD-2ocJA_QqRIRlli(CsP[`(EscAWDQGoL+Vo#Sh_9(cLOl)BcGR]kUE$t[OaB!=XNuADqd/:%6tq2k0a9LM.=+S"WB$7SfW:>)\.1AV.F0kF1srP=mbu\n`2X4.$VQq##u+O)->Zu:D,2sYSE@>Q7X^![ZF]"k%GT&EY#d=4Zq3KB%O\P#`Cke8R9kRnV.V/*N+fj"O5sMNSATP;Ge*+iH+4&Ln"^=XKIm(h1/V1C8&@lIL>=rWZ9lkt/^9o;O8XG7j%iaL)'I6JM"Fj>&%Q/?E`'2ZU'VX"F.B('ell-S]u_G2?c6_nOl)mm+W!n[.%d"ZG7FAH!Fe+Mo@c_VuIcnaA*jLI+&j.OLf3J7ZO.L9!T7iVEdd'g6%%04bdTW(D&/\jl=h2'g')[VTu,;obB70Z#RRe`[?m<XiF$2L/1DQQ?P!HMjcs;Dp*=0-i-ZiF3-[4K-q@7UcS>i?g3h)]%sol_Xps%9V=Hrc#`ET9eU1s`H[\D6mfo=PO%e@%_ZU<e7,<a;kV+)h<!!#GgfDJk[eK3P"spJohpN[JJE;PANIch[\a_8+>7^@Yo#2TJ]kEr%-Gm_ElI%R6.bbkJFGuI2FHFQdme=N7KSeYZ4Gf<Pf9A?jEt$b9!rGIMIP10%k0^b"oSX1">ZtC]k"V`[OpEsjSWG$F&r?lP9@p\q%jt6=R@C0lq!HSjo(m!U^M=rbOdG)U8[+,:rPD!Z'6p1o[R?0SE2t<roqiKCO0kiL=6AtWk")VaObp77BgCdn%)-Uq4eG2hn9F2`@%"mMa#%X#*VY2IhdnI9eJ1)c6Tej_=18f<^VV'q'.2KbTlQ^B"]Vi@4od^IN.[]AN<67\j+TfE9"be,Y%/?pA#RI,eeaagJWaA"7l%L99c2?8o!<T!:(th@db[Y!F`S^,a)QnqQ64,NE<nS<YgO.rX]ZetgT3"B3VQe'&CogGpd$CW&PbgW62T-YFB9L."?,Q:8Wkg&V$$%,*Al@feusR@j@EPo;,*<j=5U7%BM@qfHF;#F:up,F!/e#N8ceU2\I+Ii)`(q'qStc6,;KL=A[@*>I4opAt+tP+lZ/c73)e-S(b)`%9M#4eX9aXN8?R:G5jR+9LPRN=g>5Ho%&&3:^EkZ+T;@`E4q8YGbr'/bR6]2pmH)`E,bdS<ONp*9!MgBT[+eKImMJk!BZ+Z8UskX=%D5hkQU.Bu+E#XlpXLMrYZ7aTPED9`!CQY86M/14>VX#'M4_ZtaMoR&.6fQZP8C;-4-FKL2BlB0-8Ek_;QK_!ZO_(4Q4%r_8(9PG+%2qj"!98J:6Wo\;<eRVgEW745@<(KtG9o`itet+.ENpZ<*GdO(X;(RPVQIQ\bJjbB1d6J\kJZr`h#/NaaFI$O!-4L"h:aD\C(2trM%*)\PZPi.^pC-oZ;&tq\tb>?4]"\b@O3:^(4:IIs19ESL>[#jd/S0ggTh3G0i,Slg7R`A,49Ff6WK>]TK\iZ\i1_N_h7(3E*V4]&C%a_''mi7"QSHllpjm-QOnN-h..-4gH(P'81;$.9_NP.%0OZ:qRQT])Q%>_Do^"2YDLLfFkLZ52h4'<<<O0ubIF;pYOUddABp`F,"/%&18M8!jhreBm/@E,jodURZS%M0JV=GH%kc[[+h1QkRWB0`/6#:*J$O"m9M;ZV+#qlJ7fT*@QOXKlp`Km)QZ1gUgbm!R^=BX;_MS'%7!OM?jr_U[K+=u&,7/ZhibNekdptaICp&:PAAZtM6T&[/U*jY,Ru'JD<Ho9-7EiV,Y!o@OG!6G6N#CR@$FsIS&99)4e&#Tca>>-b%L\_lV1kS@nUC$9n=sP7?C^@I`+u&e;j9-Qgpa<f?ZSDFUmA<'\_NK^dX+]RI/#!s*03D7IVHJYl?e@t9$;s7u+>->>BHj0<B#)@D%D.sVq6"kl4?pHWJ==A\7/Lf";8Whus1+V)R$7u#c2bSXS\CtDcA3jSE##?./fEEOjZi$EJPPMZ&Y0l@NUF)\%+7>7?h^$%s3(!!N%=p.J*<AlJ_[t<b;-6USt(b&TXl:Oac15[ulc<Ek]PUQ,/>urFtcuni5#?&Vi(Eg"W*GsSCqqF#r[icg7+CaA/P8htMSt5+S:V2X%%K$g,pLhPS/<iEidK]K^`TeFOAAp$[',P`6oG1cR<Z7BblVAC'd$gDq/L%)r8/$OEA.[)QL%&5>\V8H.^7<"CKI$<&53Gmihd8-(h%E0gEUS>No/::dToG10XGa_Q1U+U-=1A=_-Z)8)!,bXQ%\@A\a_18Kl7L7ZQq4dU0\Jue,>a41R+@us]*BOj#9XpmJD.&=u[:TG)K%XNJs%aZd$/4c=ceQ-Yg$1Mc*r/3V1=Ah@Oal"A*p,u7IccnH>i3pCYfgE^.TFK*6Q+&fp[,I>#OW6;eQOE$u3oe]!><aa*K_k=DO%j#c)@*<JQ`FtEHNdR1Ki9FhY0B47]0$,nK4nUp_+j^@g[UC"PnKbeM:[Oj=<?HgZiIQ_9cLM\,N;X-U\%r4N),DUf:KA8o9(60;m%74alY2(+>0]LYclgm<]=f$OjTd8^H3]Rtsd/DZJH\&c=K&IqGY>DTq%Q?f::>p^%"R9jDQOjaCu7Ji$$0fQ?LmO;Wa]FU(G?t15>%1_d/(J!"#7Opm?Tfg:l0_*Sl2d'Y/Xls.dBqWXU,Qq@S1BL6e%NY<1tJ!^rp;!p;`T,\$)bHmW<nUUb0`eat#Di]c$HPgoQ*SDB*%7Im#R`'$&r\cnbT4iajT-<LpU%eD#!4$Sr8kq:b#/A/si3C^>X>S9]p!`gpc2%aid-7""4CoV4iro-Db1"]Se&80tLCcL,'`/t@<%2LmF)"SA%rGsZ.RfTUIq:p;c<&V95L;3C"Mfd;:Kb^6Y8:4Qt+1Y^J<_%9]i4+o6Q;^RMPpDdDeQ6jdg1eQ_#?B`PB+Gcd!Bi&%'%13cP3\O2RBS!cqjni/e_LnG#s[:=0kKEh#NPUi2E?2:jY*'g:G49Z^?;N/Tr6XTol+qVFF)NkY?.uf5md=s5C"(=mJ:lW'KZ*,A1%"N7+)A.,.7"37WV&.X\Y2Fn(<O0Or"9e4,T'$TTT_Gs;9@);<Zab891ju!PbLlsImN9--$;#Z",WB!,&k<u)jbR`'&jC0gl#nUL\%4Gr@)d?'<f^lP62ThB%RK"iTVB(282%Yr6cZ-NX#%M3T;0#JZ>/!*,q4:BK"bipO"QNe]'>]Gsh:5L:q?>e2FZ3+si1fP.S!OB[$%9CeStH&eAG=9s\RV>m?e2*c46FL.eY-fN*lN1tT5'SJW+%EGUnH`fb&nlUU`l]4MnND/oDF_4<8*?7j4Z,?Y^W+[L29XY:b&ThE=%_/u4o.C]n^8PJD`T!"NT5YIUkYWP#2k<OKXA]_:%d1B"4-?'^Gl5A#c66fNrJ[9KeKOEa_0lYem*l7LBLe&eR<XWUo(E66bd:FC/%D62;rd'Ge8f?[t@*)4*Dd)SF7SIL&lV)qhl*n/KrD(?U&E+.@>(lb"YAdQgMpXmJU,MWhu-6tBU0S)J&2mEkTTSa?`BOm5lTWs?u%K->oon8fRg'[>C,i1jA_Vj@U16u=)6Psji*EI)>$IuPqg-l!>j8Ku[/341TE^*8eHKJL1lAgW<S:9LiE-+Bp%)d25f'J\Vdb1]<5%cS-L<i<%1n,FV;_%^rr$1EX'29+VQ\SY4(91)XQBX8tFuO/'hpVXTgSDEDkHP7UQ!7RTppA(]5/j2&(7HY@3ZZI/AJ)MioI,iN$5%;b_mHhO[U`dLT5%NG+F[>r,5'%B6K9r>)(LU@_!0Z5KF$L/h<.Jf@R>[mWH@q=<\<XI_7;U[h,!R>p-D\o^YOa^YTrG`L!']/#V)%\-I#7DONkd96?giUD^q19b-V\C8,"4?KF^`Q=&`12g[ClCGT]<(?ao&pMlVr1ohq3Ju;8\Ki`CPj>^H-+UA>C%hrP(gG>Zh*eEUY%;%^WVNPg&fXQa)^^c)<f%m`F?W,T>0K<>K7E/;`G<>q-lCa&D:%e2.*Fkhf&.`1)'HIHCL_1d[(W[?#*B),0=E>]=(?SEMF@!M#r%EukX0F\)YELpXK4`00%YPB]tl,*`!/=rbc,X),V4@X=MiI7VIP]frNU8+lO7[6C\k7r<nb*?1i48(I8lXZiib,A`#=>N5A#b99MS%;K0PuN3F8AR$Y]kBS<K+@Hg3aKVN/>39tV;$B;8i,Ac)go+Ztm2X)Y#HZp&Si&FMPaIsUH3hr4R8EVVB"WZ\T%_It#IV4=\H:p(7%%0[sT(_JN^#V:uD5Rta^,D)=.Z,"G:@74?T3r1fUUPt">7RT@WMh3WN$mk$qFB=ZcCu,10K#Qk7]dqQV!6-=n6B[ZEDf4S4?^;'/%*!F=W<FgeD0k&3Y*/[90eML5AGZ)h$L;q=KC9q1t:]]Jn'H+0dc/OhKCFE]V[HLet=?u&VS?=>T(k,18V2!rn8HbWo)LNM5"01;>%E4@SGW&QF)3#n`Q#\?KD!MeY.&OFBUZ,bf?j_,nq.cP_X_+-)]S1W5[)-/Ec..]N\I*=2`b^Xdc\1.c`,)qjHROhIOTKCS&jSYFF%,Pqp"_A8:<L*eiM9>h6r(?LIO__7ah+8^1[$T%ui>am<XDK:(m>o(<YDhWBf&C<EmDQAqR#XiSeR4o?,QcXoCpjY\t?q`=a39Lj8%R>;.77u%$gOp'g.$,]>iLt"g\$KH<.pkju_hNSiC`6uQAS!-Z//hOD!][T`6;8_-_F!r?3$!"ISBk\E!.)7%OCO7W2*U0AN$nA[2%Km$^W)3J$\8AI]kBuf=[9oTMk?liFY9Fm>NA4_cu>X4<Fb*L$_WHQAL/=T.?]jjt2#VB!;n2sLsB@niloMJ"pX7GB&Ju=D8Z9.\G%lCpdk7jG$\K1%*8YarYMJu2*rXDo\S+]&8t\lN7<$5eCgRrsr)Bj?PSd&WhC%MREW=p;ma:h`KAKjGggA/9h&P=.pd*uY\c.'l)u%&\GB%mU:T4ip,U>)ou6I_]oTp*>'I)#*u=TV3<_XM,YpVl)E#d/uH%4erFi[V(G&X'6-3N:)m/G*!n>.pgBt(/nf'^$RcI/COuq@%Ui8\bD*T#5MGr!7#u6s=Pkd7+3L)8LLhS`pUBD6uD]6;[5IBVsWJSB+OXIWWF7OX;%"^;b1)#tRSQE5J)*?)sOhrQo:QA[!NNB/^%rK(B<cdP\9?'>O1hTSD8-46RQ@;^b.`C-sf1%eqjPcb@eF;N]cAp3-h']^;!A2;h3\`Os&._6(DJ0ea$$@uQ,FBOf6i_i)9N2][>%mpYGhG(-[6RZ?Yfe4)c=;A8SjmBF6uoeZg\Aj_4H/S'*ml\g#<F^+YgjHfD;CFJDqeZ'"[m6_o$7gba'8@AuBg`W;)ORL8Li9L4i%j=%%E&Im0aX/UG4MU)QkI/R(@?j;0jp/[+p9qanY[X^,Dntscg)DmMN,XRZ!X^f.Y_q)dU$+>>?F>2R^&DZ=j.u6OJL!cR(>TbW9%RQ:LPK!l\Y(t0,/j<h%H7@>sK2mO$<n>,Lafs:k*'c58,%o&(A2<l7"I4k.4Jku[2SckTZg^2/-;mHfO_%nfR=9W:G\7W28Ej6*j%9SbWlAWnse\UZqHTRNL!<$MD^8TTr_)\fh<W[!1TM7C>U!?0e*I;+8BWbWJG/Y]bUR"](X#sSmi<KPh(5Y\2PnM(APSnd6</^NJ%%mD+2U!A-YC3G9j]n3GTn0lT`RDF`N&%'GbkkI_fI]$q.c]e..4e7_E+!3blP#+>Q>*&h$I4-lD$C]aAm..S\h2'jW677OV0!*?C4%5krs>jbX(_>>U,Ob0FO0&LnK-E4mTLNWM7sj#CErh4j_-'9QmaJ[gX"3BZU5jaL3I+U\9_=SeOS%:o@h,>uM0\Y*(];R1ldk86$^%>a$^!'A``3hc6776c9@Z%?W!(CZC*q"'o:L:G+)g6fG%/Y^ia#2K1:((BaOQI5GXhA0^$b<Rm^%:"])VEj^b_[#CIjQC$0^1g(@R%Jmi32P"F,`Q_PYG9Y3\d/,,6f14XBTf*WEAC<?758",5H9G7M'".U-[fnIWGd`$JIdVH.uOJNX`DM:,o6c?Di4qH^FK,)Cu!V_89%BJV]H$l<)"X&'%Gaa..=opi6@:_XD+'\42CJ>pYF0R#Kgc-dH&8qc+6lun$!/qf/i/H>m8G8>`6d>TcSB1V'7E3a%P,Rd6t84o!:%l6=jjHX7J'RlL3(3"cWt0^td?3T5EZBZ\6S@g^B>j5?dX$Y`2F$b0Pe:kQt>s'QS:Lt,@8X1/`J8lu:.2=Q_i>EpjG,2d1&a)59?%S+?Iu4dDoL\Yr_'=')WPJ9#_>1>!`[.eMDHk*gT,Sr4>J`j53=EL+u@#T=QfY[f.P`]FTSXG)]e#d,!9=N,=+Ok3N1<RLAbK$bBi%NYOqo8/"@dWPf^kW6)`-ZSG31'OR>i;#4@7i"16u$^#G1d:WA6"^E6b;]K>3`u%>ub;/PmFq016?Ba-,A2sO[`#ZAh#0TF[6^ou$%gG#2I>W5$9H<*\."g)0C"XtKmR@5ic,%DBVcHV2t=!3DY7mA71gbeuVIiYg?D6j2CS=V+S0k1UfaVn;`<Mg[[cS=u9#kAjcIRp_T%aYClpa:n)Tg9BqNBBs7E;!Bh8ckpJm-4;`6APeepr<GiaSAD4F2WTUn`_"$eb)Xsg>TV-dnMcMi.,iYuiGZi%UMOU04d1__jIINJ%';X<CAruP%Cfu$uOG!_XCcK[MUK_C4e$?AT5-nt-aFV0'9?Zb3id5Qb9t6"^(MH8$DNbSf#2q$gO\045T30@hf_!*Z8[rf^/Emr)%SqbCL,>'=n_be[d!$$Y^jHNFV5Ws0L%i0[C%r]m0Hn^Io,!:$$M-EP!1II>k-QJGA.%kdOP8.8m.npHi`A6ulju/;?bd(^;cks#H%$l7IQdsn_^6#kDM,6lG)l8ZgLFQ:`0V'`VFoF7:]#%huiLLY*$R(?OF5-h,r(#PE^R6sf7+i6:YPuS4""e1-LOF2d5<:\9AP#V^6%6V'SSr3VqfWC,=dcLOPB7sIe5n.:@7ai^S3"+C@=n;(4c/#q$'+KJ"L.bMJRd=f6agK8it(hZ&7!l,2l=\=F,)'.s1oG\B6iW\Kl%!V_fL7^A$S=cB#&7LRM;+s_^^?g-Djf%Eks6-&)m&`f'K'pVe<-ep,2EToHZcKYeR5`<sP=jk+F-KSWTH<&$89U\Z-*6.VU,\PIL%lS!?"%UkX%,P\"t.Qp.GL)Y!/N6u1(WeHK9T`sUpq*ddp.CN@B\?_*T8ocSEb:ds;.DnMmjFs:h((,Z$!DYBRW>i[Q#O!+4'j#ap%90iu/MA`qIc"7#=_iX!*VC]0L-<ii8Kb$lKBf1PZ*#7[[PRi=7i<gIn2Eg`1i,TdMG8M2`?qj[s+:bO_&qhtJGn^t#6u#KO<%WJB%J<"\uVL"A)IE7R+#U%*'\k7)(<$X,\JMTD<c,leGbZ?2#5fQMq&MarR-kZ3;f+QGl*_rdM".?/9KGi#m_$)e0.HF[t`4"SQP5&Q'%iDl\WCjD*WC4J+_BG>:%3%FE1iX@u1E2&2+1iBU163,&*>[C,E'Z3LT1_EpV:%l<J7-;4F_iqMf<I@8*Jf-Jf"#TQ=;\PBf!\&%X%etWhn>Z=m<fpYh%AoRZ<TH8Y4`!MOpNZHg+&2GK(mi_*O+>OoK3Xar/]V("q(bG2ALDOB\o1<B/@)7K^M3),/=ZdZtjQ[H3nslC$%,>=QE-4X.hHEYDK!toQ<2,:dQjU^9hNbZXm.oU%.PFMm]CR8.BEJ>VC53)6ma:125asqA9'#AIb2`\CBKEVkEE?5Omn`a9-,fo>8%Vp:?s8_7NVOXYRT'SX6+mdr&7FbZ$Th*A+K9ai+&A*(h(/slg_+ikXfH-f@4`YAMj=a>R0AN3iIYVW_eB4j2jkIICZY8LmfM0/@#%aoRo:5%/+sMb?FSS$rkF,_@tBL/YKbTnd.7*`B=TN4ZNn95>_BS8!]bWKMl:@u]MN-Kdil%5B9Ldt/PRqolq;Xbj>9;][#.4+tpc%U)t2eY^`Tm^.ZpT+X5^BhPA<WTggO4NgPN9n6l36[DsDUj%U(KIHK5:N:etTn)5cVaGaZS.I1XA#WMoXc@I."%ruq2S-Y\/.rZ>c%7?Q0)#I<:_nUX6d%AEAF.3o'V^]7%Z<`:D#jR_PhB1h0L3"E)aPD&DBi&G[PMZrj>[%+te;d,Bp(^>:\Q4qE)ctF[iAG)e<"aI7V%8>b-u#Y]/nL)P,L&B1u1!dN:XMh%IWgr$Lj>]kta6e(2&_UNN5*7T+]$JRIDgjo"DaRQbi/>Hp^FK]C^LNU-]Ua3_o#Sn@Gh44Yt%?'e3:25eK:2@.B582Fd=%]LRV7cBF?F?%5q!q&J:=#`8.JXOU!8OlpCb1;HO+Omb@E=F]/<Y0:ub%^"eR;rtG$dUCEGEKUp,GPc?%_W.@$86Xi8p5g^R1N:ltWdY_$YNebZRZg=_HJ@N1R>cA5Zu2lhkodVP)$i7J=]:9AKCC\#Qhc?WN)5cA0&m%r()Y;,Ym=+r^hJPR%@l6Qqmci@?KT&8k:\5AMWjUg-+[AH&'Pr`D531Eug(hKo&D85HE&8G=0.dIcjnrO"BBhXs*0mZZ2Cn2p+hKGe_A'Ij&'&0<_4;;Z%"D?)7plGaHf63:D&d_O8_K3XhVStV0(GsenVBp2k*X="u;B2VLL=ScK(q+Z%<MVP9kloAJ"(6](#\ciH!=:E*9>FGV^(uM]@J;QX%4>%G$KP,N4f7=PH:d'IKHrB,j5qp2o7<sIp9@MkX$&[CmcHU@=LboB*M[L%-GnZ6DOout]#,g&aXcr!D^-W&UL"r`h&qc@hL\i8T%Z4=Q8GRGNP%G)!\aqC?_'TPfX)=Ur9Eb_*Y[TW'dM:W-1D7`1TjClB;]#Br,$1]*ujZs7_7GNM?5_%I?\m9@'5oh.'kq!a5N,I_2%Bi8Je2!"*.ThZTqdAoe[_WDTMOIh(i)G($3jA&8]M[=(e*&Ius.R[uTVB(jAXp<n^7Re9h(VOAbV2Ye)mZh-Ts4l@^l!b(tp"2,q%GPn1Tl500qGe2[YRS=dFe^Bu`,1Fo5rT&R*i'+r_'7<4(`JJa@4A7$dM/]E9cp1lrPC\,''mp\ITg=h`"eK\;P.]n<m)+C(K.fb^%0f3>n\F#!NLf0[(LaHXr,tSH0&%%OD-dp_]5IkmbJsnrJ&>9@fk)j(+^bdZ]kTMYg2<1nLnmnR[,,"F"B\?+Dj$=oCM+OiS;%ApL%SF\mFr#k"F#DNX4h)tHZ3$"ZuCf$f1"Dp<I]AiB9&qDmcR_T<[<La8>$cUq,;aQGYDA^fC>^_oI]h`,t>_7a:=+8+WPa\&nSg49%%CVa7)?SrPZgF.58K/C-#U1J$?R7or)NDdKC#+dJC)Nf`=T`7%o^P$?D[S1Yq_r+Vt$3k2J8$J"N:B)5*3pY@Ok2GSA&r\)fO[Fp#%7Jm01R\cT!jeo9AL(=FYOf0"b:Z[L>a>S3DrNZE86eIU"0nckZ9[;d`?8Ng7FW=l]Qt'gU_^?$E6A,b=Eg[r$5;"7(AB7FKJHT%G%o.^V/0^saH&/VV]La"#_$FN8/=stGbV%s>P3Jc[@Y4RoL:QZ_l&d]IV;hZ/e'UiE8J2icZOrl1,J<'^'B9W/2OH*-f-9E:1R0:<L%D0Qn#Ua7-u4djt*.i:m!Z4nR<(i1[(rij7rgaUKYH\kc-QQec*g/9aTET2lc!M!%s!tO%T*%Dj5$!OcW_+B$:%*p7[LkGVV_i.t,%>_W6Mi1#B**5(\.m>6G<`=\dGDkam8(nC'sd&;7;4qb@9b@R5=&d?*OYQ5X"#(Z>B`$^tg&[2b].o68>LoE`Q$.KZPV9\ZAPN`nF%J_>YO!^T$aCB0RB5XcpM_Gli/+Be(UQRbTrF&J?A=,eb*C-k`=OTgoLEZ;lC6=(9::]Yo.-RC;dq/'ea()R>@#t2U76q+pbA7Vrr%3=<n\Aa-hl'%n/om!KpN<g=dLk!3SmK+"AmopSKb_j](d7a8c'4Doap#U_8:,hD(.Da"A@bIihrhuF,tXE#R,)06<l<KdL4jf32h%5M5IkC!5cthNFZ7*S+dMW?M<nBL(Y]+E9#P)'"A/<q!Rknei5!Y\2r^Ttq!NWbBHF%/0Z3I:Cf'a)OAMr=^m48VEHd'km_faDU5T%)S-L`k$=(!o8X#)#KcO($4.a]<tLfKCI!JKC*;<JX)iBRMhp#gJPA_A!0u%DnqPp$AH>VMN6&qZFZ)u>i4j,D''c(Uc?=TJ]-%a<%Yj7"',N2<9=3,J.;.$!W(85:[P+AEs>Z\A"Fega#jpUlF:$JjdW$`eCP09h!QhEB/EUYHgKmbqFnOi20'.9k4L`m4&rTLa@%)bQq%Ke?m<>9+L:O/k`nZ%J,X7&>P_gXne]9pd::fcgD&id<;,aG<.,]f[kJ/]H7mR[!@ocOi'c6d"\L%9&7E;f*uH8di_/TW4Dnj[iI&%Ck?V*$h&<J[qrks"`'7$c1(s)KcD3OJ<nB('ii^TF<EH9nNg8WX(ZNf4q&#U91>$P;(%G<@:L71CC\LiZ%-(@ad$kiIO4]k*J8VM%B5SaKE^*@)W?jKO`7cG2oEZ=oh!C18p6D\pihF,;9/:M4>8VqPdntg1!`IO,6b$!W.r@*dn#$9WL5J",!Y@,]_+Q,:@M_RQl!,]q%/;9i$GR.8\#_S$hR:<b!@`q0[?(Xe3SG(I#XtUSJ]SQ`+T#kn;)"Tn4&P27`Lm],+JA'WZ,b/;&94*B'`H?$K0*u2J`VET"Nsgu8%>*:e@V#b5o_s`.5*dc4\+H+?l^bfa/*:,D"mK9#I/gppS)p67,;oSaBDK<5jFjN$=A)WinQ:ESA2&rQBkBlcA^3GdD&01q&&ku1b%A^+<r34!ir73rmi3hO%4ff()BQLR#!),eXdX,n@!iaK3?HG["Q$5K-><0;E'C73dp[kE_6/S)o&?FiUJ7tIT-FP5YUI'Nhd!b&$6%*;%%S^';k5UP3d!f^:d*i&"/_.nCJ%I--!K9K:38,*<HL5].h#Kg^Fqj'%dXELP-0Ug_03fG`j2KZ$WV6#]e_1UZEdFsJL],iT44%q7:mh[Zp"`U9ITc2UTn530n(bLdaM:W+ukEXf1,XRgAP36jo,AB&P.kMQRepObGDW'3X3:JX]</C]oq7:SS(B?"sWf"=(O;(dcd"%W(<m+4Lkk9\DU&?Ws?G.WWnRcnoU)UR(-Q-2qaqL:/g`!2>R)gS5Jh+:9aN1"-eq8*%XM7gS)T+O9B0pNXIR!P2&mp*+fEYCqS2:%,F'mX%J0`oEtn?#Ekalo'.Z?FH%HRGi(T6U_NWV'Lp,gTEt=dtS^%/;Nao5"!luXpGc3G5Htb#2f6jn]i+LL?,1Nj,^_rug0^IZb%$?jB2V&1HA"1*j*A7^N79r?u-U$*/pP9B54h<g/<@6$*%X#Y![=ZqEY>Xsj>4sC%jMZZlXf7iq*/`3f^muAQ[BWNFuPQPo7b>U\.%SJ=A+59%'3ZU.'n+,i(_DFo:k"re_O[#3Nb?lJ!MG5@,L:QjSe&;IJ:Uhb^hZu-PdUTW44+`7fZ7ll7YC9-8RGTlf2NleR07Xr@P%;.-C[hnr(fgNfB$)K#k'/SuG*F[O(a$HDAaj[':t)=V7hGD-GTAD,24\XRH:(^04cfAIl.VQCQ"L,p?K<`bj!6>YB8a94DfK2QaB%_PY6aeRbs_6a+@+K?DLmKH#&JT^49>^<Ap)CMK\J:r@;,h?gZ%(Kc'j[c)TS84s"^OqHEc-JUVO`i)8X\^DNS4D&DS7:b+!j8gAH%+a%4+p0&T=28fj.rV$FBBZ](Me4(0,XDE393urQ!#ZsHAY;clIg#IZD'faZr^k'J:R:I&1;/BMj-Z9L&YfK"Ad_Kg5WWtJ>9=D*e%O[g.XNRK8HZl=9DT_'=+XPd;HEQI>*EIBE[Z6i^hFFVD1Os#V4rse-(Utom."r\'kY4l<`8@.&]5X?CoYjuKrC8(<^]*AM"_Nq9<%Wh>s/a')%'a>5E`aB"I!VuS8_@nRSXA![P1&T,$G[P#=Q_;dL'hF"!Fg]Um#`q;;Dig#J2!<Ng(p_tZJKU\/a/uJ`cG:(0j>_k.m%nP?(i6*->&=)0]9G4mbM-#4NHIkt0tC2/.hM9\QP%VHY]^,"lV,DP]P`ceYEZ6#$f_bWN%O6P^JWpZQe8$J&-1a,FoNnEmSQ7_-*%,m<o2AJ/0SUu)=`;9S"+2-dgimL\:=Y4icl6b@`hQ`CtGJ:bY)0bC?r^f_Xc3DD]2a`m?_9g4GTm$De_,jfDC&7X)784b)0q;a"C%Wb+L>4P#T.7c7Ei]Kf_+kD6O&Hh9="WQ>g_1908GS;0M2)Nk8QZ[g<<h@M:q7r!s7Pt8MJY.B-j.2ieGF9(3,Yh80Ybn2j`F@7#I%e=t(F#:-]6Bf.2FG%er&'CV&t`fS&V8]^eG3V'&j9Cb^`r:L36Inn3304_lQPGr:b!)OfdRiemd;dFYj5`%NG7'e"69ZpJBSTE=2%!mC;=K,?ih2Qk?Yfj5W?5&<#OB1N1cNlq:9aCT-kk'/GCL+)sHZEmT[H"RCU8mm#m61@`_JWat9UPb4FV.U*5'!"QKaLrdZ/th<i%LK.TY9N]^3ehgXg)4E,d:;Q$3N[ltF95)UDfW53p'%,d`9t7&d8DU3_3AD[OCKUTjP*(DO*G-0ba>c\H.jee+JRjS\W["WTW+#g>%oEbX53D58EO-"L/&`!9<T!GjqBFOM9V-Hq;M>s3[\(Qlhaf[Im+Pn9-"9D;sr/3+<Ol;_5$D82pW<&?=UOaJ.qIVGSr[m:p=3Mo+%4hWCK_*YCm3gk9Be4`kAIdYOmk<.dLE<9&8k^1$9Y^j&^*G_!\RA.@A<imdeDl-hQ'kgTSH(V8!1UtMsX0GL&6)?XFo:S-5U;*C\%.$>pGbkH]:>Ys'A0k5Q**sJ*05`Z'hO[lFR"l!a$<U*k$<Rn2p>[2UJ.Xe4YgJTe_5_2gh5S;_C$k:VY<5DpDq=_VB.mKIQ@\VN,%frpB%Oe/FUmf5,mmTL?f[.$D\",r9"L["k_;Y6So<gL5@#c%&#K5X\HYDR6/8q3+8S55n;,Ir?6([Ik\kS2$o`ei;c0LDB.arZ/\%Y`mIU6!?o9,$Udn>P7M9+ObMNG"_('fS%)(;gEGV_V/6`MjEDbcDtNl6-;*b!i96!=2-&2n4.g9KXCtLUReh?</^rQ^e;2je:stk%L\D:Pe#&5^Ji0>A/_k]N"jFLc3J)TH4:M"mBaA`21rL\?1d*tWg0f\JS-.E"IHF,L"1K.?aK#nJ4$0(FW!U`0S-:f)Z.hV(DHeSe%b'?=$)3>bHA&i0O9r[AOYo;/>h0<`4NQbkH@p?s8iD]JE*&l!N3l98J=@F7tqhKkK@T3KIXp"Md7MVf[N$`,5hr)].j-Jk0(:d:j%g@P<d7^Ff<,.qERBF^.R'48f`K#XK*AQ7s`:),.SNbf@)8>^)<RBE@)8L9UWT_+^W5h%G:YF\hJ$[HBn/PNY2Clo4Z8V4es;/R*.%Q8A@E<f<<E?Kd1V6[0XR0I<jN]7gPV80T$#H*Y`-<T\Rt.ne)GTdC(RVn,KT9s?Is7)7bW3?+gnacSW.,!%5;!\>Zt)#(L;V@bZ/%VdmDc=gYnPbe-%lmr=03kTs/l*471-XHjcEEZ'VmBj.[/^GJ;F@u1e8`?[fIlA=:/DRA!T?EI?BQhQ`N5[Q2)2u=#tp/:qFrNKV>%GQM3=K(OOg):"-]`Q%%X[g-c`p]XAOCN^<[1qHSX>0A>!UQa=PJl8i"<8am<%-2S8oPhZ-4"QVo2b,hMo\$63<bWT)re1RQrYFAr%o'W(7]!(&:mTXY(<?>-Zh(qN5?tElPPRAHPq39(&8V$SD\@!i!:DSt0QC%cW&.5^&A):'R;RZ$4hZ'%L/M>CT#o?i8@gW5$E!@72%QW?2c)n5\sNd'W2eN98SrYh3>Zp49)^H_\#Qb%@$bc8hS'"`IUWO[[hFm(0XcN`IP16`)Amj;`j=o+in:Ll(dRs#Q\k@QbG6qoe%%_J;P9TaCi=kog`A:]Me:e1n'^+'Z(?UbAa#h-NkbMC>?%#?e"o#5>=SClFE):Enm56`(<-DhHS-+2UI.%4J,p6-Mfp,Xd&-/-FF!%4JG:fdSD^D0WBRh$F@^XBmrE=_4e'EDRfFh*5H:3<aQSPc'O8E73)Sg.^=-4UV[L"BH9=0;K&'j<&qZ_Z+j%.JQ)BPCg&OgW8?qG%=qY''\4(j(KX5!umro]u>LLsu4"8#&RWa"(^%O8&</'`pkBVJD^tM.:PD,=/.YUaI*/A*^[<TG)Gp'*_):?l<a-@6i*%=-=rqrYW%JQ*TZ?CFsJE`3X(#0=-"InEFe9h/!92ba5camJN>B(39)="#,K&JBZY%((^>4!6FWJPPH3)M!rlPP5"[6PP3Q6ZSI<o7O6D-29#I%qBe;HVD\]W+N'(^W,,]&T&fFm)cQ>=2IRiQ<UEXR(N3]8"iQ6-JJHB-,-D[2H-<J\MtdhdK_E6TFhaQaX00C`!7Ko8Bb*HeXUQl5%/&#[l,LaDu!:S.L+bGdRo7'Q^_S82iQ)E3(D-oLaQR)i_`PSO0E)1(3*P5&8`i5r6`FnD0klMha(/crE?[$R6R$/-Np5<a";%#Ng%F^_?bP"bb#l&j!'!X$U*LY&sfhq?LdDHf+Z(/(jVQsa'C*0JPd'%__GKC@^f>7-ju2-%C7Y:0k%[VEWL\2p`1)U*><SO\@nmu+sH%p]K7+q8$6NTeZDERo3>[3f3i.U.Nsnf,&n'j&s_F.8*;g=DXL4\(Yu2Tpa*NS-Tm6%;m\m3R7#i)R_]e(T&$b\bV\1;'[E>:RIGB%Lr!#VO^gSj]tmbfQ,7g/4O2>,U5:-n&1f+YaVplOi:&`8eHr04Q<*$jUe10s&!OubfcH)>[S>B*/ueq9<qT2cKMFR./pR/rGmKUJ%<4L4,/@k;4-#cVSHBf,pICh'0*)5qK^;NHd7V1K?0=p-&(9_HRn'L6mWR9#=^0d?<TKHcDE$2"1@[RN"Y(@Nt:J;V)UgkRQT8\RT%ELflV3To[0+5p[Url\^_9cisKk5W)_Y:DeM[(tdgI;rG57f&1=8"[Bjm:`/&89WL7:FEm!*_s%\_]RNYfI@o@frct52kD.ciOc95%hm=)+;lOu#%\($cKUcksV5gpp]lmVs_:(?(*7k3"oj(-[P!!iEDc4L/d,[s,I?BG6e7B5l[9uu6Jh8%J=O0D)JI#54fr/J=4^.;_%`-27LnCnQVV(<*RJZ>]Ei%jrQ>Cc-rl`T"'&HD7V!FSY>0rlpPB:#Y^0B\(]Dl-WPa@(@HHB/dIrgMFtA"O>&V.N'gQB2Rg]PR2p%3W*!b3(B3&kKW=Lra5D)7bGRQa+>n4DO/"W3-d@7J!"SS`ta83:gG?gY*!ZRHcV;UNc.6JqXFYB;='i5LL:fsm(!]'$c^t>rj]Pq%\Z@l<b+@@t0!Y]8j0+/t^>cQ=DYcn>:;;&gEgW*e=YZT]UK?14`"=:_XYki9/n20?/,"lVI4f6lA1/kDQ=`.4Qs,TVjjIWP@]e>7%cB\Q4*Rn7E%Rd*5Ygfm6F0/l/P8`ip3\IVgW??C(;,E>&SBSEZ.up]-M9l>b=3rKf+bSN/_SAOZ99r//Z"h[Fj/JD,Cn*DdgDs->%"`*4T'1:<[V>mq%7I1$m;Mf=4Q!O&_BCT/%XRIFn1N\ZCpZjAC.'L/(QTM.oDUG@ICLIe[a;DC63D(CVZ5/pob%t=*]HHuBYcP19%i=5?Hk6@UMqSG1VF5QJ(?o*DW2sU3Z&6!Cii('"TBJZM#d=f(qN5O$9VH,]/U=a5oE[WSV:JsTT=4RFi1ZitHg9i-W'@Wu+JuanF%VUELK7mOTIf\.J1(;AVT7DXhIa%=?V19`6hka;<X>HBqunG\O2MM(UX=jndscJWT5Ui1HhOmSjNK3rN6[PYFBWa"[E/6=r+Crpgf%URqPB'gP9['-Kun3OYBXGl6*poaf]*X-t:$jV7KRUuYn?hi%`%MYOc*Hd`%fM[F/T)k2"J3i,c&$r.C,B'qEOSS8((j^W:.:=(J<%N&6(CAf%thEMf_(#s6up=SKd\;0GKT#Z\hm!'DNSlUn,l8Mh:b<\&k_N[#k=)Q]QW+p$#O3)qk4H,JVYX%23;^r@n?d5$:pV<T,T%<8h_Zk:\bq`[oh$/rbigR92I#qGlRUeZ)jX*)WOsH?0d$c?cP\0d-&b1ETQiZI?/)rgpE\duDf`JWdY3d]EaHnW)&p0#ceFp>T\A%PYT\bL,TJ<HHj?](,73%`0.)p0?%Z#h]%d<cY'e]*8=E(0BN(@=X_o)]Q8n[>kta>N.DnuOAi\sB:CmJ4M5;CVhiBg)d\5K1VTO4%H-b?s9ibKsScNcO6oW75q"`S?"k1"=Pm"(qpF2<O6(+&5CusTM3DCD+51&tN1s2%J$"+[*92kJuaCIFRI_iWS4aq.;e9r1[JMQ'N%</o[1YHEWWI]qLp!WU0gNu1J11e6MY`'+JNO&7LqDkqo<."GQ.k%s87lUPl%g!s0l8dDFkh6:_WCu%_#/%kC"JA,Gp`q%BW]CW"A%VD%36\9,4l;B3#NROd5X8)YD.jII;oS(HN`dm'g)$jPfOD96HUgB\KY`i5u>9^]DdaN]c"Pr#=W?/.o38rj9MBC6RpfBb53H&7nt%>"peGY\,ier]WL@*^@;Gr";K)-Si876UiHfq_B.Bhf&Tqbi)m)\$k2.>jLoC"3>aA*b"kcDL(>bi4W]jkM)A!d5>B??(H2.$\$lV%Cp!U,(bp9_eXl?rI$H.m&Y3p6f.dWr_0?kiThDd6q^`(IJ/Z-_T7X<.Nu4^B)nN)i]g[QcYV+XAGeH;^1P-VT[)SnP!eC)-0,>r1%OXaC94Z5)Caqo87XL"Jj;9DC=,L5K3D:dOf-2JTZ+[SjJYhL.%5#U^gn8h!?j5nu3Z)b`)i.>,4@DMb`O)Z8TI'k9lWp+k%oL>&X%KBIiICe>Li7Z9=\g&<\9Ee?j:>j$fh]6`=*C&PAV"]A:A.CM9Q9dWD<CXdd3CWI4b0qF&:W#E,O<1Iom6T,!AK[6:t,L[JNl0=WI%e'54.(&Ci&P&S48oa0)YB</Ud8Z&h1S(f08l'Vb#5g(et9i8`p/,)cPM@"]uOdpMKKp-#5dpD-04Ut'+)h26XVg<RZLPZKkT>L_V%lK_=Y'9/e`^(]N9"B<tfgp(ofBH%_J;l&Gql+0o#)CM9/fI/:dKP*=R%A.k$\uiT>3O]mUfEamSf3.`Q\\68$+u6]CO9&?`02kgU%["Om]=#GWL0j_Pu:ub=@@^uK^m2^d,f9P[?8U@WX70jdC9>GSF']EF<.1Tg27d/9A1q.FGeD'/4Jkfdif,5$;Gk2h7R7]XVQ@Z81%qr1(ldEC$;Qs/odqIW=s(I%(X(l$YU5TDo@3DV"li\:Ca0lS-g.S@QfG64kJdmVl@bQ1Z7Q3^)uLmXVY$CB=J[U>N6(c%*BTh\E;%e&`1R@n7_VEpZ>P<?:IEgftF9+n;:"M`5[s;W<L)dHHLb4'Ka573TT:\hZpP/`IM8B0C[#c:DD43JKG`@m8S4[;e/lV;="&H5lbP%0p1fL@LAGM\`j0Z5uK1HkD3Npm4aOL5,JSmP@m$*B[I*k_@9)7clc=b"Xs4u8WI)Qhht4jZj1'?rEO$s9ojI3%8).2ANGI1%<YQc%3=&he53l)(#5/D?LsB9+(u`YAM%Qn.k2YduZ&'ui/*!R!52,sH<(alRbj9;rcfnSq"52s004?joE*DPKO"fStdT)+&p1#:]AjW:1%gGQ-]0!4:W0K$T>:?oqH/5:4*g!esSZ<,M56_$h?@,j8lcqa%'g=aeKd7iLfETYL\#?!_+g69B]d7'jun-ikg+].`Zo@c=0cP<]j%C*l'KM5AZ&V2e!d#9SQ\/RD,;09N1^rT-qLMc!=;=2^Xjmp`^p^EP#BTifq,FtSdp]*Z_1I+rUPeb^)r3Lhs50.1LYMn"ap3Umcf%76@3YX3L)TY`\sE,hd["Mer8T7_+m<[h19/,,D9:SZB:[AXJ`^/:1k]Q&9N$4(+e,\+6Na7e]S8K^(u:ZahH;2L:W<*gHC3.6$)V%BLQS^,5IN.%&<bpb2>?6<6LeiFeWR%F&)W\Za,$49@#bL&=89>G'14b:CEh2Vjg]HgQimA';C:UKprc^I*`oNqkgY9Rj6Rk30/st%`K$#_T!+r6A[K/Vpc\]pA@`\[Nm<Y;e$KB/TRL!!*qsRog/Ao@`Ae6@]q%EZE=-7"]UaQ+1(sgXrIf;<eH/.d?:$+G=%dEuB3^!S%gVmVR(k@GUV)'bdDS$nPP+qd)hJN4Y&MgqCKp`u80qHg?!\e-beapgS%ejZZU)@*u(-<#Aho@Z&e9bF$Bo'Xnk:5@3"6E:a+p8QR%b;-@dW4*4M2a(Y[A'([tmFNiI(,f/UCud^t\`&kO'boX5$mmrJ+@4n3=Lh[&TUdj-CZ-b:D6?p`/Eme]MF@Y"KlR:,XmYnX;TsRd%o[X-B<$iJ;X6nMf?Zc?//qe,8Lr`:=VLlfK>tgN(n/_XAG"nhhS?eJ(77WGDS`6(4*)2Dd?^$T&)O<]'N-RCK]c0oe;\!Q&>eJk2%(.&,:=ERV%.i*Vi"`tUQK05"`,"m([n`d/gprNWL(N43cnULo%)t7[@nPn7?;]Ecd!,^!,71"bkn-`r@)4cMI;%oC4$th_OQ-(D0%RPfn]TYYI8(rTAV`sIqZWI[,u9**X8EOJCRle&3:)&c[a\H69+(#Gt_b?@.;+e(lr?ufC0#7pXE;Y%,G-=UE`S,-@=!7?)F=0NcC%4lG4fLFG18E/`f.QhY%2LMGjLa.&q3;D7qA/q]nl<_8@YaUJBeh$^9JUUH?-DsdQQfsM,a8rKj^<DS2r6/&.NX?B\n?(92aW8C4d%mfJ$lo=haa90[_ndlGFVMo<lbc@*3#5<i?&cL5JXD=Wf&bR,Dm,8CfKS?_#_C)'kFJ!<4W$r2`(;Pgr]"_E-Pc6i8Y8_tAG)c]do%\#FI/bP,%d#`e-6db^7r%J*%Gc]k%Q=*4=[YL#5nAHM8u#SkfPN]d!KS"Y=g^8a=c;EPMJ7)5C\rVDLK">M'%g52-""i31=NSAE:%/!^j:jWjMUb<_uPX?Og!Z'KZ_M-7$TMq`^)T%<j2>p[8o8M&!.HjM]BHC!'HT1:__lkQa;[7EdG?l-2B,/.r=D\Lg$3g\I>X(QZ)%"/rN"1r8Y90D9=`hsY@uqd9(_VH4^+;=i+Q+tQr>r#)8t:0aFW54Pb77%si,@!diD7Zo+>WjH3qjqsaORA,\[2#Ch6<36bCL/l6m%.(SjZ@r`*tAP#A$4.LYeQ^,0=qRedLP*tV]i?@2gV5m/q*2HiSKa4UN)<HB)8d%O+3jC'\mlFbO,*b*$".F$a[$>XGW4`s;H#@1?%dj_sbEe"!=o_Y2\:Nq.;'%)T2["uXV"DmF(p?I=V&_^,tU?m%3&49HZ7Wlo.30Z%l[BoV)kaO-g5D=SR[+KK$l;t;H.<D'VQeY&g%LEput['aH3`%4+"'F5\3+>.DNFEhF0$#_rFHg]dOp"$Wk+TM9?$R(:O>ndKNWRdW"[SF8/ZWNu<,pU"PQ09lQNi^^*Z\&Xo>2f/+%'l@NdC6a)Z!B"c1]/7*bNE!Mj-EbbDi,_d@cLCB;>d[](EXTfl1HpL3UJ$kP-f6&#`]`tbJ'?\8H`"[O,-L%k2&hQCSoDuVp*X>+%Re>gli<Q+q;I/rVH8pVQW<`NpZ@b"b\0Q$))A23tU?IDi1L.>Tj@6Y$fM:9?oIk]oMKAN]PkR\/l98L&;<P8mjCP37*G2&:f2s'N%j)V4HNAoIVe^mUG[#`tL:i9$cjDsASZ_jJ.rK5CRIZkH;6HVGBS51kMmRSYW\;uu)qM8:uo_<-&a%[MPgE?-fP0$CTgCMpubEM4Q%:<n.X+?i4I=F3lI4Z62i=<6!Tr&#1h4+&RbCo'[Om+5/=cm1n8ZE($%\3\]+dE]m[-fs[Tp0Zo[Z$\dE1e$<fSZ901_kn[JLsgk^%Z?"%ba@M%^K4Og$I8'Ln)+L&,*s*)KaQ=M=s,,Ts'p-Obgj5s<X>71aig,o6D7&ab4/FJ9@8ut2G^?n7@gJJTH17$Zb=5NHg[BT.%hY+qSKb!TSksW(&13D0m'W*nL>flUIO!&CG5*TB5LqFl?ZR'%eoY=TogUL"N/s:IJYgf2rN/4;%DR[e1-h+t\@jC^(%$X.Y>mb,q%8aU7XrDtM61<Ds+!Fkb,Pu`Lh>-t-4IqZIFrZRJ^puO\rG_I_\(bK3K,ltpV\V+@MW1!^#n0na?Z]F&'(6kDY!6G3OQKD^QW5P@b%<i0>@3>)$4VeHjC3/8":PAX-p,M/WTCNFD&n*05Sn(@"5>#]/RWnucb4*pSlb--mFQA$q!aIbHuALaY4d]bj';`-FaIe=^[*0cn'%@"bm6GWT1K+ARW-lBT)O6M?*b>+$l6g"+uMkVarJW=kEU'f^$Pi!NaB$hAml:PAf0<mt^_]IKl.jiEO$?[9XoZ'TpLLK#9%OGnM4%#Fa^M'Xnf_Wgl3*S%8q5,;pDGq%Qh6/sdTV.,)?'k]QLXKSW:e1M@JBl*E:%H:,n6#Q,IbU)%<27)-.t8go$2a.Z<\1JLXKP>TK0%#TRO'1_G#!)K$S],c:8fX?J):Cip"5Al'VVcn,hQ!t>ZcF-;_TS[0)q`K6?UHq[H.Gh#es*^JQ&VNLP(aXL>:`6Y=8Xm0Y44s[T`%_?W&?01>K=i.R<B8N9V2s3g_8l.oa+FD/e@'*mu8.FB>Xl54Nh9`i'4h5")KWX9VA&%:N<>IHa+on(Y^Jm`<.`TAN#_Uj_+0E2&2%$>.8U#@LaYP:(aK,CO.Q;;A;lTNc1$$:N.J.+%8i3621Ng#fl;RQVBuOB(3B.Bh<CGlDLnnjnN<p$2t-4/`e2J"jiuZn4iVcm$;k%M)J.'3BINqmWfIibk!P44i/tFU+QZ<5DZsb/RN`)RV7hDmZ6b5X>Vg5LiD9neWnkql!0Z?/f<p6.*A6U.T95<6:S=-DF;8i>j77b%*WQckSRJIunDl,+_Bf9jjA7E]09MX5-EG@#d2YD7NEO:KXo-:`=jL<<X4U^kP&H0D9<jm9p8kKSb#g""NTrh9R:I4;M_?:c5r=ls%gk:?X^U8#i7*oP@\BkFDPb:>8[$)sqW#=[WN-1nWTe7&S8t`4t;mM2T;3.:W7A]R/pP#mL?K't26f]OCQZbe-Z<cu#7/kn>ZNiR[%6.-_>4pHn(^#I@NlQKb)VO+r1i;m?dBucd*+&E\*IP[J_$UA@6am/#M":`D%_GRjA`p6=lh-n@`$!-(o:j:Q+_F7T!Od,)Igft;A%S2+%/Wi&;)9D6oaIZpMC&rH>[IphH$S(pY#B;\l^6sJIpdp(6rME^[CdRTB&j[pjU"hCs5'?UdG(0hFUbc2)M1.6#Ua99s6`B1Y-%@Kn&j5b86S_s%fr7Hm;g0="rjdZpqVE^`G=MBgqSGUD+[,ZPQ8/n\f9$O*&BUi=(qbkHhj,Yri,d/7(;EkF-jj6N)uZ?-:-93P'9%p,\?73jo*3]nD%V3kmFQZ%FE.WQ(>=NFOC;<g`5]Ui,0&^<Ok3.[d,hJ2Og(D]2HkiX5=Po:O)pq,7!(=h*]W_@f8d7PA#17WV#X%<X+,k7XLZ\VPqro&>2<p[ce`4KJBkFm+hieTPmQPI.u0V.dOS=2Q*Lg1!NI]mcDT2fVnJ<fhX9C6KOt8\^<]Jb=s\p*p"/h1Y_m%%(tD/gCI%#"UT9No8C^n2)TeqO;qNHhLO3</+`bK`&kmk-C[;lr<c2J/l'I!0SP_/,C7B0*4TNmM,:!?$.a^'l2CS@HRMrcs/l#*9%9V$O>OsWY'8b$/uM`(`c+!uUG!&i%=QhH=>:l4eHFG_PqXbDTQa+C0aM5c>iqW-_k<ME7#LY/fNKK#?f!Z$pKna3?*&nTT.!hi;0%TfP#JHQP@<DC$WAlKm9GoZ6$L#&G%fq(Yni<,oCt--On5nF`N'=*"'W!hc8_7jiJcZjI@c.J+m^0UeG7k9fF)2V66$SL,1-3EqD#%Td6c]MGOl6?$?N#&i(8C^Lj`R?#P-I*md1JAAV0>3U;6l$"m)%Fg#]X*C:lk_!IJ<?]e:R]@LoIWAo!M4L=>i(D>g'99LpVo5uHh%WXf/*:\2g6c8`92B$O()gD4F[Xro=$(SlZlMDn";\f"jV!X/'B$7.$U`pFRr00<F)G]gdi%Y_9GnpQ`fG>!:O0O4E.A]S>TSOCk,%kK,u)]Lf5@T)?Vo?<bkeUDEbU5o5)dDr)-@SYJ*j8i')KL9JP>dJ"Yj;C.!].P]9a?$I(l<\MYnlH1#Z]k[8L`TR/fUda\=_udP.%o$l'oX\7:5q^r[^L,P*L[d$a^:!MMe-Ef%)^eQRARS'G+N8,C4GGK:m'EX'POS1,Qs.GB0d%`[(<k#-<J7V9THTN5S;\l:X2RsQ%%=.VS&HEuf^L@ANpCsu6VJ*\q3iI_<KUXPK,S`/,&du^V@QC_A8JR\ou!=#DreTQo8Q@FuaGthB&hIt2_OSnslAD!`MJA+LIjSc6`%HJaO375CNj0LC_qHG6C?UFAcKX`AQE:,>PnRrPsX3FG3_*gPlDBW+-1pJ!l6*<XA"pT$n7*s.Jl+OtUTaJ/bUoY$F4:ktq]s70gL%KN:Cto`Y<<HR4`dH!Y\qrpJ@1!ggi)Bn=R`CCFo$7G,#qZ!BQ=$P9Jj0rIs/Z8c[$0IV,9Fhc.;)F61fWbIIdkITR*0]aLF-F6<i%lIh<#4j&OI$rpUr<,rd*TGJl;@=9Tso=f[.GC`-5%SlEo%Loi,28kY$j<.Gc'TXPNW1/fbbtTSt'e3sC&i:-l/7)bh1167g09C-E%UB>_l&@+RN%Jt4kkU6>mPu2W>.mmPK#-ICQ!US3_7XHe`;cUihecJR]2@3VSA(_e3nWS^jDB@Sa<%oNe22Gt<H/TY)E4)<CfH).q%gnoOtc]$+SGCS0.-N5(-%(u_LX-mRkTRnA`_CU<_@@PhVbo1>mk=12`C"e`W^\PM"fO2&PZ(Ns=ZO,tg2UD')j`jYDdIm:V+UU:V%UK:.8T#cj!_77U[<=jk1l]QLe\m/6!(pQZk$WKFG#LIuE9!OBp\99A;SMZMd5\2FZ%HO,R.5?B2#WCNVnTV%5pMVWNc5KH+Xi7hn%S]W-V;IZbkh:N5::i0Y:VT^>P5DKtX7>>::P76,;olGHk6#p`/f=]shO1oC!Ee>Z8P9h?9arKr;W'0Eedo.8.'()pFA?!4"+D"@D%&=)R](Mg\jZ1m34Pb,2(:Lq/@Ra)E"^#dXSU@3lNA&O6,=eOfj%X05j1P@7JiSMim=4ECQ'q02pgCZNZWKJS1&C_XdrNfh)CUA+-%Wo6FnYr%\fWtS1/BHQBi:P:Wj+"PgQm.`D-MrAX59#s;512;^DOORUG,M9]X<0Wca<,,qd"uLiF^]t>c`'MOs%QdPie)6PR8FXd?%FP<'2>:qB?IW[,gY;a'sNF/gID&?g)Qof?F)JmP`0&YZBiA2'G7Q.O-IVY)bek:U08V>ob]8r.?27Wfhrgt=(UBd"02@X\Ng*p9+%Wur1kmBg5NAMOFhLedKIc5(q/iXKnG.0=VBa5SDbPC9@J!or"+Wj$>(>G+Z8ofh8+"9$#'\J%.*A'"26r9iW";oYL2*Ube_boWm"%mAa:_*ct$coa8F:Y*UB]R>3!+OF]dMgPEgI&2fZ'FGCd1=qHlMRQc?)j?_mZe_sNs$W.:3A')3tYdJqbnkQT=J54W\c50D,o:jLe%Njjt#<^YSKon[fiXe1cg_H.:*Oa)@;8\-.H/-$;N2_t!(6l#+O.]H4CnkijG;r2TeV%P^d3NZs\.KLkpOsKQUl.pQg>d"/(PSN0F%is1!>'he3X6>IamDWSfilB)BRp6c)UZhgsG-`J(]ATRq]<m%RJrh*"hAOL;tTnn@2-j!CGRSU81$.HncY@@j9:6cXSh`31;-/qcE%6L;eIM-8O^_f]"F1'c0_V;k&qOHU&5Y1lMk88#?Bo6PGj]4oR'n)<Fjeaj]!1)4M*Fkju"CZB4Db.ibT;'r6op+%c`@$F`01gjI[%CTI!oTRumXBNX(D\/f3MJ;#Q1'Id%,=KgqZg)%o1dMFPH:lZmeb3XMd8+\6RF#GD&m&\aT:NCSZUI]E;W/ht3SkO)]%[.GNDgp&m%4ZOkTp?RqoLU^q:mhKCnq/n_,lKg_(<XggRAGeBU0[]5P$Rp.n6g(kW^H)X>,QK3FXm^fs8kF@+9biOBn*[,*1SNCdQFg@6(q4K7%75n*uY\hiG6tf-@c8VSV=0.mleNqgWhMKd\fKOIE%"5(Pjf3A<MMa8m.C.BPeOB-54KGLN6`A[%Njk^9kfkTt![qioG5LJT&r+l0%ZCdX"D/((.Y]^?Lj7FcWh__=87`)@p5Dg>")jA[SH@gRtZnQ2dB^%cqq4O;mfK>c3G:I[4LmCZ/jEc#&=;PaK.6?(cX92W[IJ.[X%b_F'#JP`DA``GgncU6OoGB_lrjmf+bAL?/cM^hg$6L-ncD<5\po&%5FY[V4]>O0:=@,cEs-^1<2WC"j[pUT'qUEcmV/!?_qnlE/j%ogf_?',RN^`^(nOaC!%U_+lW+\s^^8$(2XWRAj0@0LW2rVI;3.6f(bOB1e>VK2[6Hq9]Oa?'[sRYr\53jkQtal[)m';.Ytd:5UT6%h0r3<!L^Uf/%$'o.>]Ji<onc1$3YD$a8s=p5XI&31E3XjP[<=f%^Z^`Z.iq/P645sq6Y4c`9E%k3s'$E\kWBn0)%lX"M(p)VhHO_%%m??S<g;TAGCIWc8DIL[#IpiMMM^m+\$f1p.s$)5qW$&`7/2H!bDHm.0TF"1k3=s>DqO6b-5LmPEVSWL/b>X[n4_e56.K4;VDD6+%IAZ/-!lGUG8dhV-70jhiPh5cN@VNcY"1RljmTgb'$5:_4TN>ruo9^qhkYb,Mk2`AiG>/9=k"rMI;K@hM9AA-coKiXn25#%^0h'O?%dF:fKYr)G+T,S@^M!]WkMBjiI>#>AgR8:r;#VBtqp@[^"ZgRA82i>e.UWf\Ka>o`qRMiH(0g^Y>Zfq`Q7L2p>QeIJo.V*EHB'g8/%aBi!A(k9AH>dKooRT^;L\7ThR%bO0,Z8-uiHfEJ,kd-4%7.<51KE?m,)00st>Hqo"AigqiGq9sig>EZoJ==7qi@O$"C_E-1Z;)lI%(UMjd@C6U7WW&Dq,3"WTg$kX>[4<lQY=LDLZ$#li7>jbiQ/YECWQP[:1urGnk7'C+5]g`"b"*Hm-?+Vn;8q.r;219''LTGc"iNni%HgSn:/<G'"]P[I$!sq&L.]IEP(u48mK`fUP%8-PpGgK8R-<V%[@`J/_\9*ZHE<U&`Qo5(*]I[S)FXP'_8YnqK5".2bf9ZNnlFF?m%(WJHQE=%kg'W0lk(`Tb4Qcg7&Jl-Cq;$@7QMOi>53L$7'6P27de^FV2@tYcT9hg!d;(sDo"7kr"2GYNblq[u"5fF)*Sl>AJ7Tbbc%d;um*LhS\1k7n$+Q]Z`*7!$u3Ms]&`r4C.B6[]E:lfp?4;H.O=VuZB,g@@?1&k5N,J+J%.-i7m,,uN!9V0'[2cN,PE:T'V&:m*aN%$S3N+"U(qT^LB$jS9mN(6R1*nIaq.EVr@=I^0B=GY5+Y$pZ7<T]#Ep^9KXK,l4h]Ak8Y\W"0)GIp=.o$1?=gIDl*cdfi2t3Yb%op%8N"aY=5L@_3FiMP(o,#4c7$sF(fO0kD1gTqrVJZ7'b*R$3Onm'h!k2PcIM6lD_/Ws1]Q$?OUs"D&WFo\HH)>b"!-D5JRQeZ4T<1D%[?D=*:@.WRj2r8u(,]OBjOd6T=OZpF3A(bGW\,=SM8hN.660ds;?bkk9au&5-S']W`Y3XOF/VVANf`PejL"!pPoP$(f51OicF5n\%s35flTA*0amde8]?^uSo]C%\&d8E"iOOfA$#N09."sTfd9eCCnaqmq0A>:Id_\B,ggH!s--O0OLkLe3@SQ`Pn:9eIu16_U@M0,OH%Ut\S`71<C]>cCCk3=)%C`8FQ`2DDdSE:nA#[HR^b0]m8Pam)/fY]guEWs<LV</6.KfkCm@qDJ`okfa'i,58pi*YIpbHSO%jir^%e%Z^Xm;j\t-0-l(tU*dCm!YCk3\$K'U-H1uNZ2"P]rTYf(37S'IWP&c^m#T^sCkmLmTFMH^k-El:8VOM(E-@&fU`m&4E)>@H=H->Ai%(d[X$Yq&S)<mdil?5D>:Z*\V9b>dW5X6nH;r"Fdc^RbE&f=uc*++FY_o%o7kOp+fHRj<k;47g\dl7&OG\gq5>ddts<X1&I4I)Nk)%RWNb&=[aRJBpGJ!797P'P2'_#@T1MearQe?7KdXB#[V_(5q..#ETrkMJ2P&/WI]>@[$i7&U)npS=DP'Q]:Q"(J5Ak'mu)M5lUTK+%r3-.0##=cE$.i@RL7a;VCBrjm!c'!/HFY9nR;:4":7AW!:hG$JVLMDE`@ZFIm)b:Qa#u++^+=4+fej5Zd=HX0BiF,n*23ImHr3L:%9@s!%-?8$qC#&E!4n2]:aqVT%2J]NjMuW'&@gju%NrS9Lrh'5ds8N&uj/W;O5D<=?D_)LJ`X.CI1=AWCPP/!k:`cf`p/b7oAd$#9%(gWsR"+YP[![hG0p#&_+D:s?BrfkL<T;Z0-VgF^"6Xg*DF94!n1OK/s`r3VQL"IPpXnRCJ#l0:6c(*U!+:L5,jd[MlMq!;klr/%e%EB*51jm%G]7_qs,E%H<!Nrl#bV#KXji5[85eF2S.@MCr8ob0l"8D5?sPKAb1YOD.&.'Ds.s6#\WjIGRlM7lHF(i;Uono*6B^/=Hb%Dlj=so-Fq,H.tre#Y5o6U=H=ucK?fbd\_EOd[Ja\Zj[!#=*(&(^rEI9SPHjbJIlO@$,("TWJ^AqV>]XhC8!Re6pGG0='he;:nRV;%qDmP]\ic/u3mJaM:m3+k^pdSMdlo]b#F7-VNV`lm"!f^KBHr\>qoV$+;LQmqYhZ8\fpE!_KH5@2O&_@rMGCcENuD`mHJ7="\oOQ-%%f3+B*oj`%i,U#HFlUK&G-r31)Ghh/j)0!t9(!c9bp#0.Xs/BCN(f6d]&HZS*U$BI?QVfgbGW^J]!Juof_Dg$(gj9o0YWOLm*Ti!%!6V-M'[>Mb[FGNL<Lh.1Nk,i-?pnM>#>%pr`qq:-oR1P_Qt7hlGH'Oq@dM.R^*7i?'oXfWKVec#NAA2-$RPW<A6r'IpD1r%#3AWR%kaZbb2b?m,;DLa%0m[/jXsT>ce/[_DH+GDnisP<VWO8t*"/SQmD8jC,DHM&H->mt)Ni!G%.\/L=##)^eH71HZ!Uea7X"tG*-kL4i%Kd.EkFLTQL%*4.d'R8XMIPODfmeb`8#ULEI,aE]<(%p-@SpJ".2N34Bc_etKdc8WIP4"Q$k_KhtLb]e@__q9V):@Hrc<rY=`\jk_%Y4HnSA)Is<hf#m$9TL7nflF,up)bg#;qs%!^S-B7%d#^Ai?o.Laa;G5FS5d\^.(oC9X3V@HV1<poq7aj;BLam,[2S@N38sM.no!M%LGc<sZc1S\@jSpc&#rp@n\,F)IPb&NGP*F+6V^QEm]kYfj&0k/PN"LW,KYNDj!(%;%>@0Q4_]0Umk9?5&&tC22'iGOW1!^g#h,KV%2I2-VGR8JkgV'6_ObqkGENT(d1:A!MYoo][I'KrgC#d*2oe5O.ZitDB4NKaI[(D8kEpO</??,!\Of!G$-4K)[]1:Ie-5Rae;IA_#%U(U"&?AD4=+^)ni[p%R?]+`a:s(4JW:C?M,4dD3^181KA`aj>lOnNBqEQpWH#W?dR`>@MgV?X<O<XH&iL@]H1TT.SRa]]GE<)%>=%bR6chH_4UR*PTgaeNLciT\0VmPS^)J=K>QG"oY12Fn5,<iYZa5J4;c[+NmUVirTHNJ2\P-?"0@Q0W$q$U[Fs>csaKJ.d($A0=Ai^%^6!%J?(\79dB)Ru57_g!ZHEc2hA,#h`=<Qc*-EGOj-pm$aaJ\[QJ^8,K@YVjA/[a"]mptKD@PXF4I&+!E]"cS,R%"mW-YDo07Ico%kem]P\Y7koH40A2C98&B.jXH!=Pu+Y0drE2Sjj(iXXAN,'KDs8k<SP`4U@FPgD16ZQ73brU1#=bq4OD@;I%-0U#YTM+BD-a:B:&:%1bn%NaXAf\o%_r$F>2qN/[WA)ZGbJnbQTH6f8R&XcDL]N4k\nSj9R4&G^A]K^-BNd?Fi?=CSK)X;kAt9/G&d*i3r__P=C=r@E##'%-)piK/W=i7k_RjFNCZhWOCOuXmY&-+W*SZ#[k<')cJ(u5N0dp0>'UV`rFV>>@Cb&[]9fL11`&5D[9B"KCK8I[1Ddgr'^oLqX4g@!%mS['2->6q!*4a8=m'K2p4cD*4ROnq;$1s$k^(a$U;.p0/dLY0[`)DsoSK^gq0T?ehWK4rgL4\"WdFT6qH$2";28T,oRTD3YSl:&p%,-]qeaAh+JBhXd][2VI^Wa?U)_pAH/.EK(q:F`7d#Yoq2gZ=W>3d0-B7bBC]I(Ll^'&&/TS^OQF]1t^OP'L3hX!q9>o3'dQ!\QER%/r1J1kc"3#Pq*PJ<XY2n?#+]*OP/XubY&u]MHEO^H??i8W@bAil-=/^;kL=Vj\I_<s1okPAP8Qbo[^'lT4t=74.2u,]V'5bMRld4%Gn,mI0PK9U,][C_(`O)i`<=o"HAZS.Wnu+0br9R%'aU2H_T.8&5_Y3gEADeN9QAq+HH<NRKD%[KKO&,'G(Q9an#$`P!M3XSJr)O$%(q3;:$'3@m#3]\=@&@1Gl;$sB\\aB.c`(JRVW7B'>&V$)(WB0,OE&b4]HbYD<BP+EEM,*V(D\A@jXs@7pPqW0eUt/pe-btU`c4(1%*a_B3?^oTW@b,971QpInQtO!ia^ZL#47U@[(>FJg)AKVB6??J<g]9+O>BH\C.!]BfF)l#[!(M7BRmoe;'7+6OZc4OsLOLS].Ii.H%-__:tG;l,,WmbHO!Zn*[fh2T-CUf]*AsO49+_gcqC]uP.iu=B`I9L.SNEQ.>71[/(rmVoohEg\u'8n<kR'JF5'LcUpish[.,=)n6%#;KHg>:K<$*6KAATlg:=H%Wd.j/q39[!/hPG6_K4EQR5hImSk7JZlU!0Zr]2LPFq1$P\K(FR=J`TX&W)O^QWJW[o$pV1T!,]koWA%3%_:lPqSpT;2+eY[,f^g93.Pm7E'>-giarP!:T2>+b+E/G*9FMc7h>8_d%c)M0Z##GW9MScQLud`f%$ugE;9Tc3=Vd])U2=_pn*f%_I>[+$&CPf*OHP+TP\.Q/&MGKS/20^G;\X(h:7T,-L?\f.FK2jBLOqPV-2a7C:CWs10,<+Kr:pD3%7Bs&[=[E,b,c<@pPO^RBZQ`%;P==#"3!#9B5c"JGOo!dVK-&)nZRG^(B7n%o%+CE?_+#Im(P^=kkp7,)kmWrNRNkV5K#QR^udDp1T$4ZXhF2'DcsS'Glb2#M#::f%ElG!Xk^DC0`%-tV*,(<^nWdUY@Y.,XY<Abu1/d*\<kbJ^DKC-42fHsdmt`_#:'9@f;nkp4jKf9qK#C'abe1Z/@ap3fF&M.7*R_UG%q)B'2dMu^M+Tg\uHSt4+BOi*a\XLj/Bi9Y``Y#IoVAr_#bAs8D6"=)Het]YtcCdq/91^-"/A]q-Z&tG'PI%Kn=Fh)&N.[FiA64X9%E$Zh1``.0f/"uH?D`.97hg[[mJ*^sF89S?.U^3h);Xi&PE?umHNeh9S'Q]&U[1?14,^I"PF\4CZ+fb3-fs?`&ISe(Q[k4;\P6,(`%':OPN\8&7aqG@BY0sRM;dVtAKIWVRk65;>o.u:V,A65R'W_L[LBMSb!iG%J&1-mph,Lmr-mSo)XAr-`n.VP#f,2!ZjG&QJ)AI#Y[%ADhqpIg-<J=r(Z;4h26s"'TlT?Y\&],Hb9dZ>F24M[aVDLTIV@*'a$GWUWiBgMfZ)Q7YuuMS-8sMGj7I-TE2HiJF)EFQJl?VrAS*%R3E;Id`miN:&1lA/<"CLTu6a-9Lf'3ek*uaqE]r1pn;%NE*!)Jl"O*qJg.e0W0)281N3gZOa5B/.=0IS=Nf5rfqI_Mh3Ai]Z2G"]%$E?3S0Wt:$Zt]4G#XdG8<4[OJ!]&3bM%_+K$J+]HdDM3pcpoL,lb-D6UC/s&X3)kpEk5AT/3r%<?.+J^<KL'!o8WDd#_%(op[bj*%oL_:ZNd2Y(7YYlm07+4+p1Da7UK'"BDQ?'LMjp$=d5<JX:FgEBJL>Q.r:\7+WA)A<.lop@E).[_YD@/lKmS[)0XgF;LaAV-!nK5q%)05pQ;E^N?U=D($3l"*e"Fe;qTmB)!8OY(neR76[rLcB3AP(jB\Y(cX#[-m5.SnB6he.%bl>s%dD-H?C<,?#U7@A<=a[h61Vdthu%cCuY93P\TeFR5Y/%![2#*"fu0$JZaR9hu[ma>;l/W+BPTX[U1<\dd'GV/Q]L"SP>05Qt&mnp1oVUA)Z[rhL^M(X4D$075O@]^sfh%o@l_<fQH/uND@!De/fZ;NfZqCh2:6?#4X^mDPI!_@a8\+Y:<B'd8knL\<[.!&I5lsE<RS13ucg18Y<utc,jlRY',Rl]64#^J>W4>%ci_'0W39Z=]^_N\TB84caS-2;hBJD7Q0_E4-5*="1:dQdc`+9i'*OafZZ-/m:%_l2Qt<!:^aWm)=U7dFA0h2eiqmk!C$1@\/FFbS%Amo#_+dt]VCt%pfaHibT:+P=`RsfK7R`H-1bOt)ONj)7%^H06'1"*`_>B`9jErR=I!/rB_JOl,]MPe\rk)dkGH8WshG;G=T*GA"`%BnC]FH\2`!.J<eJ@pKZ7dE(dE>sKuU"rY(ffltJF?bY.-SMC,).S\_N``#5sHGIka&=?Y!O[dkpg<[aiB80<,d?8Yg5>oKAR;*^#%3Xk^UWb+jXMu',\=%+09,r/:G1@::>q>4g/FpUna20[L+;Wr\"NaeuX8T?REj?517Wr'dLr7!d5?<$/N353"d]YCh8ce.ZNBEn2q%eA)@_r>Lu._u;mXP'oo(%8[IP:R\[[>1PqA$$MMikVDB)L3Ub@(Bs5OVo<0JW2QE.2$%0=/"1+$e[K6PP:U`C@q9SA-B3ga^&TF;%%3F"O.1Z0JMpHP?;+Tuir7G:24^NP8l9SEB@?ePRB/iEN;cGIdQ:Yg>9p.FG>qf7^nrb:t$Q%ZMP(K_"Au(SmL?d;cVHtHZNJJ4V%OBIcINIj)clPE`t>QSO8+<YJ8c$"i*`CYe'('G(&Y_Pi%>ZJPCFF(9W6)/sJ'(c6&N6MY['n"[$(am0'3>?%Tbe\!'_[[!lG+I?+%0m4s,T)rE-Zk-CbSd*%.QOe!O^O.Gb'Eqh`#=\,o_k_B@mPhW<aJtpE.t8&1l-fmF0\^4P@S/AfY-cc-f;)<F4EjKkgi[d6l>HjR%:#[ibbrn`5Zq-oLIupSBh=HLXK.@:L_.RIon9[$ncdM`>:RZb*:QO+4lhY`/#*7MOq/(Po56&2!H$nIip%MGVUD+/9h_+`.HTuq[%6d,/?^SJoupC-kGqhq*<VuA.FhF)P$__7i:qeu@uJ)BeFkON>7._iAeHNX+mHYU=Hr2KN3C4?(clYl[Em(]r8pT:7jHS;#b48e`M%n$1PM_s_eWG/iCgmb>VIV`Z=[%Rs$'Cii.83E#Bm9]cWl.N];:]1BK^M/;Q.*Q(,KpFD>hcZ5d"6?6C"`;*XeP_OST!X/uB:9MUj%q7V!me`pRMbihF*!e&MRF$tSn!%+X1>FI1*YODL^Eig\<hOa0df:ii^V7k>Jq!i=HZL02!HljYQAh@]=ZDnncKX)<"^&W7h>Oqlu%ar:U!:,Jm#R\;\b3F<9f>;MCdS2`NX?n\Tj%0AVpVbeKKFdb_2qA$S*^@_Wt$k@-[F8^VIV(.*NP7'eVGNXpH)iGp?5'a-*55S&%%mYY1J&<".GVY1R<_g;%]<PncGQnNdg/>.)!WtqSXF@Y7]ATmbO<H*n,XW\*`:.[6g"1(fm;+)EoW!`&f`.2l!]THpXK1J&pWJdhW%'[=C5F=iap<W?DLX5Tf!+M2+&g0/N-N8lic=N$]P;9h!W5Iiju>#-ZP-t"47RAq>p:DLtrSS`bBoYp<cdq)<F3^64M'\i,i[<n@[%<pS88+l^s<r(X&!p4G<\eXrl`?'&-jq^P(pf-^'<0FcOs_>(bBF&j,[#aSUGAUp873!?h9a&;-3PbVj5+m>kHp>Mu:.L0YI.eZ+/%SYW'adW:J279_E2l/.^WhmH@BpVmA-j8!Lk##'/j7g)RP@<-[,HlP1o622k<&SIV9e>'St>RY:$X\;+h?VY@JrisVPRBohb7ocF&%SJ%q[h*tqldtN=A]'MTMP2h8unu`1S"eb`+,l7n`^U),$Z>iq=e?Ce@po>5&'H/:ZL5TJQ[mnKrBrZA@Q!g^Odj"66oY&nq&S'oO%+sA)NLM=DT`WVip.mu><AqE2,<a7fF$fc8!7hk!)NX4(8[](_XSUt`P]M+('_C%QMQ^@TO0Ws7fjk5`fXJ^NbKQuNCIon;@A6&5/%'"kp*q$O3jU6cXll"^:8$A,4)CK4(:>tR<1C7'R9e?W0T6,^5>p95r>+=G2j3:iqQ9Q7Zt6h,n,*(a'$_X%u>?Z^U-J3hUHkgq+g%j;AN7(+pAE[uTfJKKr!EU+,g48M(I[_i9`!UQj(JY`H?`Pj$7U60DtkaYVD?9:)'W7mJR3-gSn'A>WlsoA'\0@sYM6K\ZWcP[\B.%VMbdSl`j@1Fgfhh/b`lmXah\%g83o*KQgu\'KpoGj_L'CpTYn!Y0<50C+ho7DN0/Q>W='Bij<K:?>7TpfSaI[HG.1T8J[Xl^"PD'%:BM9Z`d?!eSgjJDQa&2"+Qt5rn?rOA;]2-sf>]JJ3EltljA-Jh`.@Anp!e71A>OP:Bl8AS8Vcc"nI+Erfe?00dh37PMRk6u8WFs$%hS/99QR,b;(;5W`O@i$<j(1QI\,X^k$$,OeP:<%"ReQe,qR(,=4`4ornOiE%p(neE?b_'GHhHForVCr_l(@^Vmru2>C+AN7`Q>;>%Vn,'i*O)I7R.>0f54?7P5OUSpo9f>phqM02[(#N&[hnbGpS#pJm`f\K*_u\QO8JD"]A9%pm89,8oi(fo+5:`,EW<N*k3r!7VgWeP%k4\W@;r=ju%KOrV:u"FA^Q-!oD9Ldup7_Et&d7!,O$Z)Ic>)\&2BeB+"`'n0eaZ\3Tg`V&ZY:!-+Z2@j9C>8TBJMib!oUf&WZn4'%0LS#ld7S_F]bsEa+FKT_9(Pf_\BtF(TP5:sp1/2]<]@lBN/9"npL\,V)<(OTDN1*eVh"Q99FgIkJ<+@^W7U-<*R<)A"FYg"p%TMA%)jjUQ_F0g8Q^U!N$?="@5)/b.0N%$.P6LMl+hb/9ra`-3F*1jnSQA@qZ5.$tq;-A"#Pu,`6H/,SZYCHY:!'#G12h7F[\s@+.GrO3%Gb+J#'W\81*$pDXc1):IZQ(!:"FuQ5'GEn`[&>Vof;9Q"V*/F5I_3-YSfn*Y;=&kTlg_)]q%@]DDqfWM/uc>K<I0(^4!*:S<.<Y-%kHDXcnnBbZ?h`IS,UM-TA+Y1=rq=kd\N:>$X`^G<HGGHL8#(\ZTu<Ya4RY<73a8F=&B1&roVBu[K+Q,G6_/<<:Df5sdY<Tp"R6-"%Zb9DKD>;Jm3$5_,$CsCUXoG1hPkWdi=`eGl-\6GA[7"-(Epeu_=8rh`mo6AM3^#MY;QthR,S#Prb4VbcdrqXrN-n))rTU=L!eC;k%)i?U')L[%CMG,@he$G]`TE%+6UCj&_0K\nE!Y`ZDhJA>tMa.`k=?3]S3>crii+EM\\*Jd,=QY57b#EsP9+#bAq%eY<Q"\[jL690e%V-Q[i6o%J\UtI+[F8oqO5`K,F-.[fGI$/OrWi="dcE,?'0qS#ir217.=MG):dERJNn]VU5#W&%5q]!kP!kKS`ioM-]X""K!O$5BL%8$+uDHQq6<?9i9*4k\2#-Zg>dfC,%BeW0\(s'Fg=I6<D@70!&Z[1BmMs8)!6&_/c5Z2&26I!mW.HWlaq(-h1"C*-pL\+qJ$?GGT;%IG02*oA!i]B1s(B>h[Y:YJgA9Ngob,\c3_oj,?@-r4[CQhg`>^n"8&-gQB\>G)AI444\0H27:./^&72&E50]spUL7sL:huiS+8V\%iq<3#8)ZU;-\GB3ho+,6/MofqbaJQ;Yld7rFAbP)?&@!u5.$)<M/[=CG/fVJ;eiR5'BUa9?(5(Rjg42<5\3IkfJZHZd#r@0'%_)c%'5B9CDK_mK;j7"(_GsWRRf`FrM7Ut:P4?pGn90MuB,?0HF!9JFq_>K<'#48=g#%_L\)XjoTKAkA=2kbbqdeEEddJ;b_1&1u2d%S;%V!>SZd*V*;BSEa@cL+6JkjCe4^EQ%4krp]JA)#gfWo:0_8/&jH+elDX2`>b7RlgHcHf`Z1gCLiE4rn$XFL.+VP0>=AEIV&MPESd:%]<m?9-PEhK'oVY]!b,j+dG^?%cfnSRW?B-G)ej-8AK``%rNlO2(N<HseW,BK]!Zm<>kGdPZsNm3?OfG3K*c^T6qj,6q%ifu6#%@H%O4M[I<a(?`@'7i@mP!ZZf^tX=V]l\=k$[<GO^ffd!j&r20m.k**H1b\$jj4l:4Rt#A$YdY/21*p7#6/)S:d>0e>,1:6]7bRIf/qp%^X^$iIfB7HjL55^m&._@Hq"p/6kAAg<G<F0l=ak+^F1puT!Fj?U#ph#&/)$I'\YgjlTd07O'PD6eKh!"]ff@s7RB55+B%PL0CGs,%bT"F1gJhHWj#l`[m]Bg]#Z(3F@mNtf;0!u\5uJ9X1Z`"Ad$E6,m/?A2J(cE_C\t$%PEYX]-:)ri2V(chbDfp08IICo2(@U[,W5dp%KQ"OapFN0&G2!Ab>"LW)@?@p]U=mt];gd=G>@n5(T;J(1S2OPWYkLtm'=@fmKtcI:EgT1$:e^Eh!"[psRUdGoIj)I/&S#aii[j#:%02qA>:]^41Da[1=/7qDU7Bj9]+iUjFI;e-^A$E9Ng@cY'f8p*?U[`.S&?SKNUiBWGSCJ`kb^a>Q%YTrAd9M8L!>cKtWe-'jN6S-K%90GLr[d_#ajXrmA*17%&c\^QU`[cK6OV"J`,MOYp*D+(1-0U!(e:O1gBn]`1&CeKn.B0ddR:=K**sZ$Y-XKnA(Dn_(9\nph2h(AG%U8cpJg(XFGIt.<%?`Bf$;oq"'Y6=YWY,GJYDFUqG,ePuB7#b'j_'*DiHsE0$Or5`S9'WbNp&C#8^*6'_2/M-tMN73s1,Q&DXLhg2%1jbln(6o+=2TMc)'WZt8bK&XGb7sp_O5.-mKbT^23kJV5Y&m<H?D1A5AeBRo&/$!8i3jfkRR2Hp->LLqLq.EDH2/i/Vda\u`"cPZ%W2eUM^B,MDfZe8R\mGM"8dssOU;3YM/ZV,d"Pk87C72`WES$KAcsU/cGP=Jq>YkE*[d7X0OVKh.=MLh-l[\Vf.2-9Aj\73*UFrsE%2/nJa_?^L!MS]?c\:W]+>>sJV?B!o"#+/oU#t<rr"RmZ!R]aFc7(?T#m%[<r743q4Y#(_]3GQ2fO%fLl2'X4hP+#&pkm9;3"f.^V%"S7;jpuS@TncU0W!"#R4*(FJPq-7hC^WY$"^;OdjrZF5783D/?VUd+r#g8591Ss`NF^qhtG81A&i9`PloKoP.-lWI3%7i>heN%;A%%6mnI`tGB+"c;3B@_9FA]qfStmAopY-QH^`59f)7*j9*(RV#%PB8efs`\M=oARZb3m]Ff.@t@%#K1n(RUAd*bOKVS*eanr[&6h/[%N-^:;3Xr49)WYic"Z4^8/=e0?!K_?%^2^dR,M48\Ip[DN+p/=7#H9UM$alN(]r>N]M4.96o;3E$C./[GjD,AI]!%mL<9V+Za]kd1%(>K9ZP>P-+WBWYqebo.K5(_/e3^8c.3U0t\D=`baI@"S^mhk:qC<Jh)CbfOTmYqcD8BW+qecEA*.,@pXYa-8nM6:9T:uK+lcg2mM%mQ_^k+KA)GBJQ!\65(LVDhjS^J8lM;T:'h664-k:%;):(BCHH^fi"@XRk7b582;"-md?L/a.Zi'V]Sq8]PADOSIRNMN8,"7H,-_Q%oi2dF]8V+T2M']6PsOKU09#$UE?f)r,[3Mah/0p0E0=n#Y[[R8]:iR"bYZkp19MQ^Y<"NT/q-VAUGQj;V-%CNn/C*g7V;aW+H(S;%OUT=$(j`%7!%Kkd$6LD>XB^Sjo!IYng$g&pp7G#-#dUf*&]j#hUZIFsUSTf&P:%fHY6:ed-.VUuEG,6)p/)Ku778L:jRWe%p6Y1B%!Vp`5kYKl;7c9g/mNd6I;C_+mR'%FNZpu`p!3X,lN+dA-f9)X:+\H$K)V0U[jdJ(1/Y7o2Xg<l,mF#9F(C.HH"Tm.m\"!H2gN'o1%]1dOYY&,T%5(a-"$]q8],o-g;$Vs4c^%E9=X$89np_\(&08mH3$H.79KF0;sP5;/KUse8GWh3[hm"VB>Nk(0NZ!VOc?0U=N06K[l%HXi3TrH`KH^<:(m`&IGb1aNP"[0M0:a`I,B'7EciNRci)9ZWUgZ)E^Tm:7uGL<*$hgOs:<0\),6#`3(e(emFCN%[*7'_?CG@uXcJ%Ck5LYeSA<i$n8LX#[dE)^,(3Ej(ULs]l'UQjuDL']ARb^l%l&rqpkWcrDES#RT;=%DeD8Sa+;HBb3)\##[Nl=)n=Ee9g;u=NoaPg%^#W-gA'=F*ohX5N=AG#DH0Ac./VE5sj_3XW0#r<(8,PXAQ@<H\n_kRn`io"OW[j.bPE^B23c50"KFH+R>e62b$o?V2DS4&(!L47m%$hIaf=t>Kq.smBekGg>o2.o:N70$WO5%;^QSUKSIm?Yb(6fTfA_l1q'3ZaKI$rlgrpc$;ej(q?#!XAX9>4qI%a!)<d//3uJ<',+;%<JeQAlcBWmT#@ZUjfa]XVmhu=47L1<qYagWk$L!mr#)9Oc=LNua])?!Xe&^_9Vs[to._,%VM"#'E@E(dR%.H6m0!-P^jT:sUs+r1%o$+^),c,WMl?!t*4uU*1:>)1P0PgH%[?d1FCc>]TR[P)Q8qFokHC9323H4q%4$@Z7hhMKN:J""?J%-O$.pYB`gR+M&e@h3s_rXR3%=Hb+T.A^\Wa>Ctq>Frkhm/WEcU5tXgP[13KN_*:*'cdXfpN(76RHLgPR\.F5$@#jaS4P23p5@bW<MLa5?;@@8.m3+&)7OP(M]esE%jAH]Ur$mX-f'FLK?J,Zs6;QB3K!oK&C31qITkK>);qs_VSg$38R4,7o\)m/1*L6?KgpG8<4kuE4:tY7G]u3;A7*O];R&u$1*_dOo%ppLm#3d:E(AJ2!6)scItnmT:^EHgdU/YD40SSB$j4KNUOaY^o7?L@AU6=;2il#DZ6687o*`Q-57(n+,0mUDoO;'of/A`?r)P]p<I%5H>cr/='S70iQakR:mO`#U!rcYI)(L;%\>6"^!BN9$LmMI_-%#YroU-bIEZPm;?8p=DT^$-V?/&p$<uiNEig;![\bNa%jYBBq'VB%/XP5[OWtF&WE!0.V-("q'CfUU#\$t=qT`W),e_+S,@Oj):lGdtD*[370H8uH9^2'8%^i_>;BUH+l'RgZ12*$XH'RV^U-\Mb4_p_b%\J:rkpfp#/V<jP`XIP&)Wn35NrJV=Pc70&%,%'[t5?b^WZa14WhpfrBJ=4>4DPm$tBq-.,a\i!d[pqI'5*$X3l$Q6O>YMQFVjM3R%:Y_%c&QUOAE]aJ8*3uQ9Bu]2-j("jPcZg#+NdUAeD)3N"?.8J0JPq8?Z,ucR&)TE`bT*s\N,&7,QYeHkl&_2;'dq>pmS4*@j.9#<%3?;W$0]SkYk<+Ti$llDsCO>j)*M4A4$:f;/1ZQaDPL3[Y?iA&&Fu>Rq,[U&`XNfdYc.d&3;o[pOZ$YbM0@JgS+!pRlgK6MI!TZ!s%#W>EYZpN%j7`3?KrU1i4QV5E^#F\NH9V27VrI%rdcf-'Lh0CJ04Ca?H[*!Y<WY$cgeL!uJ&Wi[QA,o$!=cbA%&M6(8*T5gS$ftUt%k%&\H'RCJ;;GnM"\^"s:M#]Xdf?s:n.,cW2TVMh..Plg[$Tb<Dop4?5(/\HmP-X11c_-_Zb07ks$0O"/QM*s+\jnC^haPkV9JB;D%P0:[q.C66ilWthT&39UkhOo&=F(!/5i?%53,GR,p7kfU!i$GU<HI,Yii0fJ7@anZ!%ufF.o,*nl9L]-EK[l[>@gUDFN;W+Q?d3IT%a@E.u+W'Ip=4Q_I@Db$9_k0_G+?qrJ\oX2;Lpt4DZa[*R:#rH7]\qBq'"Z6h5SIfQ=;N.(aYI9C<lbA\50fr,*&#\L;q@"?n%OTr%b=-hf*[`.t11k/K1p[sG"YH)P0e%AkPJQ%5A=81cX8.1^V=%pAkB`07'k7If[H<UAic=-gT2*X,5Uqu0X\;"Mp<[\WUG:/kOc;%o%A'/p@AJMHZ6T":!].0MkruLr;9G*0*BTap*K@Wo5LIaS,-Wr&QYD+B9R?2N'%68)72!cd7e62B+o&,5QjE^/fKmnO'("9;0)HXN%%%,2]jPNXn[)[$Us@tMA"+"Nhlp[u9oOQ&LP\(2ll"btPW^78hPHZ3I$1Yi&%FI/&ggQH-*HLtm+h].#sB81I+)>?J;>^3q,n-T>r%=)ZXF]rgo4ejJ7lH_'\Th\j1VDq'dd`YfMR!6Qk)L7%JJ[0p=Um\'lK$_Z1.BP@r$Q$"7"c##m\iUWfk:(kqaN>e/Ge`&;kMu$m-%4L-`*A)MRe<XjIMpBX1*8p7`,djJ:1-sX]Y,E\_l'<ENS/no+j/5c)RENk2m^/IahP.5H!lNb8Z_\d`I&CU+dFt"jM1ljp6jJWQ-%(@QC@;Gqr%.e.rT6tQcT$\BgQ9WQ?=]"K,6FIrpaac$hW:tT^M?Ir\k</&QJS<IN>BlTl?khrnUnT(pB*;8u?&)^*]/T&Fs"_H8o%7VGjW%:"7Je>n.7p@AEle%T!NmrgtrPA^ZYSPbp>an9H&juN*/6Vq*:NFi/(-:mHj)7;lqmY`ZIj00ITS)@el1p0q!=6ZXI2tAGn%a&s]e^LDZ0H]?KDRgN*NZa&:p-l-msh@Nuu`b"W,`MDW6)k_,%9M?HMrjI49p_;EJ5Pu2d>WP-Xb;IG6):O2D1'N/]9$kt1,rf9+%a@4j<9EB@dV)0`\Y-ZA,N=tQhSh-%BQu/MQ]W0r=[QcUo/gsuJUT^c(ViZ?)@TtnrghIs-H[I;DVu!]?N-K$uaCs!NmI+-LD<0@=%W@hYQ1J]@+@UF==s7VtNX2eKKJ4Fb='t80@j(_IaRf?X&P&Gg@79dG$!8K@Lk#nqI_Q.PLY\cgeG0)*LWS\CuaOdc#>2elA9)(&e%`8B5B'cN1MGfGPQ[K@``_\\:!b$cRM7%cD=>`?!6;kW5Bp0$A,CX9Z'F=F/4K1Uo5.J_C2W*%-%<*3ZKlsjl#E;IY_*PJdNe(g?g%2iQ"J/]!db)2o+s<0"i[/gL@@R9H/u2m3kk<F1\#+eblJhR:Z"pQP0pN)st/@h.9&N%d/dFW;<RE+-(JP\aeW_pf30>E=7uLV)@@%a1*\>+sR\[WSL7=DPeJgHlUH=L4>0J7]fhkTXFN72FRRU]/^q<pq"jkgLcHR=0:Z\(Qff:QM]>YN4>(VQZX@>Y4I+bmW&sLDALm0%YN%XE)OL/=,OTiO#NY7L,W%7#E<]9FT"a)^ccF]/7bppUdl`\1KqD>^QcM)g+%&4$G,N>gP>2R:g\KAP3Pr9_Z7[:1o7d!0bq?^`%[4nJ#7\0?bj8SW0#Rcc(j)"\\N/a5h"#p&h<9N1WBCA^>_oo+$?>R[jac=lf,=b$h@<O+PVLC;f[>`K2H7>i\gq6O[*k1J+V;&mL%SsX\*?YY,m)+RC!D0)S%"P_EJ["t,c:I^OQLlo0Ro_![+:V"7sU(>2A!E4]qBLKT&-&i1(+UmC>B8YN!XlLqZ4Wa>;`'jDl8RjMZ%nC?t$&(o$S:A2p.Vg!;*ZUI,I5tk%ke][M"A\6p*]U4ck\N"T`+[PS=9>g]1aSnNq:Y$D814u/52k2^e-!ue,)0A(LfGRdk.>#qq%+o4oX?_PB87kl#J3W/s2<l&$ZbgQGD;i'ir"m7uS?WgX6d"C>P5J?a^d=@Q*BtPtXEPIXDh7>`LgHYYdI]p//Y+LL-Y&+DLq@aar%B/dT-+J7B^pt/7>Zo?4L^J,<:r@e+D4hZ>:.d,oj^;<8[ih"T%0Db/;o7-]8s7]h@lX"nQs7Tq@QKhFih4Q611h[n.1B[b0gK71#%>L8P`mTOCL$!Ar\QJFHq?S58g(<+WkX]0QZnj!T5.Wdno_(9]>aK,4faYR:j2.)#K[g7#86X3g6E"+ur!?pO:aKS?`Y8O_)!,%Sn%6TC16JFL_BMNn8DUXJbga'A^!ehgA!oqK1#`Z<]cKGJAr9u<)aaK3O=R]L2YL9k3n).3HoPcZQ74b+H,Y,)VebH4\Ri,>MCs70b^%Ca<b$RlfH!6Eq<9n0&lbT^`<@ke1%m\Fcjk&'`]pJ<Jl0aQ4h.$RVVG[[Q@kPGXC4]Qr'Fe$ooKhiI[^.;TC8:K=D@!f']V7>h;F%6m"mZnNr^VM4ih%,GNUt:No-J43U(Blk/Lr1cMA]g<q-LKn:cNF30S`8fZh%n82RMhjAupBGF1b,j2GO&UI#$lkrL0acGB[^;u6R%i[,rC+DK=[cO$b_^'\j+>FU"Fd3tK6mg<3p#Dd<KO\0Nm$=EZ+&38,#%$VPC0oMa\1b5]$8,p\i7Qf=UZSS;YTA_/u/ulQfmj$!Y%Nac_gkYl^1"b@4HA"[0d*!7!M9$^,"6ZeK91la-]oqK7%B"VZKR66LG+N(14,'<XJ84;Wg']5RJ+=j-?!SCs'?/a'C"A]j"!"Y"+%RI>BHirOV?K]Vokma^7,;\^<[cW]&&U+(fnN"MUAD"7jM=q-d%SLsaB)QYfe7uqW4XBqjqi&sW-*`NjOq@-nb)U=d2EWO/Cdd"@%%Tcu^.bZAAME9Uj)ES6SlB>_5`*Nu9VoM^IcJC[QqVmMFbkin#[n.8h3P6hgIU]ms#N:Uee3M.8$N."`d)Ns?bh-G[+#dE.+H"jZ0%f)_u)_WNl#;u*kXG;_L(.']b>^kH=@H>*+e":muq\e\q>:)!peBZYAoD8=)V*Yb#=^dKW=*0@jrX!RI*;_j98*Z8V@eu)GZ%u>g;%)C1VgU:q"Aks^ZenkMN-C-FRl[u3GEReDM[8hAJk@Jpd8,[X=sfSsLo84Q3=\2fr]PbR@_OJ>_j#K5`ZDDGp:R\=PL#bZ)0NHtAe%6O&8ZR/jCG%_V/^DmeLGCVs;,FF%Q1.lC)T81Nn-=s3+?6'EA_FhJB2_e="b42,3$k"cps/pNJ`++3JH+e3\U<#&GuP2HM*5WQNg%0!pY<=/,.NHC#`a8t%dbW=#>f:Y\5Djl9R+n/cH-Se^;RhVF5B6[Z6@di$0&;9[p7)OK4&[i_iurpR2>@%phW"^PHDV)PDDjdJs@%O9OF:EEe1ZoSli_YK^&kk9e]TquncJ@U3NjeT91Q&]A&$5"'A47:`CFeknJd_aAW]C1*_ZI#P4R^JIW[dJI6IXlNA,RCA1@Gu/RD%;[<'cK>bOFEap+q/ol&ZeV\BPin%kJmle?ADL^Mcr;\0i0?g'S[m8Grp5&us/jL0*P"NB;BfB?$-r.k74tI<iEWt&RR+eA?m=Vs2%fVGqI3EBRXdWA"Qc4gekG[T4!%5;shV8eg)Z5cAu"eqYB7Ql8a#d-^GSTa,8[iXOW4i+fBhQ?a(k99o0P;j=mS8?Mh-VMps(l`@9%!co=6^t_`S<#+TR?ma'ZVQ$1Z7>GNQ(4AY(^+BuJ9\Nen*Dl7h9^dS+[X2n,Z6dh3%PV'tGq8^#/0Oe#CJKrM?6Q,_&hn(#+_.Qu%:eZ$TlrT1#U'l[Z<>0&<Yu96-1+.A<S)a0+6C1p9bmbbqi%h2XT@!.ZjK?94-jmIf)ZeLcDSX$"eH'er1@KRHns&rFTl>_,HA4"&%Fu!LXC,835?D1&1=q_M_%4>k3eo!Gb<:oYp8<,rV?\b6C(Xe,1:Ae^%`je'BCZnX0P#4u*%RH*mY%+*UQ5.:]%2Y@u;\'2[W^UMQ%Ba&rRkLh=Q"OSnk^pJi[3*2aTpNG&<*-m8e-p&.)=@Kb96IEE\pPZc"jpA74%i)H,X^W`)JsdMUp#qj2no!WtQu*QcMgbTXq'-6,%:&`9ADCcO(cf&K8rRlkLm0WkIO-LGhO]>\'h>KI?./,Q^AO9*q2f5Zto`_P9Vne`0a&qccY7RVsbdn;U7]h5LoO/?t!i8((Amc'S%I',Gq?s\q*9=lC95,)F279R"?hA?fL5oCgd+*g_VH?T;qS?5sqpa2kO?l$3O0^.o8(QCts\&6*FRn[XGU`3b$Z.J8#nZ*C.Mg]WL%:a9=hhRCtBGjZc&/cqgOLTQ2VoR>LA]0ZO1%k'HBO,`do\k^6C_5B9!p$P\@1qDL7-&fdK4D;be=T-4'?_R[9T%oOI;okS$i*`G/%mEd##8R1G<iVaoD>#BAY*%((\3rD_?k7iYa#915W=)_mg\r88>O`7"Z$YhOs3]!9PV6reE%@.k=QUMq<l2ZSTAEg1]M%9H3.4UE!%'I'IeThq$[b>s1cJc]NF`<ljQaGI#rSIpgQC_cV"`ZDf5m2j9cWu[mZ6^^]&poL]oZW>'3JUk4Z0.2k,?_HU>j(k7EnidYo(anZU%7Z146*I<PlVItVQ>%);VATgg]2G-O4etY:"I=k619!7;KO2E!_o,RY3ker%o<$65+=;%[HbB+V\LW#?WX1]CUG$@$t%NiQk@S,IT%So.oc*[Ru.2IkZU:!nNs\#"A@6To)VXd,;KV-h4@O`\&ng(e)=;Ni>4&1Y<o27\pTe3Qi%7gZqM9H[_6SC.COg7.G#Zj`nah:hTQ%FR:JgDV_[`bWi$\T?J"j[T%eQX+is!4XignB[TG+G]u?J<9Q+/Ssj'6dhD3/h?)9K2qGuu:`?I/=fn6R75132;m'4,("*Z2Heh1t%02`[=@j':J9Y)Dnks"FAEQ-;U_eR7c.:N>nP`X;D$^`P(e9H`Zb!\TYW@J9/aKO_94n4J#b^K=Yb4Q1Fo;6h4Hf1t#k62DDdCX]\%W:mh.rCOk4RH!`Trd@8qfmWW&eX9:d5$5pK!&r_pI@4B(9t5FM@<adR^?(nC4EYf@c@^ODP+%7P/Q^d(BME,\^!=M9X81GP)8tu3%+%?-.jJ17=m9?>CYJumr4g*/t*0d[@`\<D$oE0L8T`8D:1s,k*>&);,/bt>[Z4=DK2?AsWc;+e4Usa<`Z=Re5&CX\E2IU>K2#XPT%+nKQ;4%M\l\;GkaUZn_1Oo':/,rPVo):aJAE_3tBRhcgC@Vh[1/C]6p@7+Qq:=8/s$:uNl<F.iP:DHA%Oc50hmUErr)2u^_Bc+=s%i$q(.4ZapB@,bSuQ3h0SaNNKgW:U0u.5NR9(Eb3%8AS5*J_A`Xc3"3P@eAqX"Yo^C)%WD^?Jjtm&k:?4%G63ghRaX(+-:4]$Lu&9%ZAL/s5H1Yo!m3#ap8^Rf4<nrU$stH`eEX1r820[B4,Z_D"G$EW6$>n0ZO=!A<Uo7;(:7\1puKTS8Dgr5T-oWl;[(PQLfGj;e=SIh%lQ.j8?B>s()C8_i.tlh6K*VZD<*!4*,Yjsq9Poaq;''Btp--!=s!.6=O"#3.i&j@2UNNo@4FL%7S6g&j2lM$Z`YF*$qAb2ie]NN%%9XI.+V7lC1mj1VMLnF!]`A0/QT`J`qHqT7AHQV8&a`S8Y-'q''X"g?U*EXTM/Bk"&>r`I;Ji349k)XUFRshmQ]ri(Cln'si_cQ+u%r!PCY*^nkkZB`Nn9,cZ&.q[<C%sr]i);Z='[,%Y-mT+ff+2`r_s4IY>Snj$Z`-'5fg?[%#9-m27@aLn)CX4mNZ*Jj;Oduf[JR2'n%_36iYhF0_D1g>4E4_:E;4Bc\OU=hBQ!s&s',bXphA#pe67^cC=p/$+BH;OE/ZEQ)Ec\g/RncD1nPX)t)*O6UKeCg(;<$nF_p:HP]%75_oU@e*RB2N8Y+BT#:<PWT:l1ADma*\sSZ?@"HIi\sW>^osDP=HFauncBn@^koP8FfP4i@c;j@E*oLE7C&G-co:5ELC&?r7r&"V%_,NteU"goCN[7V.a:NK<H:e8IiKr+HO<op#P_8o``NcY^>qj-R]5c2+/WM\M6jQ`uV'85Tb:@>iZ8V^Qi=4h6&"<:#\KDIdp^J(7%"ZV_NdQ:A@%TEY`q*jbcGBL3++I*O/HWb[sGWqgJFQ[+91SUOXp_m/^EKXFc]Fr`XecO*>R5u.T<O_=NQrMJgdp$nhs"q-m[3Nik%lRI*u@#dV:B`'ge9F*_e'l`_![%a_E+2No4XaR'e,Y8Nmem94dM\15%18kU9la*#N:+juO*ehIg:0C"&@k#OhqF5ps#/Hk.kgL$&%n"i^is84JM$:@aI;tCm%O&AH"od_^/5-T2D;Adh%@XJ^o$GaR[D'nVqUl"90aQLZQ+gs,UOJr[.n_FEjpOPOBXh7*Y=7es)N^Ja$%=M^-GN<+hV@^!-'`>am-ZP?1f0mh_8PGPN"cOhqUHTYN^Hp+&N#k'H20S;.d-:K;ngNM5fSb81"A!-Sd5!A"9OeGX$)X.d$QXk-V%(Zgj=fMY3%<HTg_QRGlC+G6_`i^UCMT+@eKf]pp)cg[-<)LG\%krp2?SO)5or$l#(MAPHbR(ECBO&(do(iBks@*o`NQ:IT.V\@8d%jFED<:MIq#OguE^2V96NBB1:J'9GHp2@(j_&ZX0S(*><I"/W>DCn0d2Y-dYP8U)k5=0j.;OI"!bop[tK3j_.Cip'*m2-4k[!2QgZ%"'u6*1r*<g0ncG.^fLkKWra1Y^'u&*U(>8C.Ve?]<&gkXAM&X0qZD/kFma/6od46*&DYh])kckc"fJ:Lr<j7X!ufo.W`WDX40_8@%&JgUgjc&=MJ7;K#;Pj^2W9A.Y6Dfj7'LkOu7UK=c-::&\bEl9,/ukr[dBAOu6n5piA^Htg%]tnF#IPXHaKQ=5&H<8K?9G19.SKN5%QHY7_n3Td-"s5EV`8g(9k05/ufKha)q%+QkkjB`/iTM?l^Dr&9B]U%Sq)Be54<<-I7I-Qujl*R\R#V8jYC%2_X7eqI,?l^>d*@/S%eY\lh3O(3BC-X1JZXA[Pq2/`$m+IgY<cr_B8,0Y25ckZ"d2[PAeG_pZ3qb,:Dtd3[OSnls/^4dqN7%X0N'dgZ'X\*E-bV2[<$:]W%D(0s\;/FahV22Nrc#j?;/p)Rt[BXAY,eTdO`^F=:=(CVU>lr[KZ2h)M`1EqO0<.)/;oWGOZgRfN"(N%")UtOOV5%qTku$IggQdR]%&&oR5-mcb99]!Dl25ocO]$MV)]*b]Rp+ssOLgLl@X/s=C73jg?PF=s9b-PAqGb!lg0)ufWdE$6>%Yb:`S+=h#JlOj#orX@%q8\8o%/s[.Bi;8\le\:lDBu2]elsk@#4dU*iJGOGqFC8Z)eQXoIY#]s!lHp*R]Kg,.f?6HV;OT#2GU'480E'%XJg0oN.kTu(SOdE,q)56a%9HO:N#ViA[K7odJ4F[j/C1R5H2j[;9#U(7k9C;Q";QHY+HfO@C[o7I2edS5d3HM-BDKcbM\+ZkhK:]SLdJ/Tt8V19IoI+<lEC#'B%&9@T+FnDRp)Zb_YkIpgBNmjc:^Aml`ri^7hZMJu:_;o?]_K[C78g.#3XJA?oj;!R/BsPiG#u&Ue"moAj`l&t%6W)=S%"Cg[WR@cT%DBf)EEfUaT&caYsQ9O,YG_N7tT0l>*o`t^1T?=lIcj_`tGbpiLC7_+U/W5Lu-iih$ADoEfaYLEO>L>U3UqY"XG[3U%nXjEY5/+Es%^[QXU]k\7uKSXM]:9c')4`o=VMi]:'?+!5b7p/>;W#f'bfj@cR9uR\\l_(3Y`g+@gas(EABoci^,##(8H@'e$.p,1cJjn.@9HXlX%W)%CU;i>6F!mC?'AcZrpjLSlBnA1ibF,R";f8`E"O[*OS@$Ltq-sg3tePNWhjU_9%ljJr<PFRV6EXPi!MOF%lhcPIh.D<>UAT9L7%3:hJr,PDbQl(iu3e't'9:Ea0Lblil(g/#"XGkH;sG-8#j_!U.fV$O4ml\]jY]mkAEW,#qAM3`M%XXD0s:(H6b[Q>Af't#lI4Vj5>%qS\o&1\UQhdn:8M&[tb^$Y3nWdW2."?9eFMF?0lY9C+lc32QSODQ!0fSPG%lpS.K\)We]Tg><qBZhjrV7<<j]hnNX=*1`.H.Z\k:%[9Z*Bb5)RgX6I`j9(6$[CecCIW\7^4`bA7d`J"-*'P0<Yor?611t!fbF<W';A1c_E?"a>J18+3r50Fl*brPlPjQ[5\;;T#K+FA*D%3[sQgU@FCocM%;$JIC^,mjLUJ`cV=p,p%&DFUZZQ1XN>&V+G.@&Rn<08_i</n]RZqBc(]FjrXj6c!lRjNs&RIZBp^3T141JTTK4_%ir]ak4_7*3)LT+Pn'c5E.L)_<SsHu-&-FW.<HW'gd\Ge3pCFm<#$oN=YtY<ILc1)W?+<hMFAun$CHkH"e?5MN@2QiTBJI@XYGq##%lILP,!/FU>$G\ld($r+>8^r/<l[r(?)A7C$9B=']UHV>)-k>pLI[F1#hF?+](+soj-aG7@bif"9[0(nFG4=p@!bGM-'9IPB#V?iK%R.!['F8K:1?9/Tk3&&%C'^D5[IF51j7)fr%3]^\'(+C_UKg_aPq!h@B$SlL3>aUsMrfjZ7SHqr-SQ[5@'h&f4CK7MCnpt&9E7_;e%&>>E$?.NOb^=[mW02PA<k*93PD)>4kTAFnnG=D"E5e$/,TD/F%2T_EJaR6[bhO0t7,$e4]TV9(hcC7i9M)Q%kkgG11Mh[Qqn:6n^%\fpX<jXkLc_G!r\fHXA479k\\7csZ/!5>5uaKVX%CUh*#Y?W6>+ZP.HSW[IYaf&pJ>'Yt(8]>$]CHGaiD`2-b`84ris#2"uB>&o/%]d93S!5XcP<)W4Re5nN:JPJ-5JVlR[G7Qd>EO1gUaK&Hd1PE^5\Rao=,fNmlGi\cQ*'si?q?@R,-DQ`gPeuE-o#UcC53@`T;i^9:%dM]0?]++i[Lac7;W60*Z!NbKRiGC'n`>_0Sd':XA%bVS*EHd`;eapO+KI;!-kH=q-ParRGm/Sh=5*M>>L8+kp+WeZq2nXOX6InHe%U4JOMlP8UC%di6;C-lLlVheH9A4&_;$4jYVN(Ar2\>;d[W(S+6/LYItJ%qBu<PT6IK[b97/"+`eTV4d@.,CU!T<.E/oQ,0SPsrQr%c4]f4<s.ruoEanl$0*imnWZ3J1ah*dhG8CbBn$K\7-LSY=Xl\K[<Y!ua9B2Yd%;4q,_jMpUf=M\U1>Im]D]E>3gC4XU.jH9%,o?O%F-0q[16EeifV0o>TrES>qdJ8^Kks+3n!sY`6`c)%S#/54d_bF=?-248kjhOSi.>d]7nY=J@K[p3lEqAiLt!'2qb`i<0Ej5NriK3$%,pk#1P_[VWf$HnoP\H.ci.Lr.ci=nkp^%LK'BqV;$R'MlTh?<AoN=^^CS)EcTlTYEMcDt@NHb4?cL49ZN-e1.W0aV(r2a^\cQ@%n%8c's'F!P;q]0h;Z,b&P$[DD0NH<4$4fNdY>o[XbOC22*[LaXOZpG[Qn4g*9V/\\s<+sgmV=DaTMm&n[qYY[$#0e*ep5adipkUA7_%eTqAQF::@migUS:\O/9GiR"$>2E>DM-/9WG;'>%uh/>bI'VG[(r\De:M=a%\Z@4[!92V<R\OBLQ,U$30N:2?DhAO%]$<JMl$S`Al%X&5TIKY*_RSo>p78VEP[CS6DL1-po'6r9UU_<KR%\5oW7[+P8[YFoE[Rq[:Yoc*t(W$%5P;kPFGKP\K?A<7?[eo=+LE.jtT)IeiX%70,"e=9L4KKU>Hr3N"YX^9j^TDrDm//',H8Xb7j$e\<"GW]k!^6LUd7/ql^=R399ib\Y7dg@JL\jHNGpcqMN&N!k^mq.$0Der!^q%kXNc"F'V9`?H,gHf*5"(6nOFI`TLnZjARc8e#ca%U4:c-Ee@R862HWFVQ^dj)*ho8bc#:^YEaUFqOprG&mg<ml-\>?8BT*aT/],Y%Uru<JHF2E]/R_Eb*5Ri_Gc:_;CWEs#fcBG.?k*7>GR\fA+2CE_`,&qK3$t4AQ7hU6/<Oju=h(XNpn)4EhNQ0o?T!s_+p:i!olH`[%#$OSH0#=iT>,CkFg5+s!A.&!PnZA^<OrXYV>j$g$hEcY&-'i<,>EpKmQ)F+.Q5Lq]1.)oZ.Sl&2$ceuJVhY)gmClpk<)dfY'9iif%\419^4IFKooqiR1]mpj,\=o)>iZn`>8\EV!@':ErrO:KEW8S+KRb*tbPQt/#37=>^l#O^'->]pqQrB_0]GIWuP)Fd;]C1V(cE]Bm%^K37SMK&utc"9ul:lj0\=1k]A%2BMRqV^SU&18gqh;mR+N;*h@rosln5A<[jmELFVqZ6AulJ/T,Z-?g8*2$[jaq^Bd?JU]EEQ6E!%GdNh>T/'GT=V7ZD-q3Lk89?`lZNffF.?kTURs5()*-AV[CT+%df"i)!(a-7uZ8a+=)mBYXHB;2*66ejt2H]8<B_@1B;!EnZ</@%m%3I<_Xd+ON%U*;imrJ9RqU6.Kc9[T^QA%+Eq4#V1WZ8b`OT\^BX<$U%gS7VYPEdGXq;E7&@r(PX)DpfYmEK76#_b]iUIZ-'hUO,iW%A2X_In;K)VXk?2`LiCq,nDXM;Q=V/9#nm3&O3kseG7^-`Mi::q8aV)i38fY?l_>QSQ`a/.7'2<:+UBE-&7Q*;SQ"`1!?r(sia>=A%%TBrD\g4DtL?iM_hSKP?*?C)R.].[E)#[DoTN]PM9%pYHZ_sbL-_\-s@gam!k-XB?7he6>JaaAI[MA@&.0'-9pRPbeA5/KQo4TAR%;Iqm]1"#,,'9'3qe-OFCMLq7-Q"GPAk)iK9dq0R7+i!1g"3DBHEn)T's4uPBp"5C3g%cH6J)Es%L4L7RgbU#6JLlt7!?1Za/]1A9%:mT**<+A:*bL""JXDdJcVoVeB;f'o=dtS'*;"sD%4F)e,^9##6a$X*jcINe$aQk#kH*&0,PrJK9As==_55QQ6a0/8U\#@G'Gq::8%,bXn.Q`m]:bHYV#:a<2:HFl2`c1\qNFDe?O\2:iZ3Q@RDWl15h#nmW`K!O_N7UPV+%V^ZHoTs6^n?-rE/!f4cE><&HMA=q(k],*d%qD:ESMBD@i(P??.Gs\_X<1L%uU$LHo;sBu;<&r0.o`aB[UlY/I==g+]nA7B6n&c0j(@QpLimB^5[VDSl7(0IX:F3=M_=A2a5_\Rp%mTX1&EpVPiGDs&HQLj3(C>(W6?WKr.J4sAWlMbP*RfX!J<f*=6g,<-uZ3$^*n-,;HcWP1>lB>oi=Ii4=b@JP`a&LsSUV2PFn>_0d%43eCoj.9Me^#USF@*QR9L5P?ebA212L2O'=Gb82[08+'pp)]CtOQG%cYsmmec]iiSNY9n0oQa_fnR(unE!5_5/R]eOShO??0;*tR%PRp<%=*0haY.aNFc`.Gn_-nGq4g'BR4lXk/?#dJ4rc[EJ"b<eQTWDK+Ch%P*q^?)Z9GoKfNMV+a_t:pfr@,QliYf`S`VkbO@VteU%Z#:gdH^(E7DZ4=Z:2F;=hlqUA:[S?A\m.d?$[<8^Rq[D2QU\NM]!5-0[V2L6gYWifIJ@E%k#Rg1ktg?qVS2V"LZBD-(@LEFWJ>HH%pA66iQK,k&'->nCere(u,i7UigQ"qC6SkfUch6q3GG-O'Q>+O-Fo-#2Q*a>h1Zihc%]u9++jI`/]IKieWe+g#THQHK98MSh+=BeA%-S4L)ha/qFcX6dVb>(3\-rVONB4>$KH"b]jf"o^RN+^ei?^M,6iZ4U+c4Z"M6m%Gq@`uYVD4W.Q9sYFE<V=Ydifbft%NJClY#iC?%b3&%.g@!1`@Jh>cf-^@H@KL1i;OuJCT0n^;oi7m&>?]Ta(=J)#Q->XKit8CN3Vm6s@$3MO/LF*!^?<1@o9)n.hAM7\PV76X0",M(%Yrcc3MtO*[+kfCA/RXer*QC(,*&.YukK&=Ch`%_gRc%nu]kh!/@TNb4XKQ1g0f?0N8<X9d'P"OfPj(!Ko4S__-OHNT9=uf0;8<5r%*:QrQdcj2[9i8\<!.iCtKs)4FOPY-a7+%R#o6/f0Mn+Lh[CkBdE]t'rQ6WP6*'Q9]V>=/!+T:TmPc[Q1d0iWf)%fNU4M)/32Pmoc%K\/E)N6g\X:QM?gO%#L3-C5fc12!DDgUckK:g`Y)^0s,:)g<p8QjCOJo=.!)nEJcYju*j]pY`NA[l8/ue&B5j4B'J-]uUtq]>tZl%.+K-Q29F(T9Tp=rm/3@*!4&fo=ha&.cc^(M/fL7G<KOK+rg1):'#sG:_rshBCgS$'U8>iu;'4oh%W9Q3VKK%![^N+DS\_t[ebYS"%A\B9<'RIX<hW\P*?]!>pQcj]:/AuPgh$].u5J]tk:E[.QElt5=Of8aQh&1>m2EsA]V<%#c5cgT:?p6.(/u5c5SfRlV_2\UkXmKl2%l(.'(Q0/CArs[/)(+gTECR'gVQ1:hNiWqOP3>d%*>GIm";D[?e]75>fPAso5#65!9j_",Ed1L.WCi[7+6*dKS*+5h"E]IL6or#?A%07@/39DD-Re$JZJJ.:$5[F\9eO%g.]%B%K>/J3#O+W<gqfe/7<5g$nN@i*f2R@=!So@Vt8)<pQ$6\n*u1!HX"]%#K_%W2]fMb969%7LE<#!1#2<dGlI$4Vh@(>?l_^J#fI1G<$T<S9'0Bf);L.G<!fkhrM!H]G)T.fAX.teXS`'eo!5G3)8VeXC.;p>/+lF+cng:3^_\t%3hrNMqp#Qmp^'Qu3uGG`b"2rEr`+`naQIM\oFiDTk."7)/,i"CXmI'>?%(d8gVqfIP!NXPd-!ZgR`Fu^Uc22aa/+lGo$gATPgN*n%+r.=DoIr"h4;1W`(ebEBs+mpr`CM*T9W[UIC2h<OLLpp2Np9XuHKqq4-%(K8N`]5Q<o[Aklt%MQ'Rl^qGIF7pPEiF2*l)OI%[#?X%4O3V6hmSXG1H<s#ccK8aR6#p%U,S.4mP%9\\(LeQi"bBInl:U)S>?HcNU!_2+dH@/!jX3u1DN=-H:(IsXIIZG.eEmNMH^c@+7<Gh%IehPC$KEc??YX#&$Qk>ofV6E^li^+(NFC&5CT>boOR"Wr5V$=B:tqJD2K05gW3QDJN&)L=WJDbJZ>X8Hg+":i$Vob'<U9a&ObMFO%G5]J;Qor6%;*Ghk1$:]RdZQj5l;c6\T3Hf5_P9nTDJZ&ua-]c[*_E.\GMbST\eo4CgOW4Sa,!lJ)@)3MmVfTecX4b(N?/t6`B+?.%e_s[bQF*KL$r5%Z[99H,f6t2[0d0Lqr>EilgNP9/0&.[&!J"WA>.o9HdP8<8LYkdtM(-s4\sYs7.MNTR[Mg59?]'*afI9L*MhEi)%*ab@$Y6uu^b?bX44.3dWle=PT\2??6"O"+FOqCHM9PNg`,!u(?R;TfK]F91B&R7(0<R.9"TQU!l0eT@n"JOPQ^YEdE*E2+mWM/:R%@6=4OiUXkrL!'<YrbBHcB9V=7,9Km8!WS"u_9LrX5-C740Oj0/`c&44e3^U\0A%L4O1f.C&.PN#cpO@>7a[;1W([5!4$s__P9%%e%Pa`cN>i+e\j2pWRVEC0`)'l_$@c>0qI.2u<QR2H$?YnLTC)YsY'L,g7bY%2Is-p`&,k3(+/QQh?5Z2/KjVa\Y-9Fmr]Wk?o_'8QM%@saY[4c[-nUS^O$e%P2_)$5p[WH)FV1X>mkRuE4UMRD8Y1.oVh5CQj`=%9E:@Oj7!.Y4IkK[r%:OK.C/>kf%Po2)LME4A405%34[%W`n$G$c\UDp`sd<@-cgVH?1JNN9#dO`WMo=?kk)s\H/si<+[qnMq4DSgmU0<T4raBf'285Qna!1XNW8E50eg(G)+s$UNo*"iYmeI%&8b5)cnM4@]q+&*.]AeBL1l9s$_6bGYnr(]@>t0JoL`P%MEu_1k7GYE;&r*=O-ocT+]G8nVBZj3J63=GeWg?3"!p\_/_m4:Y-1-@%D]FUTJ\&Tm4LTP9cPC<il(o<IEH*66Dmn)D]j,Ff=I5TLe.5BN.%=K'!buu@baR7/%T;rtL];L#5#J1ZYdAr)>iX$ne?c0>*g?]c%nq*o<%GWD9GLj:[/VAI@$Y>1e@[L>h)Ssp;+S7kjU7;T>TL?*69-B$#R9J:EianY0Meg6VqLUFabL6_[gL=_9d>IFIOhKlUSA_]B%A>&Zh2]5#c5q=0g?-/3^,dbiY^G.A.>*Ht^'Q(%TMqJm&Q9?)n-dqg6om,&C,#dEk&\GCr:bQ#boARt(d`:,QeDUWqm)7W1UacBc%^in,(LCQ.Nc8[\FgP''Q?IflR;!LPg>:$Sp;]QZoG=0SB[c/bM#]Id8H2@#,,FshYJcpkAjFsH!T3r]>&_XM"O\>ZT6+s'qP321U%Dq%>0BQ-")O?FMiP-VE[H9Y3'((u0WSjY676U'A'$b9IN^7(iKEA'WG<ja2!d5"p97mL#9UQW34\6M+*mmpn1;,R##Tt\/$e(gZh%D4&l=nZIN3:_O33,71$!1PgZ+DjSTY>kdmg'G&<.Se-K)+;0CV57)CHDm9K0<]=t=Z(p6lksj9/h/OLqZUlD0fL6Z()8p$J>?(3M%e/i^<DJ)4S\icpUK'QC%XDW=aI]f"!>u=L3L*XI*N9hs%feoHllB&i^X(&Y#1q:Rp]GI@n[)T'DUT/H06.r&gVK>)fmiGIeVY,%F%k?K/M'.bm"OIl%)[HAjtp56&&(_lc7dSP7Lc>n??G.bNKiHqAdaR$Ej4`At*)ND,u8m+EkPX*FSEDlP<&eu&WTM\IWDsE%;GB?7B%DL;$'2?[Bb]A1M=ojXM+>3c^*%&mRsmT_KB;D)0X!qZccgl3bf'LN:J%Qh\fhYJ`GUq<&[>FWK_J+)ARYFCG\m1THmDsMD\73\aN%`].8GlB?P*;Zg<WTHI#l*g8?joao$]&9W4\K:i76P_V=DCJ8\I6>DJL+5P@]I_1gHkl`'$TPFO/kctD/"_e7(iM,=o&C@[\W[ECa%%&FKPHZ9"VP']f0o%&TP%_^h%:4GG_c[tLTRRpGQ7n:m)m[Wa=6E4cXF=(s5Mk7;r45p5(E>K6pbn>*H([JLI/[qqSPqD0l5J4XS%ZZmE@6,K6ND/FGf5\n"lbA'i[")1@:(d#c\QPG_:#`]mXU[B!p.L(JW!KJ>MD5qG/Q*f#*ae[4NF&)eY/<ARXY`O\&6=60]UWp(,%`EHJFEhI9D%J8O!?@%4TQBj"Hdl3/%I`JN\7miMp)`-n)*Ka"SmR^-Nc(fmtnhumoKCX*djE`.mQOX\'9f'O1235ura+;E.[$klq%Ai?fVd3"e=hOk@CnlFbDSO?+BOs=\PO)pYU'$`A9.Va'6@n/,gDmm38Z2D;CNh=-\2OZi16L.GkkjbO!1C't6P7^/$RdrU)#!9+5%g/.uMjL*+C;jArFrJI(;pj"g%p=2_iQXB='8Wr.nR]'%?A/I=i;?MQF56;=X@.uO^:i)=Vl@e.*.$?kl1?-(>>$39eWX]F<nSBXH%::Z(!3iup?A1i0gF,hC!UK3K+-rmo+B@m)Wd9C^rNPTrg!A=+=TFj<D$'I'Rf3YP2U=d<3Kn**,D@.6qCbS@n`!&/q:f4`32m3J'%S%!E=)%7&m%)*[3N\&L.!1]?F@F,:,TsnOpPNjmY@mWUY<:,7N1.R"i<nRdN9fOs4KiAp[i)L'S<#a6u[$G)Z\!]\(C`,#c^f]6N%Q9p2o\?LC3FJLcFf`\m&B)=J-]?3=.O_#%INbXkoa0YNWU=+F3q[QF7O^->fK>pa`PUC;'01$Y'Wh@M!4QDj!B4>0NT6S)G"HkmI%dj*srI9#lRc2G.8)D:))];ZP-V1Va:(6u:Zo+UCe`URbNE6S3T[&csKIKSsn$b^k.>:^q>d-=eIp*U_Qfj51U%@ZXEAePeAn=1]a%V[!Ab#htN"H+Y;MQ!o?h,B(X9D.4/i-^=ueC/Zpo.G_Ykn'XU%Uesr&&07k-Q7)R4oVS0*TJ-[Q.P4P2M<lQrMtg.^P#(X3H[_um%(k-M-&o0kZ2A)kI7/,A/-.gq:W:)T<6g%L`6lh9G-&PH+fBd6>O<_l4ML]q$69cM?Ltn6[8E005),Pb*<)[]WoQBtf[1CKjF[6<<%H"r.m-lkR([R,PO2%e+PM!PGH0uaF]9(d0uS1(Yo\Go(g:4b8k&6+hAi+CgI'cMX/:08a%m^FeAFcSfO+JH&&KA#VjK]c01puY%Q%'jIXfi-CgG_jcu`m4`q%'/Dl&(;k`crCQ;]`)NsVkdm(LW]JsdF>Mbf:&i(VDK8*Qi`/%k_N0Mb(=G>/3u@lM[Xs$U$JGlJC=&L#%[.>8a4W2XWS0Xb:1,tO_M6.F8*3:0,[n;#pb,4f2dp0bI[5!_Is7E[K>OI=--ibN'G$41=&ZB"e0?*4"U,ScnCG1gq!2ome'Q"`W%#@#e"<_JX/H/RD7)h:sAq'jemQ.PD>K;cppFWknFs%pL-)oJWn;\Q'\\3%09U41YV3go?o./6>Fn.mRZoPdS8)MDouGt^C#5Y2'`%-"\Pt>Wi>B@`:?jViXBp09TOMW<^`r[Sl=Uj>sd]*%K!.>52*X0[9VL2t4=R.;Ra>8R&?qqmg-^JCGF*6S_6_.D;Y$CD`2",-hU`%&`k6.-&I[)R,itZ%IODt,df4fV;\Z`)rM-pOe5q[9VeQ2TTl6j?)&$S-S1>c16*#,n7!=D%7f5rP#.ifE%7?;jTpH>(\of%oQiUb%Ie-iL7(]hfb0<kS^foY7W7;8mRmqLP)s3\W>(bUr;E8f"Sk["hY*d?D?o<P7QD0M%5[Qae*0<FW6ajO#<O;LH7QWQ'T1SD%r?T^P%I9kY"1C$,_m2_8SBt:XEQ?H)d8_%`gBl.6L4-W<>2&8n\UQ$^)YLO^+Th,QRal$W,Wi15V=rS`=hWmkCEBA>'r=!GMYFI#01bE'5%m"`f1'ptr2cX?8dQ6<\<[L1/+71Dk,Ba[HfcLRi.$&Z,cl#=m*oj$5@-mm0$r.M&:n_n0*YB48rrtoO3KLs#IMhDR#5"HX@(+W54%65l$to'aOg7%ZmXV;Q^JVKDVfjjIjt4ppn`e6O7_j/OCN"j-[.-*Qm\FPS8l;V$-BV6).6Xp5]RH18'FFg0`*#j(TPafKE[J@4r.%`?4ntKi]caeYW-9.h[.kcI?HI*@+M@\3SRT=+ahH$%"#4V1W*4.QW!bE&1)ICh[RA@&/FV8#G(MF9o06>%q3%Y&<IP*sl?BJAIk^%hFP5.ZCj$RRPNt4\mC9/PFc'j;.HKe'(\andNZ4(HFitF_X5)&1?Eei2bNWhBf%r5)gXM?GF`qkjq29`dtL&^438XCR),0AC3u7;%/@n<FG(7LH>m3AD:%OKnTY47Ji0bBQUPW8b.p:&mEno8V"O4Qh`Rfh.QN-bM?g6Z=[._3if>sFW_8`)aJnq3?4q!1p#`)q26oT_+%;CdE!aI-@\W&`1k$hu2T.HVKcG0'&Xpea2NQ=\[32**S!a;@]+a"pcQ:=EM@P>G^eOHK^=DBc(mh[l<&VBa=/l>FTE3I^R0YJ'/-%B-67&KMufXQ"%(k.9KmVn32tql?-p_%^!RhqNEd+Ug/H-gaRNt9]RkT)"%&(Y@e(.jFP2qT4*%jTCB(#DbqX0=<2RD[AYR+R`lC*%h*`QLb(DZNQ;7,[U(Pi[(O*m_;B>E?!78RcaK%$:+(2&KTIH.sL)5oBRa/;0KkDuW\jE+Tk'an2IhDhDNVTKEAW)YBhlVVh]luWq%bn,E9g(Zha0*'I,4CS=B-C#HQ>ad9U;eul?(VaWRXnE>>h7`ZNeI9M[Yr`>tG4"XmdhK"m#Vc@K5$"?l3Ghb^L&m!=I9nk1?#TDu%JUW?Kj]\kcf?]!tq?0`eX>+[<rq63#Y#EThICKOJktX6>0^BNZ<TRe5gYbt:/a(^_\s`cj<AF&b+W,IOiRpG>Z.M?RCY^<_N+R?Y%Tr[;GCKK!!V1"oX?/Ij#"(JVZn"/?)Fe8tE7nTjlgX`g#+olL,0Wp_bI9]K&TNINgR?Qg8cYd8tel)sQ1@$`c3*4IP^Kg#<\N]`+%[.!7"U!%lA5+S;B?iS05_"s"VO5Dm.[,=#T0bJD*!3QonI.c#\6qerQ@V<if>tnhqk1++a?6_m]\XJ?HkRP-%lG`COh\3)+QfHf)%q#rBP]:,>ilIC-i]?Aa-cZ&c_HOr?TU!S"3@WdX4n84sJgaGIhq63"@4F[YRUJeX=ak(<b;Mqd#of'?/;HK>MbD1qPqV95>^=_!.%lpn8!\@'MV/pDgBPWq*q^4.7G!&qeaQP]XsNN#=Zrbu%5CqCnqC_T$+aPfDLJCK7"L6PFBP^-?2R1`fQ&XMhA.?0lsFAbF*oQZ/B%k7!@])F@gS1CdA,1aO`l?sDYRo'$'ZF8"ft_mS!&_5mt-:RUZhT29un,1$dF.X%!j$ZB$4>"Eo4m4o%`q.asdN[+el]Xt"8T<W<H%#6<=&?b>BY9o$MfB0'T-1;,^j/P`gdd9OKZ'lHf'_C8n?Ik.o-]"saC71qX[3L(4SGuZk-`QietKc:`Y$W!c=TLJIBdB-/%nk#b[%DZ`U<.L0!O4:cgu6>(Q8HGgSrAlgjlqhn4]5DkrV*hFJX4=Qf4?QO?'c;TbI%@ntlW;V*t6$WZ5TMQ=`XbN[@AS7RB@3U+(4"GXL%I>=j1oE`Q5g`DH<lSdK%b0LW-:r8n0D&L^bMD$i'$0`mqd@f6I\s0odOp3_p2:Ur7q^1ub=kE\b9`K7'rp)?<f4Ff^bOiR!Abt^n%mdF">4T_(a-@k:<PA\+>:0'r*MqI`<;+afI>lo2P8$71$m]lZ?njQ,%TUY6u2:8C95",LNMKoA3L27Wpq^T6b[D^e<VBP.%Y\g?s%ZoL`(`iD(\:Xd#74NeN0>i/'5Y--"B>`7X_@n?N,IH34,EgcAhT+C7qIP0g\'k"cujl-09qXEI=`@0I'&"hS=LL^:Jolp,iiF>)9%*p^#3^Y+YYTDS.bYj9\P93:)0mo9-qhSFqP<$)ZtlNqg^+H]riDVVDG9GO"^V$*LN&_OOd`;`-&Y&<NqU3_E[Nj9;GCGZj@+Q\],%4UbLu"q95NAd3W[<%h2]L=-R-gWS`cP<p5u,Xk;r-n[?_)HH9+>*:53V>H^fA_cj8hQC%VZ[1G;E)3WTh$qcsh0=c67WN$>7^/gm%JU6/7XrNXN1c6O%q,ai>bnO/.8u!N=$.COt\bKmgBVcSG?s@%`+H<G>naUPcP^t_);Us.F.nNRE.)!6Y>SBXU\BM<$<2Jl69Nf+a%6UKtMXrZ?./WhJJN`,)F=dse:Wf_*pOjMU?N8IPS6]9l+2,o][29MqB"Y?M<[i\GL/5%iilHs*3(eTi0/Yk$.Va!BZgHL\tiR=5!%+0K)-n'gh&IJm#PgG=7&[f'%S_-:aQA#f33s$gi%rVHEDbPC+4Z0f":#BOPun^Tmp568oJ)dnp]"QT[P=r&ZFZppoXlh=Y<K\/Q*%m[DT[-GNo<@3-9N+&Pp?Pum0_QDs5@5/9M-kI!hG*Z7*8'P\^BL/QS'd&.hch/i)Z.K8PJNY)a#l+d5,s7uQ81J;0l$DXWG@42<0%Eg2!Q[M_@kQ7karGZfc8mFmN-)D.;\P<a2b:-pP>QC!GfI9D_S\T0%p$lYg?nJ.K$blM+@Tr]\n#2NGnSQVSS/r_s6[*!V3kOY,3%b8oH+SsdR2N,Zid1LW&!mg)MpSe6XiY=FG\U9+Y*+b7SX?Emf<C57C9A8NQrlm*gf@!uY=0u9ZC<RrM!j)BiFfk>Wa[ASStP/h3E%#7[j(m`VSAF=ina@d(@eWhmEWIAk?>'6o*iK.N<qL*3UO$0i`A"lZOsU]IcRfKgQk<R54]p=?^U<`RCEdY0RR7+^p*7<'n;2e1q-%HV3^0G9Ld:'%kVf0Bok-05],h6YnqCLXCMNS>S+M$3$f11g986)86C@P#0-`aAf8,kVKBlXmc4c8LD6R>E>[fG9@qlOTqUhGA*i4%8<-F#gn%(FhV@l:f(;/U]C`NUUC&_n1#iI<LtW\WKu/.<Hi/a&8HcLD<0:@QbVds>4En)2bVPbEFjae\6SiEAf<p?G]5Ws7Uft)@%5R`KVOIthsMLQSZrYcP3$.9EK@_CNi<ds!.rqYEJMW+$*[R%$Gn_8E/SYb+l_`]n1mc"o'%'>YYV.YO!1_pjMD$5[:?Ru_f(O4];%dO<J>3`@FP<8gQ0f1=*CYk/1n6aM<cZ:.EP_C[%]CC?KiC(]l`CROV^[e&6@\QpfmpiB:B9eYV]Ek\,"WnFM4=80dOIt<0batM+S%(5H+18!QEjUImGA)/;Zc$[ULuWi\Z$5`l[0?3>.8#M#qn"TY#N![4KVDAHDh<I<qK("erp(K3.@I;Sl`DAB\7I1oe[J1k#KNDrD0%Wr&<YIHbD!ktsdq<IPlAa]BQKp@.Ab$1b=@QNg1nq3op><ti]\rZ7)04KMW^n]9naXHmAmrd92XN).Kl2)RS$gF-i9>eX(0AJ#Gf%H).FR?QR%=Es3^5Isaf_j+ia]T1Amn]^*loJ6i`>]%IT,C=3YATARsUho?Js*"Q%_qq9TLg"&Bs?9crcoq?f8&*puY>bTI+&%O:$%D+-#uHiC6%o:`7<neTo*YI)3QXFP-sSa-E<EmBU2L/N/;;-O?#mF,.VmS!c>C,Ga%i)"1jW.`cF0cA"KH=>FcL8gZ7?gVTc?SuYL%)h[M?g!sgmA_"+oh59D4oA*]5]0=-oC,aI253LQ$eTI=^i9;ard/Hr9p?5A^9!gBXacVChRNAHrRtg]aguX<p=*nQ5$jk6s+o6Q!%=9C-'jNQ^U0.+</^:@ms>p&$G[;V[:cS$F\K"[J%\c(d'XdL%\!K(C9V@->5VMi350h!G=GB,iA#\83Ec`VFK`K*4>4Z?,'AtE9[%Df"b4=1?:Ckd\6AI.dhcZ.fNFnXJ-Y4?dN#:X<n6/sg>@#\;".,9(a8g;W(+TV?fk5')VU[@WlI-QesBcgl/,QLO6UVaJDgDh`fO%B\_6(k'HK9S_GOAF2L%UD^kmjT:XdIqN;RgiPfQ"p;N%_9jTB3C03U2WEbH5(QZHMH=ht?_frZ&-1o/^03!Nskk]ATnp#AlWGR!*%hf5LIVZV;l<WT'Er!!C"4',XqT0G4^>589;K$c/KJ$le'EZSR.21p/@HDRYgIa;?%D&_#R^!\47G58gg!J225FZJ`-kEd^T4J/46%OFhmA)bT\nb`qJ0bB[c-bCrYp%VlS=Ju]&C*')DZ7r;o#HDRYgIZDFJD6%Q:^0V+6kjk^U^UGf\]ZXSdNk4$@^<j>"`tN*`QC.OL%[\'/G:'ZC95R"(7eG?XZB)7PL+Dq9W*(lRpR#(a6?05mY*s2Q]2GoJ@PCC3,](si4ErEC_+o7+$\f>k'mE:c4*q%E%S_FnDkuY59%rR*Rt%sJhQo;[+mOg!)I`D$C0,Yet/e"2+Om-U2E5C3A[I"#&<Fe>SmIueua/I2%oSQGR3_-j;3IFq1e<dF,NF?d:2,XS=!(G_Da%_.`Q/`Xbuuh``)Sg!,]PoW),XId*$m#CsItLVn8G_XYk$c/YOg&'RC]F&$:me29FMoZXUmUE0I*or-65_#fj#Xk6B".ciIZUI(3*%3?Z"\AKoYf%?XPRVPhf6;O&KE;7DG[K5ep:6!%oEb'H1^oA["DpA+@1,QRP<5kaO.\ZM<]:h9VqL<J!RBA[Lceadrd2cB!g<!h,p%=^]@TfubUGRrm;8c9p`Afo!hb!a(7u=q1UGJ`bDnrYt[/Fl'8na>%2<I!4\pWL_f,j'.#F)F+1(<o[PqebnCoG0>=1Q#+"Gd%C*N%h5rd7oP8FoJ"a4HLV"?(kGMZoi;A(e,kqIIf%J4Q[2V`5cYUL1c\/AY@lC<`Gn.D0#G_k5P:,/@FS!crVn/0!K?f:,JGcB?<3n`7%N<Z+SCW:*WiC"Kg:8gkY9Zgnf]o+=cGT`'Z*d<$cI!AAuI8]5JDF3Na?X)albB!f90PKg[o+`REVlu%&HVJe22;2XPN'LQhS&X]i%I?@6T(=JWK'*t4$OA>\?ZrAA"Eg*alm^'jd['9d=P6DLPWUpUe<Q\CdUC1<"""m)LmU$mWa*GCGiApl32i4<-?X)ORruso*6F4NU%<;WO&Y]e@I;F!k#.`?BETN'W9-<5[6DmH+<[p.l`9o==0/SYuq?;=PY-FLV5HiHdR]VE6EV%BV@_*#L_ke?!)UiV`BX+YllK=4MK%cS]gYeMSZ,pO67[)pl]rB7-uAA*`Nr8[2OI0oIm=,Fb_%$.OM@87ap!,,,f>nPe<aW\t#U8<6a#:P5-f7Q?CC9e;ue`X(/F&L]=:%+?!;&[3egWIGmZ06lkRQOns&KG??/jj2:[A[J<"QpG:.iT1f!Alh]5@G(3bHXhGVI?i,(BHe60mrk8Bo.U$<QAcaGp<*.WI.!37Q%;)MC!VV3sq6UZ`BJX"cV<S.tFL5&[[OX=-:?AR@nql[5@JqHX-T.]Pg3D)+9i(Sf+X/ESp?m&aiRoR+mmR:3RHJNOf5H!RA*9XSW%YDb'8;$9nH6u9]lIU=q;$W4F<#"\ZW*^uI-"e&sN\hP?3W86Z0^`@srSUrKi"Y"Dk7tb+Ne\2GrTGaoT=th(X"NiYkq0rS"PRrj\%_^9sgL"+V#Wu/u?J5HJKn-%>UH@k($!nq$jp'X&Y?a#nM=8j1Tf!]E&H%6QIO+:JH&ua)>M1-"sdc;]((P1rk]FZX\`"H`EE@%?h%@i@sj#d:7]^_id'8?p-"\Lq\%n13m=O9IW:@WiOF&;hli2@14`cl\a8b21MLD^@5SG2`C7'V#kD$gM6/W3rp(PGL_NWplXR'66'P%_MFX`\>h+iBU'Wk0`!d,rZ>Y*QKKLeAgdm\l1f@F8seR?s*p:-a3bX.Y(-AR-N&WVL#7Ab+906IL_%Q'qYBnk*`>j6-=sUrj[8l@%5GsS*a7OY+?LR[LqHNFbI)#[3s,Q2rp9HmPa8BZIiZEJMIh1Z"N&"W5ZlHkWCD$C7Trc#j1-Vcfk(B=#U\=GYp%PfUpLc/Jhlje;%NVB0urnLRcZ--t(Vrsna!!J1Q7,U<1dnOn2BYQT^R9$S?pEF?.i?Q2a!/o<?S^`Qh%;VVG2;F)m75V<?E>%iMS!R18$=mg.8K^n?%h&d4-]G"=LNP7eN1-nRe\=F>l.5h,,;jV&Y.jT\MrGdWuI3CgafbRB'":G91SP/,m3\B=VnX7`G!?FN+NuQ0n1675AJYL;bM6s'(%L/=>1/I6=7>K"CS=-<UoIR"jNG;:F11/1ur!$6$XVrA4<7f:"FT#=.jH0SlD8cR"F[bl&c_Icq:=U`uHRR<'-R<VLSDui.B3D%K8%RUKIEjoD_Z"aQN;:sZ+2^N9kmdSH8a@/i&Zn3D@f_(J`np=,?CaK@5jrLc/aag;;gLqHF3ifaF&d20Vcl7cMPhSZ.M:-WWc@6kL]%TI?;@KkGdBNT%>!8<P):.?63XMY^0^c]JO"N^jXb1L,RpHk3S47T?M%AVf[*,HE/WVkBqj7`5,n.\K<q[Sje4$&HhLKtS,fBW]m0%l]o@;`?Pi;,2m>cMjK6t1d!*7^WE89[+sGi.!p:,+hTK^,<I79bp<9Yg2FH1p6LI'B)#=g/p3)\2=]aE'f@.j]`]o!=bp$]%rG1G%e4eC_)HV?UW")VdAlDEq`<*"f+`0'3>+W&N4Bir=*g)Vf(SmZ],p?R.]uO32)q#(Ua4n[JKoHSdYMAVF2IIH3%2QM`f7;LXr4U)(%TibB4QRHjr'Wn_K.P?5-_qZN[7`6OTZ)D\.b&s$kEobtL@55GYVDC7gHLQ`(fGV,EHag2@$^<j+[sQkVGk_2eI-841[_pAq=;[s#%[-AP`IInXYL'ir@7l+<tHZ5)P)i&[;@UTqN/C;e/lj]kuQ%&"%CLBV(Yfa6sMT<g?&MRR`.=;9L,R?0IHl'%16-(TI>^feK)or&f%\<61!cM59Q3im80&h%A+n>*7OB.QjOD,b9P@bG<N"AHqhND_6qj[ipukSKIDm7N6<L=E@W>L0@)6BU+jSVUC[`3>7?+n^0d_b?KW%hbo98.*J'2*cGN&B=TO*:q^_#7REJ`L=hta_ls0OQ[Z(/U6]@mk3M1"IaDm-\m#?6ObW=oR0Ma>PX*hRmgY7Zjcr-ID4<R1$Dkh.%V5TL5_>6hAM4+kY,\h2^PHTQ)m'jc;E$jir1\95XA_",-Oopm-d+"7UZ3-P`ejiTp!c!;oNTc39>9NWK!<UUYm1gEVFYJ+qHEbQ6%^S+`-^mIO3;I+\\Q3P$d0PT+$Z5X.(jqh.ITst.R]Cs*H%mj:\+BPg5c[a4gjBTm"Oiau(Bu3gs.[>6E;,aY%9h49+$'m1spuXA;%8.i!85#'Tt;5.#SB%YVg6Q/rjoC>V1p*>P].SpRdes:LgWapOOEYe8BR;9.t/;\Ndpml(%Ep6/2<pE3nDB-D2)Y(R+]Do+&9*#Zn%MbV1#P@[IMfIG1JbnsHrFQ6_b6_]WdWu=.\b_#Ie0-8-^M=eXR-mAshaGl-?rAQk.H!3;`j%@ua'S7>d+)Xum98:Mp-9-f,a"cX@%?Jb,;2u(eM%5h7gjLCmcnjMA%UjfaLN>>?gg;,ioH"fQeMgO'qp+rZQBt$3p5AURm=-:QDaaX#rW>L9.3]V6.Hiss[0`$Y`TusOF%"(ZUjRQjWlEcdCp]d<j,m$Pc"LD?u2*(#7K#9@,H_rQft%3!QQ]AuH,_^]i``?=Qq-_CifW9%\C$AfjI!g!$s^?:_3VeR?SM^%tl%[;%$i%k9%l,9.4rK@So@N9]MYhgUr."7u1_MOPBR@$NI)ho,js*86QJ`2n)Ed':REC:C'm!tq&.m-'EET!^^eiJ22Va`f;'4JqN*%G;OB@RaA'@@"J`rq!j)/8e2-6MTf;_79-8@M*kC!2=A\J7P'a`qUK?eP?FhXFEfsO,)?k/kc&rkfNJZqN:rPhSl*N<NA\A5A<dE#%]blIcY3lF4Md[d_dsd$eR#j&R$\hqf%TJ4]oD6aN^Wd:*]1u4pdZR&ZMb>GCLWP?Cp9Z:]T9q[BkWH``B^R9WWH39c&r^*'>[il$%$Shg*/nYU<d5"'<c5<1Y#<D,-S3)2;m;$<o@cmG3>P+!1MT=%_"<%38;PSRd)=YL!^)CO`rHIX3hs%;>SqFa\mORQK:4Xe]&0f.B%O.@gjV]@42:3X`hKa-$HOEJ`!C$DpebKqaooM-\CF=IY6e#,0OdP'7$_n2UA,u?hEU&:q-=68:4;HT@7L9rJs)*>H-oKD8Ym#qP>%\p[>b\EiQ:e9^8TDo_kP,?V29NhPO$!6EP$i+a`KI^&OKkA3[t'm0SY9==18Oujf)]20hdUuaqon5`kYUd`[s\(7=4]LnmNB^I+J%7+2hVqa0CIH.$bP`t7TkHmH&CWU6111]Ko%i7ATb%Dt'Df"Z^P[dGKu-FWij]91FU7op!2&%li>g4g!HesJZ0Zk>Wb,J*?h9>+Lh%V0,R`!QIIMWL=c)Ui2M7&4FYfs-_/Ha(8m2CTE1q#,:7KhV2Dq4SBIf?`i1p:^IB[6fjp4hu4$O=U1RpX\gCiF6jYfD5o)Equqod%#2q[<G=K`U;LOh*.>6!=?1r=UP-R5CTS["+0.RkUrc6%O0nsJ]b]gHN21ACQZZ(#9<aLo]$@E;G+h'-(00_\iU$l_B^K#E)hIL5I%qX+;dIkQ6;T76[Gn,:^Rht4n>@;l#)lY#,Ee^mZ:qX-THp2+/c*VZFLs3koDp@[&1hXpcuX+/S(q!#7PBFOh2g]+d2VgnC=mq)HP%,4E.2(A)04dOW@HVuohW]Fi4]R'<uX4>TQE6!g]jMAABN-c)8BLG'LZghERoesDUb=Pd*m6NCu/C+[cTms_1dm`&cPE"Y0ukI(k;%nhZ1l#KE"-\Sc\r9kd%;M)0(AldnV<csYTffYku=[.^nV7Zj)gRXgqY4BC)TXh*=RR`OfZ"M2-MlE5'^MdjB';(6a.5Uoc>>b=SV%_J[6gF0dLGK8>P^_H`pq.(lf.WR6nZEubGjh95h$rc*i0ahZ`%\0pSYe,%G6pF+ZZ-:)ki,Mf`7PJPh`<\)\$&_*ou-2<3NoNB"-%'/ET!-OQ7</7j^&3*D68DK*mqY?"i6[3H4l)49V:E,:Hpn]OeHct^J]<5Ep=_Ytc:`j=g)>_V(j2+WXYU/'W[WtGWmW]<XmoMs8i%&[>oAgC\7.cTtug&#`u,=RRLZG>;'^Y3W8!<@9ZlR<3[Q9j.D3)9;D&oQaH##E`4cpMA`IPK3^LknI=EU!+jg.H9kT23t<(N/JAR%fC2E3piM.d;^H.g;b4ptrPZBj$G6F*`?.c@^Z[7:dD:#BU0Fbamb^31ZIF_&^.fTs&AH589bMQCaVj:ZI]etfaGlE1e(r:O+7=hQ%d/##p\Y[4ZI^^!E"EbY[!J,=Pd%$<tR7EH_9/RkBAGs&`i>nbFp(0E=a=k@f/<KK4jYK@R9X019Z)-<8_;hKTNkdtY5S4[Y=gUL<%#KVORj\.]s_TO=A@4C.m`qg&RnJY1+N)Zl[(!b8A(8g(nRl1.T&NF(_@JM<MBPZm7?K5$G_l!\@Y74_5_]b9cD&MbH(U9ETLZS4H%hT%pYS)n;dW"NC#Fn'ZBLmp@ce^HTQK>g7E%_!TNZA2P+8pY+IJe<$CN+Z>_K2uQ0!=5=KI)BLi%DeEP'Y7V2<0ZD>\J?a!(O:=5%FfQ^*Xf&^VmfbmQ#d6h8RX^r5/9gE#D=#ZE"\G=kLhE*<fo\d%RSt.3/L)2).8p^m-rhPtRNh+k/qa4ZD4X[mUU71i*PCX(4hd,)%lP7R`LkZ(O?*tDr@(l!HV_L+q&l3`B#,#_.T72lU?@.G?ObMP'BGn!>HTQ&X$`2A2R$IiA<E/:'j>M85fi:j/9%=CVb=_2cPZ6S>%m0IHbgl#/u*Z;48Q)rr<SGg$7Tr-jb>5dbK[oLZ7+)UC=0k0Bo?i*^j_o[6[X<m%EXZPA-?tVPiqp1jVqZoENq*=b3[4[]Q(&Q^N%DtVop_Jg[ZeLJK6>hdhU%M;=S]AS)e$t'[Drurs"d(j]]V.JVSccR+Ig@A62".tdb)6VSjK.LE#72g0U)b)K:)4G[Wp&WE6qD)Sb%6Y3J6=>O28oK;m][u^$Rhe-,nG<b!W5/hL:cC<f3C'm#)"*tjaoA?/,Rn[mtbN.65:.p_X)4+M^BptLDTE^gRN*M9G*C3)%,"UeI%-E[SgO"@g3E,tPC$R`r9'C2D!>#,VqVY,E5"@DhkL:Ni%P>>gG-FliFX;8[hgQ+qKi[$[*a(9+UeZoOND!hL"n<5fW.tTlh%&HWl%^M+*>7VXt>mCcie6M88245E"N^q)EqeA\G)i`mT?`M:\0&s&o*SPK+Q6q;'71PFRq410=t0T/Y90f5/8E\Y2QR7]a;h2Y&(la+rj%,lJM:jmm%_4_t1%[nIu7S2f*_<X[<t0]Y`=]9SmFK6I(QP?lilBGPtSBA[S:cTUT8>6K1Lib*DL*(apMZ]9+@DQ/LA#`(2n2?BV/%KIrI'Nl0&PTiAU*PM2h@!Sq:Xrm@G*.?NDM<k`kDN.hQS;O67'glr';j-ZMd>RNTVf\A8Sb*K[gGb'q1!e&H/i0g7/4Gg7\\ENA8%eZ34*pZ3o'9Ip01AFs_4MGZ2>*2E!mPQaoOO^5VXaUXl\X00K?U1Jj[<he>?)Ek8g0@kQi.ZjNdX$H*^X+3YTarnVW$@JGL3Vnr!%mfspYrHT<!;k=H)$@I)A)[$IEeH-6k;_:V;Mi(%fN:bYXLQ#f%Zg]rr&LX:]20n\s*@_GId^7'$k+hW1-_Rejq&8?bD/7^Jf/pkD%CVnTL"I@Tn1?JD/@3UtJb'$kYiH(YYA8J83lI1r?P%E;-b#U"?G"WFrMd>mNg+&=eW:R;F/"B^#X0`!I/Impdn,o<=9o%D)ouR^,%._NV)PgpI0SDdm`6N@Gm!/F'!7kuQ=K06'>q',0];_,eqG0?HrED5I:?;D%a['>TrHs3[#8KtcOgU++2iDM(6jfu!d;Xo1kd@932%.>+bX5@'D/6ZB1#YsuNa'g!*LVATqT3G,"8q9!e]1$%<hRFb,-MW0[&J<tVN))TFKh-\+T1q6<0SKSBE.Ucm9a:YONVc"ikS9tVr%U_qEhk>*@M]"E'L=Uud[s&Ci1>#A"3UsL4Uh#m!+_#I`)gJC`_@ra4Q#kY]N49)`jqPJ-7O_/kXUDu]];-WpVqlN0L9JR))hZ^Hf%>&dJn$X$Vt0\;1T#NW/EB%>iD>dL!5*2@!#WSOMD>=/\Ti"K\6g\^bC]aR4FTmk4V+<q!1l9s?8)A?<i@2Gl-(!W_*1I?'Z?MpqR%`*H_\B^%iNVQ+QK]mW=%RZ)P>\WjQfG6no=[$h>:82aE>TMAFG182]>FbKW)Ta4gXFU$8*n<,e=-$@PT43u8;(45L0[;K#(llg%e%Gkb5$\sJ(R:6sd6h+.WKntFL7</_G2J?V>`\6[%sI7%T0Y[R@UFt767;]>a+Wa+Aed)^H1-l4_g^m5k_,POoaKB0LFA1BtYG%t$F%gN?GBQKbhpF)7tGk5;\>kQ"0e=3LX!).Y`OV`bFQV"/h^3\ZYL6nP2Nfp!F)$p?3E5-:FR0#=jp\#nZ>D)2?dQ4CjfPf[*ng7f9&%9*CGu2)!;]]nP%">s,51V+K[THQh#V8i0u--j(shE`0;`9)2\C?4W`0?:_U)?LXk^"st*2\/]%X_8tufbrJe/k;g+R)cb;S#sCZd%=+^#G6tXnITZ#3RT"*>R=eKWA=-oLTU[IKs67^Eaq=31H?THh18V"\=2iT>&]iq&s?G1b0QC%W`>M5c<e"hm,1M>2.arOtt<C'o#%-"9c7DnCQXKZRG6i<cFcWhiR>AhX9u2j%bUSl%FC?cl4cV]7$YSro_^GCt`m]a6_2M:bSMF-4.e;NVAYQ-YfM;pjR:(SU'"S!Q&)%C4Lf@.olb^RKj$:!YQ`j-NOsUAW@1RE]'"r,gBbhK,0Y<cBESYH@XQ-"<3!I9jPC9/,KLrdZO'b.0ib+^+G>B[%SJp3DNB(PT<*@%V%GGGhe&^G4-;"C4RSeGUdg5<0A4"V!]%7SlHNrkR_O\XfW8;U03&0i,-(4#)Qk#m+fhd?CE*D7K-Gq)<"I[M8d<jmM'ce`HsnW*%noGPnM_`u?1-*9]9^9F1XZ^`=99JJCoVZ_;?L-)g<A[e,5M7VqXgNq'-("CO_J-$J;JW==&l=W7>'HLcL"kLqT@78?8,1]_d5DCe%MCX>@eNuqYmTJ-\Z"tq4q:bR2/e+ZP)7miA$&uDokD0j\/'nPb*UpEb]Rd(rEa]N5=+*TA#u^E2]b5:'h)_+3pO\tuPO*h73&q=t%l<.taGTW"g2.>]Y/k5cTj,=W*)Y](#CY1$m*rDs8XI_$kC:urb1'JL^hO<W9W]9YHX3u3,\i>O[Ae)4f7G;/;XD6L]]!>p#5UeGA%]T465GXe]U*;YmD!C$$\iNF&4':5;DL(^Ek8Hg^"mYALn=kOrMf5i6L3SG?9:C9-qG2bmSI-`N%_2:RG8\UkN1Rig(d">,:%l+Fp%&J&?]gNsLh%dUkfTC!Nb&4$=hU9eC@\#(LV1$<aun(/C/dY(SF9d>U5WM"0_W>_;L8u/Ca[\fk8el_WKJOF4Fe.D<h.O6@BmuNFn%W!#Wl(6Y5qFkpUiUqt7<G8<nCV6Mt4m;c81TH!M99F9EX1e`!jV;T:oB.$Z!PW64c1F=+_TKGR[`66DEAEZT::8jLicORU]TN*Oe%n-$k/P'\E<b*d!$mtZ<_7?Q[+nhdT_`=3XieAabdn][e8PLJ?i?Q&Hm0fdN`Atkc57bC@$Xh)O8)?-\K,@l]"g$k?5-pN9Hla3D3%1FG\ffoQgP5=rf.>7LL%<O,F(D*3HZn6pN?XmJ[WTb4=Y7*60%J/IRI_O$g!!oH#O`<ufA5"nFN5+03,dChkWXJ3m/@A5C;1NSL?%Pm"pNV7kT=Y"&b*R9IMeePZ/3)E1"bR6.C@!CepDTSfb^WC]gO$5rriF_16&iIiO2W9[NMqsn\A(gg&=NB[M<8siL"H#R/R)/PSF%URWck4D5lh_UN65U!UWcJi,i@lcuWS\@g'(ah.0?AH$mis%GZ2cT;TNUf.^j;0FqT?(-8[f\rTknLW.Wg]Re8<cT0?U4&(4K\,rF%CF$We_s0Hd`0MaTQr\il'_^<!!?oU^PkbT.VNWZ4"N+OST0&T>BH5Y"mY/:O;/L(XH7AP]3PPoBN&]M6k1W@kdT5-8<U\_%$s/Nf%(f"hRS2B=55[f)*CT]t[Xrgk2X)]UmMiKFPE2cS5p5M2`C<.@C(6!1R0[<!q^MpsfI#VnKEu[$:MP/MAOG(NX<_WXZ"L&T98O-up%[;\i9>4U#C39/O,S.6ou&iL*<N+2t$"ui#r%%<;;:1*;1(,EoLLo$lJStOjT/kM,<?hoq%E:16\hCu&X3XWe?fH9?X`P$d"Ld.j0%MS($K\$@jEqjtT^fjUK?A9N-LPZ2^l6`!r>E:p<OjGWS-NS;eO43&>o)0HJ7Btr1sqhtg=&O-8oo0";gE>76ii,5s$Bnhgm<BGML%PcRYH>G!#KN6,Q3!C>9!p?qY5ITXA=>LpW+$er/+$b=]J7T:>WUfJTk_;soRU1W,1nHliiX$*X%(Jg4D8\b>mSZHYms.hjY`i7FX%IH4FuHFMN2,\(th7?]LQSan^e?Zc@lDQ0<Sq-&d(-3>7<WtIgXi6:7g3BRpT!3?AU=gZg1EK-hUE<J_),c.I+O`L?o;=2U=37aog%XGJm"n1AF=PRm.[Xo3>>]_8LJ%eZm)^Q2ZF$_5t^S_Gn@HKcMtbn"`k#p1ZqDJraGhHgVf@Rr6_r<oA>[/ZI606OfUK,lq[S0?Gl%V2/,9G@5IrcG]-QprQ-^NUE7hJ<qh_;c2WCGW\m]QFr%1ndtrRT]cjuR+0]VY;KAY`FK?(BE0AS]66a6U';LV3.3UTc?KC8[H,_0%Fr;Us6a5q>l2S_PgAc:#M^3$mnrV2_l'UJ$@cR&.l.5GiWa]rl7i%q@+37Elcn,K=%bGbqVc)#rg3b1o`^kOn(XNX>`0<l+eWhd`%N]ij4`\`_jp;/%oWA[E>iBFl@$S5J,AgP7H71V\n0WcgqZH7"PjW&n_'e'-O>@LJAQ]r8'A$9rMf06E8R&Vc+a4FI[f@QZFkLM*u%jlU<`2TcXt@`KY!P-[smf4+f:.Igs=L*mVJB&*c$`"YJejd3WKqa/h$L`4Pc)5WOY`jSL[S1DtKdoFL>+=P*k8U?FK3b;6dJZOj.%OoWXsMQ3H\%N$\keQU$%9OEj<5WIjdb$Ke%SL6oV-p5;kBN?t\<`XiVk91US#Qlf=0O67Q9>US&;OjC]8p@g?4,[OB"Cf6\[osPP%#ua^=TMu@>,7A1%;,q`7V6IY\'=i8i&r1Q&orDsl',K$"Wgk2]q8dj\;TbU=7ouB&+u`/f@:5?lP>lS(</9OiRl>9AD,POO2apiC%Z=,4HD)3HKrX`DGjZBIb[tAU3*B'U*C@`)#MRps,.o]qj*he#h(,($9=?9??dn(f]SX!%7ch*/XJoabs>cF%_-o<g_SuN/\Sf>OP%B#>j`:%E.qD5I%pGc*'C?kt-4rdDrK4)4j%>;J@(dgXq(4c<5N"G6"pToUOFNs;hS^%J[X##j=R^oC"A@A5k:]u]X,Y_M\ak<&k:%VqIA1!\Gs8AFqDZ;k*p\nhi3DcY<\\L);[_mStg(V^;dD0S2FmTa[kS5TLE[%H>JPa&==Z!*9#@R=0>!+'T+XH_Wh!F8/dQL5'XP%#il;67#]C.s%u9,-A\`un2LlH4il5bCrB\d(=;;8E3`Xo#G[!S@BlbE%GmUF^7X*##jKI+B"'k-*TWdU#/@*iJ<Q.Onm4qbjRB/,%<]$^Z-GOp)FK]u!htK%dlK[R@+1/(UW+KT3-9:cJ0<o8,ZkuI^.*h=-21*!Y8+@?KNVCk9;"O0i=^HJa<_&]M60cZU%PV6d2\Jek%@<`ZbDK:)j5Nk6nmfr[0j+6Yt@9!Gt!MJE*G<(dQ]VO&GKn<4;_s#PlKXF7Jgps<L5VCOL9u3p"-KdY1DQj.56?b"/K5A-YLb([d%MD&ci=ct:s3)6TFnjh'Qp%$-aDOC;,BPA6cKup%`GB0mJ00R/O"%6dO@od"d[UI,9P!'9+q]t4D#-XWej]fA:0E\qYT3[m(W<XG5%Q:,5;n9/J(nI(V7/8n)Ei5RZhE+ZAdW)^;&'duQcR^=;KT*q06W!bd.:PGn)ZCF[;!Pg4NXS3+Kn>"lS'm+H.d:rU*SuQeInYb<O%R$pHQ"7eIL"&f'2+f6g*7VH_@e-8l@VC7,7*?jLC$J5ZZrJ\hmbX$C7Nf^YWS\/BG';@WuKflbh3o>@1=$#rm$7ZNi0DsWTFE`<1%GqJQc=ZC@6Ya+;"G,VRr-LfG@1!VWZ[#K;#Z1?$t9rLYalUfn:7F^X<El-Rs_cOdMV%DEMPfo\lSCPFjaK8WuDCX>o"^c="5j9+C%.J5;U$ugX&2[h0[*K:?IKdnT2WPS8p1r:*'FB'-d]-Bf4EOu#P:/*n*-=ANk.(i^!J?2=JTO4aHMG[U>`+brr7&dUf.7;d$7tCd\%6X4cI#M-@$6SR!n2?;L4F%aT3JOhL_?e$8rR4(9(r\k"4D4RW_!F-lpWRrA]&h[csUa#0im>uZPs0H1aF1upTI+(,//b+J,&'!?t%?FQP:QaqeK&599c`2=1BX374RhQn(N@Pji*e'dZs(u:=-"PLI$acr7hV1eDr1lP$YM#eoFE;'?);ii(9lGaK,ko-8*1cT!T6:q>(%m=g>j=o?(M]!&-0Zo<.\BM47I,1EQdVBkQF<8pr>\Y>(W*\'O>7$"-AmSML?Yt5SVTNAHKN?-e@E*0LkNnB0;GIEgt20/qnE2a9Y%Fn92O8`LV/U@p+KgM.mTi1sA`[Sc4:(Fi@R+inp"'X,.l%G2DA*H*$7LXt(CT/gC2V<"gM)C/1EE'u#lZ6j5=,6@gp_/YmjUPMf[%0Fj+/Bj^pd5du=^cM_PJ6=cstM'PC=Wf0%30SpN?+Go'<+NJ`<Da7;L.Bu.c66/O/[1uWCXgV=R>RN]eDnS]<#i]mD=@:@RI--XL%T??S8WYc2"obcO+06dQk1U/1j5&/:aoO(QO,f]:d&7>ruLN2#]a=V9)lFEOO'ZCZsSn1WT&`FG$Jet*5Emck';>Q^M'[M;(/>%Ac%.5fG6`fXuS:J`=nI]YiK<^/UaqS0Ma-o<qS1dMIQ!:PT"A79%[<Q.ARZ-/V=Y7hQZ#,^CbNI^5O?+$[R1_aN4Qn!ir+pW'nEg_ei%PJZD.2qt;E`)A\Y[DW4HJP:iBD&jA<&?TIFGc@jDFPo6L-\:r(H3P3`PZ[3/d.E8l7C`]I)<On<7uoh.&5B;n.`EN9>Jsp9M6"nb%E*0$<c-LU3;T/EBU[7,s7&Pf0]ZR^b-8\4i]H/1ZBm1.?;_LNrFJ9CSdEl?CqdEgeNL!48hF:![5IPik;mW(P_\;XXPYI#.3+grX%^se/I.?iO#[tO"r%'qoB%Y,_T%[Z[>UNUG!o7<fePbEKR_%-f#l!A6jjQVERotAp==tbiQ!->`6#N\-#Ffg;-q$'=2]?Dn9I(:/A%Y!!i&6u^@o00JN806'_*[19lI5$2-m^uBnY?iM$j!FOm*od\2HVDU58G=8Y$3+IC<E7"rdLrIs]BnK`ZHP>I,O\+!rJnu4Cl"n_p%eW%fYr@8pY^^`K6JFK^''>-`"k@s_8J.R3TRq>@;'(?L@e190ri66Ked1fm9L7eet:]nS)WZ+O,iWmik%e]0U+;@W&_lY4PoqUb,%O;@KMGUgW4^W_/DpsH'U'e/QM+aMlIouDbffHYR]0m?r+]rr:dhA;,Xf#<;9-8gg$Q@;dq$bW8Deu_P==VQR3i728.I6IP2EF"V/%$DZ7Jof1[S)paek+!<6q[a2%`n3j!?MbDPgo_bd`5gP!.Y`>$fr!B:6<tf&X0TKI<')o,tgr'!Sa8>K+8!SbZ/"*$YMZ;*m7JQKN%CHnR>>h90]bNJWC[@*ZDW[)t@Wh2Kq/Nr1gq-euF+-s\<@6M\ej.[g3gc2]OI&eOj,Ne9\IA12NCA#$[jbRTIWZbu!S9-\)&&?\J%jSEmh<G45:%RFh0<_Nsn@*0h7a'Y-H`79`2U17H7.!>:L%.b\8k\aT4/]W-<Osr_bC=EqEi93AT_-86@Il<=&e'3,3,QK3hID]og%%PbPj7)hcuZ!d*2UrG6E$H!#?==/6b%Oa_L]Hp"IZ9Tf*jNnfc5<$>pkMbfErRn.[J)%FpZ)cdnco!<a.PS^+7sutGr#MQt-$#om%#C7l>o1=TN.Oa7*XuAQR]SK)OF,)]TR_$(H0c>>'Wd-0:M*!#:/rtTAUt9YFI+iV.aVtpR+TV\Up;2f2QKU*KS^Q'Hau:,/(MBP%%$CS!&(Au'r)"R,cpo/%&HOo>)!UUe$B>^/Y>Qq']U\IJAV7$XEK4G;hjVeXuBbpUC1SW=bC?QU[+@pG[/%_bXb1ZKfCA?=;frG5%%e'tg05Ei]`*$D:j<5I5o>s3H=-->6n?;G,>.!oo$/k<plVCk`?Rsk'g+Z`gQ-<"kBe0F1'>83l8gIYPIP3;>6Ti\O;A@`h"&uS$h%n75VUad%h_`u,>%!d>\08Jt?X(u.,GE[.!,).GT-rme_0f;VrPD\ls#RN\TG-so\KhbacZWkF(;^T%cY;&F&ZYof-BTZfgUbsMpK%X56[10'Pd-+C<+qFh6;TRQd/;Lm.b'GV#kIBOPGF7L!t/gsaNdps"kfY.jrb2Mec"g/POIBouEAdu[@&b(s)&1+&,Mb:](EKg\T5%0#g)<W,N5PYXsmrAK,@n81#%`15.flBj0b6;$&8&Wb)c=-Zm[&SZ$3MEfm]da@3g^UP2/Le)<uh;U_P60L_:YP+M)rI,S48%6+,g%hT"<e%AgIFNr(q70Olk-5cY`nr$[63jH:2YLdtoN6o.kFmQ3QHas!:=S!Unp"#=0/d4e?-oNr^iM55-L9EWLCi3XZ9)?@G?JeQ41%<\]-b=E]_afGSk>.^V,"I`%p]I1$#Mp/-=d97/6VQC-/hYm.bG_YJ8fMl+Y#UXHQ!1^@1,-TkO%S^rNN.$f*8/k2EeHZp<YEs,d<%)CMm/MB9s7?#@k%lI8Q'SIfQ$PN["Y$=H%umhp40bP,t#gnO;?bH1bDpT#m#>tTD(D>NBd?Ur_6[O1)T?hRYQjI!^al^p;dnri%j%4WsD#o$iqlE1!d0U,kic3-P9dF@,CS)1AiqdVGtVB]V[7s/;Br>oQL+!\/emXrYX?pR.kg2/t&5jsa,gasujd\D:4na)\E8-N-Dr%Je@9!qR&R1as/mEH0A:CEg3Q4]'m?Jq$fZA)(7\^n$j2M&\df2NPP/TSE'$AG*OT3akP^_kW@]ABX(a4g,bLC9IH5Aksm.Sqni<G%qC:&85O4BTY%grCVd9b9(>(!n_6^A9U+).*Q=M0E6$VpnC:JKIG-GAKD"cu?cX&XBP8l.=rLtSMc9jd[iRno%b-]'N"(Io+pE;bn%S-[WTYf3PWX4JFYpt>&X.Cm%-(Jo`Pl9IFMY6ADOS7fq3M"27=bA;:!FPplMnu9G8Y7aL8aIUq'l&:^>EWT>L0'&h^fhL";6p.,N%?_$t0G(Ktk?kfp>XHQs2SSA.TMEGY6+D,d"VK@s1s(%S_#_idh55BrnqITL@\)q"7;.msMQ;\[j\h.+Ir0=*!1)O";*nA*d;Qk9/%XE7$b[KN0HeOs0:<p.DS\Nno^RW,VN3a5&FU;g*E?<Y]]lQq$LN=Z=MdqKjRCQ'0rSb1M(p,p==JXcJV2g#a!%ft",p-_9s0?:a[%H=*(*kW>o-n[?Et/^T8++7=T(s)6V05Q1P1q=;/4r;KLdpNJk#o^@;(GJF.gJ,7uNqr@/FFSC"Zn@Lpbrn[&BrpP".huAc1?f(b;%T76eNs7=#*l1aZGiP5Bds"2DTAKUp#:S7XBkI^`r,Z3?^~>%AI9_PrivateDataEnd